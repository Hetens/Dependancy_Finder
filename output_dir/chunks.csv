text|path|source|chunk_id
"/**
 *  Copyright Notice:
 *  Copyright 2021-2022 DMTF. All rights reserved.
 *  License: BSD 3-Clause License. For full text see link:
 * https://github.com/DMTF/libspdm/blob/main/LICENSE.md
 **/

#include ""spdm_unit_test.h""
#include ""internal/libspdm_requester_lib.h""

#if (LIBSPDM_ENABLE_CAPABILITY_MUT_AUTH_CAP) && (LIBSPDM_ENABLE_CAPABILITY_ENCAP_CAP) && \
    (LIBSPDM_ENABLE_CAPABILITY_CERT_CAP)

/* #define TEST_DEBUG*/
#ifdef TEST_DEBUG
#define TEST_DEBUG_PRINT(format, ...) printf(format, ## __VA_ARGS__)
#else
#define TEST_DEBUG_PRINT(...)
#endif

spdm_get_certificate_request_t m_spdm_get_certificate_request1 = {
    {SPDM_MESSAGE_VERSION_11, SPDM_GET_CERTIFICATE, 0, 0},
    0,
    LIBSPDM_MAX_CERT_CHAIN_BLOCK_LEN
};
size_t m_spdm_get_certificate_request1_size =
    sizeof(m_spdm_get_certificate_request1);

spdm_get_certificate_request_t m_spdm_get_certificate_request3 = {
    {SPDM_MESSAGE_VERSION_11, SPDM_GET_CERTIFICATE, 0, 0}, 0, 0
};
size_t m_spdm_get_certificate_request3_size =
    sizeof(m_spdm_get_certificate_request3);

spdm_get_certificate_request_t m_spdm_get_certificate_request4 = {
    {SPDM_MESSAGE_VERSION_13, SPDM_GET_CERTIFICATE, 0, 0},
    0,
    LIBSPDM_MAX_CERT_CHAIN_BLOCK_LEN
};
size_t m_spdm_get_certificate_request4_size =
    sizeof(m_spdm_get_certificate_request4);

/**
 * Test 1: request the first LIBSPDM_MAX_CERT_CHAIN_BLOCK_LEN bytes of the
 * certificate chain Expected Behavior: generate a correctly formed Certficate
 * message, including its portion_length and remainder_length fields
 **/
void libspdm_test_requester_encap_certificate_case1(void **state)
{
    libspdm_return_t status;
    libspdm_test_context_t *spdm_test_context;
    libspdm_context_t *spdm_context;
    size_t response_size;
    uint8_t response[LIBSPDM_MAX_SPDM_MSG_SIZE];
    spdm_certificate_response_t *spdm_response;
    void *data;
    size_t data_size;

    spdm_test_context = *state;
    spdm_context = spdm_test_context->spdm_context;
    spdm_test_context->case_id = 0x1;
    spdm_context->connection_info.version = SPDM_MESSAGE_VERSION_11
                                            << SPDM_VERSION_NUMBER_SHIFT_BIT;
    spdm_context->connection_info.connection_state =
        LIBSPDM_CONNECTION_STATE_AFTER_DIGESTS;
    spdm_context->local_context.capability.flags |=
        SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_CERT_CAP;
    spdm_context->connection_info.algorithm.base_hash_algo = m_libspdm_use_hash_algo;
    libspdm_read_responder_public_certificate_chain(m_libspdm_use_hash_algo,
                                                    m_libspdm_use_asym_algo,
                                                    &data, &data_size, NULL, NULL);
    spdm_context->local_context.local_cert_chain_provision[0] = data;
    spdm_context->local_context.local_cert_chain_provision_size[0] = data_size;

#if LIBSPDM_RECORD_TRANSCRIPT_DATA_SUPPORT
    spdm_context->transcript.message_m.buffer_size =
        spdm_context->transcript.message_m.max_buffer_size;
#endif

    response_size = sizeof(response);
    status = libspdm_get_encap_response_certificate(
        spdm_context, m_spdm_get_certificate_request1_size,
        &m_spdm_get_certificate_request1, &response_size, response);

    assert_int_equal(status, LIBSPDM_STATUS_SUCCESS);
    assert_int_equal(response_size, sizeof(spdm_certificate_response_t) +
                     LIBSPDM_MAX_CERT_CHAIN_BLOCK_LEN);
    spdm_response = (void *)response;
    assert_int_equal(spdm_response->header.request_response_code,
                     SPDM_CERTIFICATE);
    assert_int_equal(spdm_response->header.param1, 0);
    assert_int_equal(spdm_response->portion_length,
                     LIBSPDM_MAX_CERT_CHAIN_BLOCK_LEN);
    assert_int_equal(spdm_response->remainder_length,
                     data_size - LIBSPDM_MAX_CERT_CHAIN_BLOCK_LEN);
#if LIBSPDM_RECORD_TRANSCRIPT_DATA_SUPPORT
    assert_int_equal(spdm_context->transcript.message_m.buffer_size, 0);
#endif
    free(data);
}

/**
 * Test 2:
 * Expected Behavior:
 **/
void libspdm_test_requester_encap_certificate_case2(void **state)
{
}

/**
 * Test 3: request length at the boundary of maximum integer values, while
 * keeping offset 0 Expected Behavior: generate correctly formed Certficate
 * messages, including its portion_length and remainder_length fields
 **/
void libspdm_test_requester_encap_certificate_case3(void **state)
{
    libspdm_return_t status;
    libspdm_test_context_t *spdm_test_context;
    libspdm_context_t *spdm_context;
    size_t response_size;
    uint8_t response[LIBSPDM_MAX_SPDM_MSG_SIZE];
    spdm_certificate_response_t *spdm_response;
    void *data;
    size_t data_size;

    /* Testing Lengths at the boundary of maximum integer values*/
    uint16_t test_lenghts[] = {
        0,
        0x7F,
        (uint16_t)(0x7F + 1),
        0xFF,
        0x7FFF,
        (uint16_t)(0x7FFF + 1),
        0xFFFF,
    };
    uint16_t expected_chunk_size;"|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\encap_certificate.c|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\encap_certificate.c|6c95abdbb7b24ddd93d124382ce138e6
"/* Setting up the spdm_context and loading a sample certificate chain*/
    spdm_test_context = *state;
    spdm_context = spdm_test_context->spdm_context;
    spdm_test_context->case_id = 0x3;
    spdm_context->connection_info.version = SPDM_MESSAGE_VERSION_11
                                            << SPDM_VERSION_NUMBER_SHIFT_BIT;
    spdm_context->local_context.capability.flags |=
        SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_CERT_CAP;
    spdm_context->connection_info.algorithm.base_hash_algo = m_libspdm_use_hash_algo;
    libspdm_read_responder_public_certificate_chain(m_libspdm_use_hash_algo,
                                                    m_libspdm_use_asym_algo,
                                                    &data, &data_size, NULL, NULL);
    spdm_context->local_context.local_cert_chain_provision[0] = data;
    spdm_context->local_context.local_cert_chain_provision_size[0] = data_size;

    /* This tests considers only offset = 0, other tests vary offset value*/
    m_spdm_get_certificate_request3.offset = 0;

    for (int i = 0; i < sizeof(test_lenghts) / sizeof(test_lenghts[0]); i++)
    {
        TEST_DEBUG_PRINT(""i:%d test_lenghts[i]:%u\n"", i, test_lenghts[i]);
        m_spdm_get_certificate_request3.length = test_lenghts[i];
        /* Expected received length is limited by LIBSPDM_MAX_CERT_CHAIN_BLOCK_LEN
         * (implementation specific?)*/
        expected_chunk_size = LIBSPDM_MIN(m_spdm_get_certificate_request3.length,
                                          LIBSPDM_MAX_CERT_CHAIN_BLOCK_LEN);

        /* reseting an internal buffer to avoid overflow and prevent tests to
         * succeed*/
        libspdm_reset_message_b(spdm_context);
        response_size = sizeof(response);
        m_spdm_get_certificate_request3_size =
            sizeof(m_spdm_get_certificate_request3);
        status = libspdm_get_encap_response_certificate(
            spdm_context, m_spdm_get_certificate_request3_size,
            &m_spdm_get_certificate_request3, &response_size, response);
        assert_int_equal(status, LIBSPDM_STATUS_SUCCESS);
        assert_int_equal(response_size,
                         sizeof(spdm_certificate_response_t) + expected_chunk_size);
        spdm_response = (void *)response;
        assert_int_equal(spdm_response->header.request_response_code,
                         SPDM_CERTIFICATE);
        assert_int_equal(spdm_response->header.param1, 0);
        assert_int_equal(spdm_response->portion_length, expected_chunk_size);
        assert_int_equal(spdm_response->remainder_length,
                         data_size - expected_chunk_size);
    }
    free(data);
}

/**
 * Test 4: request offset at the boundary of maximum integer values, while
 * keeping length 0 Expected Behavior: generate correctly formed Certficate
 * messages, including its portion_length and remainder_length fields
 **/
void libspdm_test_requester_encap_certificate_case4(void **state)
{
    libspdm_return_t status;
    libspdm_test_context_t *spdm_test_context;
    libspdm_context_t *spdm_context;
    size_t response_size;
    uint8_t response[LIBSPDM_MAX_SPDM_MSG_SIZE];
    spdm_certificate_response_t *spdm_response;
    spdm_error_response_t *spdm_responseError;
    void *data;
    size_t data_size;

    /* Testing offsets at the boundary of maximum integer values and at the
     * boundary of certificate length (first three positions)*/
    uint16_t test_offsets[] = {(uint16_t)(-1),
                               0,
                               +1,
                               0,
                               0x7F,
                               (uint16_t)(0x7F + 1),
                               0xFF,
                               0x7FFF,
                               (uint16_t)(0x7FFF + 1),
                               0xFFFF,
                               (uint16_t)(-1)};

    /* Setting up the spdm_context and loading a sample certificate chain*/
    spdm_test_context = *state;
    spdm_context = spdm_test_context->spdm_context;
    spdm_test_context->case_id = 0x4;
    spdm_context->connection_info.version = SPDM_MESSAGE_VERSION_11
                                            << SPDM_VERSION_NUMBER_SHIFT_BIT;
    spdm_context->local_context.capability.flags |=
        SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_CERT_CAP;
    spdm_context->connection_info.algorithm.base_hash_algo = m_libspdm_use_hash_algo;
    libspdm_read_responder_public_certificate_chain(m_libspdm_use_hash_algo,
                                                    m_libspdm_use_asym_algo,
                                                    &data, &data_size, NULL, NULL);
    spdm_context->local_context.local_cert_chain_provision[0] = data;
    spdm_context->local_context.local_cert_chain_provision_size[0] = data_size;"|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\encap_certificate.c|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\encap_certificate.c|2593cd3fe0654ea59300ea47bdcb0160
"/* This tests considers only length = 0, other tests vary length value*/
    m_spdm_get_certificate_request3.length = 0;
    /* Setting up offset values at the boundary of certificate length*/
    test_offsets[0] = (uint16_t)(test_offsets[0] + data_size);
    test_offsets[1] = (uint16_t)(test_offsets[1] + data_size);
    test_offsets[2] = (uint16_t)(test_offsets[2] + data_size);

    for (int i = 0; i < sizeof(test_offsets) / sizeof(test_offsets[0]); i++)
    {
        TEST_DEBUG_PRINT(""i:%d test_offsets[i]:%u\n"", i, test_offsets[i]);
        m_spdm_get_certificate_request3.offset = test_offsets[i];

        /* reseting an internal buffer to avoid overflow and prevent tests to
         * succeed*/
        libspdm_reset_message_b(spdm_context);
        response_size = sizeof(response);
        status = libspdm_get_encap_response_certificate(
            spdm_context, m_spdm_get_certificate_request3_size,
            &m_spdm_get_certificate_request3, &response_size, response);
        assert_int_equal(status, LIBSPDM_STATUS_SUCCESS);

        if (m_spdm_get_certificate_request3.offset >= data_size) {
            /* A too long of an offset should return an error*/
            spdm_responseError = (void *)response;
            assert_int_equal(spdm_responseError->header.request_response_code,
                             SPDM_ERROR);
            assert_int_equal(spdm_responseError->header.param1,
                             SPDM_ERROR_CODE_INVALID_REQUEST);
        } else {
            /* Otherwise it should work properly, considering length = 0*/
            assert_int_equal(response_size, sizeof(spdm_certificate_response_t));
            spdm_response = (void *)response;
            assert_int_equal(spdm_response->header.request_response_code,
                             SPDM_CERTIFICATE);
            assert_int_equal(spdm_response->header.param1, 0);
            assert_int_equal(spdm_response->portion_length, 0);
            assert_int_equal(
                spdm_response->remainder_length,
                (uint16_t)(data_size - m_spdm_get_certificate_request3.offset));
        }
    }
    free(data);
}

/**
 * Test 5: request LIBSPDM_MAX_CERT_CHAIN_BLOCK_LEN bytes of long certificate
 * chains, with the largest valid offset Expected Behavior: generate correctly
 * formed Certficate messages, including its portion_length and remainder_length
 * fields
 **/
void libspdm_test_requester_encap_certificate_case5(void **state)
{
    libspdm_return_t status;
    libspdm_test_context_t *spdm_test_context;
    libspdm_context_t *spdm_context;
    size_t response_size;
    uint8_t response[LIBSPDM_MAX_SPDM_MSG_SIZE];
    spdm_certificate_response_t *spdm_response;
    spdm_error_response_t *spdm_responseError;
    void *data;
    size_t data_size;

    uint16_t test_cases[] = {LIBSPDM_TEST_CERT_MAXINT16, LIBSPDM_TEST_CERT_MAXUINT16};

    size_t expected_chunk_size;
    size_t expected_remainder;

    /* Setting up the spdm_context and loading a sample certificate chain*/
    spdm_test_context = *state;
    spdm_context = spdm_test_context->spdm_context;
    spdm_test_context->case_id = 0x5;
    spdm_context->connection_info.version = SPDM_MESSAGE_VERSION_11
                                            << SPDM_VERSION_NUMBER_SHIFT_BIT;
    spdm_context->local_context.capability.flags |=
        SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_CERT_CAP;
    spdm_context->connection_info.algorithm.base_hash_algo = m_libspdm_use_hash_algo;

    m_spdm_get_certificate_request3.length = LIBSPDM_MAX_CERT_CHAIN_BLOCK_LEN;

    for (int i = 0; i < sizeof(test_cases) / sizeof(test_cases[0]); i++)
    {
        libspdm_read_responder_public_certificate_chain_by_size(
            /*MAXUINT16_CERT signature_algo is SHA256RSA */
            m_libspdm_use_hash_algo, SPDM_ALGORITHMS_BASE_ASYM_ALGO_TPM_ALG_RSASSA_2048,
            test_cases[i], &data, &data_size, NULL, NULL);

        spdm_context->local_context.local_cert_chain_provision[0] = data;
        spdm_context->local_context.local_cert_chain_provision_size[0] = data_size;

        m_spdm_get_certificate_request3.offset =
            (uint16_t)(LIBSPDM_MIN(data_size - 1, 0xFFFF));
        TEST_DEBUG_PRINT(""data_size: %u\n"", data_size);
        TEST_DEBUG_PRINT(""m_spdm_get_certificate_request3.offset: %u\n"",
                         m_spdm_get_certificate_request3.offset);
        TEST_DEBUG_PRINT(""m_spdm_get_certificate_request3.length: %u\n"",
                         m_spdm_get_certificate_request3.length);
        TEST_DEBUG_PRINT(""offset + length: %u\n"",
                         m_spdm_get_certificate_request3.offset +
                         m_spdm_get_certificate_request3.length);"|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\encap_certificate.c|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\encap_certificate.c|8f6d68af03914fd6bc358d729df1dfed
"/* reseting an internal buffer to avoid overflow and prevent tests to
         * succeed*/
        libspdm_reset_message_b(spdm_context);
        response_size = sizeof(response);
        status = libspdm_get_encap_response_certificate(
            spdm_context, m_spdm_get_certificate_request3_size,
            &m_spdm_get_certificate_request3, &response_size, response);
        assert_int_equal(status, LIBSPDM_STATUS_SUCCESS);

        /* Expected received length is limited by LIBSPDM_MAX_CERT_CHAIN_BLOCK_LEN
         * and by the remaining length*/
        expected_chunk_size =
            (uint16_t)(LIBSPDM_MIN(m_spdm_get_certificate_request3.length,
                                   data_size - m_spdm_get_certificate_request3.offset));
        expected_chunk_size =
            LIBSPDM_MIN(expected_chunk_size, LIBSPDM_MAX_CERT_CHAIN_BLOCK_LEN);
        /* Expected certificate length left*/
        expected_remainder =
            (uint16_t)(data_size - m_spdm_get_certificate_request3.offset -
                       expected_chunk_size);

        TEST_DEBUG_PRINT(""expected_chunk_size %u\n"", expected_chunk_size);
        TEST_DEBUG_PRINT(""expected_remainder %u\n"", expected_remainder);

        if (expected_remainder > 0xFFFF || expected_chunk_size > 0xFFFF) {
            spdm_responseError = (void *)response;
            assert_int_equal(spdm_responseError->header.request_response_code,
                             SPDM_ERROR);
            assert_int_equal(spdm_responseError->header.param1,
                             SPDM_ERROR_CODE_INVALID_REQUEST);
        } else {
            assert_int_equal(response_size, sizeof(spdm_certificate_response_t) +
                             expected_chunk_size);
            spdm_response = (void *)response;
            assert_int_equal(spdm_response->header.request_response_code,
                             SPDM_CERTIFICATE);
            assert_int_equal(spdm_response->header.param1, 0);
            assert_int_equal(spdm_response->portion_length, expected_chunk_size);
            assert_int_equal(spdm_response->remainder_length, expected_remainder);
        }

        TEST_DEBUG_PRINT(""\n"");

        spdm_context->local_context.local_cert_chain_provision[0] = NULL;
        spdm_context->local_context.local_cert_chain_provision_size[0] = 0;
        free(data);
    }
}

/**
 * Test 6: request a whole certificate chain byte by byte
 * Expected Behavior: generate correctly formed Certficate messages, including
 * its portion_length and remainder_length fields
 **/
void libspdm_test_requester_encap_certificate_case6(void **state)
{
    libspdm_return_t status;
    libspdm_test_context_t *spdm_test_context;
    libspdm_context_t *spdm_context;
    size_t response_size;
    uint8_t response[LIBSPDM_MAX_SPDM_MSG_SIZE];
    spdm_certificate_response_t *spdm_response;
    void *data;
    size_t data_size;
    uint16_t expected_chunk_size;
#if LIBSPDM_RECORD_TRANSCRIPT_DATA_SUPPORT
    size_t count;
#endif
    /* Setting up the spdm_context and loading a sample certificate chain*/
    spdm_test_context = *state;
    spdm_context = spdm_test_context->spdm_context;
    spdm_test_context->case_id = 0x6;
    spdm_context->connection_info.version = SPDM_MESSAGE_VERSION_11
                                            << SPDM_VERSION_NUMBER_SHIFT_BIT;
    spdm_context->local_context.capability.flags |=
        SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_CERT_CAP;
    spdm_context->connection_info.algorithm.base_hash_algo = m_libspdm_use_hash_algo;
    libspdm_read_responder_public_certificate_chain(m_libspdm_use_hash_algo,
                                                    m_libspdm_use_asym_algo,
                                                    &data, &data_size, NULL, NULL);
    spdm_context->local_context.local_cert_chain_provision[0] = data;
    spdm_context->local_context.local_cert_chain_provision_size[0] = data_size;

    /* This tests considers only length = 1*/
    m_spdm_get_certificate_request3.length = 1;
    expected_chunk_size = 1;

    /* reseting an internal buffer to avoid overflow and prevent tests to
     * succeed*/
    libspdm_reset_message_b(spdm_context);

    spdm_response = NULL;
    for (size_t offset = 0; offset < data_size; offset++)
    {
        TEST_DEBUG_PRINT(""offset:%u \n"", offset);
        m_spdm_get_certificate_request3.offset = (uint16_t)offset;"|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\encap_certificate.c|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\encap_certificate.c|01e5daf565f841b985e53a0569626c4a
"response_size = sizeof(response);
        status = libspdm_get_encap_response_certificate(
            spdm_context, m_spdm_get_certificate_request3_size,
            &m_spdm_get_certificate_request3, &response_size, response);
        assert_int_equal(status, LIBSPDM_STATUS_SUCCESS);
        spdm_response = (void *)response;
        /* It may fail because the spdm does not support too many messages.
         * assert_int_equal (spdm_response->header.request_response_code,
         * SPDM_CERTIFICATE);*/
        if (spdm_response->header.request_response_code == SPDM_CERTIFICATE) {
            assert_int_equal(spdm_response->header.request_response_code,
                             SPDM_CERTIFICATE);
            assert_int_equal(response_size, sizeof(spdm_certificate_response_t) +
                             expected_chunk_size);
            assert_int_equal(spdm_response->header.param1, 0);
            assert_int_equal(spdm_response->portion_length, expected_chunk_size);
            assert_int_equal(spdm_response->remainder_length,
                             data_size - offset - expected_chunk_size);
            assert_int_equal(((uint8_t *)data)[offset],
                             (response + sizeof(spdm_certificate_response_t))[0]);
        } else {
            assert_int_equal(spdm_response->header.request_response_code, SPDM_ERROR);
            break;
        }
    }
    if (spdm_response != NULL) {
        if (spdm_response->header.request_response_code == SPDM_CERTIFICATE) {
#if LIBSPDM_RECORD_TRANSCRIPT_DATA_SUPPORT
            count = (data_size + m_spdm_get_certificate_request3.length - 1) /
                    m_spdm_get_certificate_request3.length;
            assert_int_equal(spdm_context->transcript.message_b.buffer_size,
                             sizeof(spdm_get_certificate_request_t) * count +
                             sizeof(spdm_certificate_response_t) * count +
                             data_size);
#endif
        }
    }
    free(data);
}

/**
 * Test 7: check request attributes and response attributes , SlotSizeRequested=1b the Offset and Length fields in the
 * GET_CERTIFICATE request shall be ignored by the Responde
 * Expected Behavior: generate a correctly formed Certficate message, including its portion_length and remainder_length fields
 **/
void libspdm_test_requester_encap_certificate_case7(void **state)
{
    libspdm_return_t status;
    libspdm_test_context_t *spdm_test_context;
    libspdm_context_t *spdm_context;
    size_t response_size;
    uint8_t response[LIBSPDM_MAX_SPDM_MSG_SIZE];
    spdm_certificate_response_t *spdm_response;
    void *data;
    size_t data_size;

    spdm_test_context = *state;
    spdm_context = spdm_test_context->spdm_context;
    spdm_test_context->case_id = 0x7;
    spdm_context->connection_info.version = SPDM_MESSAGE_VERSION_13
                                            << SPDM_VERSION_NUMBER_SHIFT_BIT;
    spdm_context->connection_info.connection_state =
        LIBSPDM_CONNECTION_STATE_AFTER_DIGESTS;
    spdm_context->local_context.capability.flags = 0;
    spdm_context->local_context.capability.flags |=
        SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_CERT_CAP;
    spdm_context->connection_info.algorithm.base_hash_algo = m_libspdm_use_hash_algo;
    libspdm_read_responder_public_certificate_chain(m_libspdm_use_hash_algo,
                                                    m_libspdm_use_asym_algo,
                                                    &data, &data_size, NULL, NULL);
    spdm_context->local_context.local_cert_chain_provision[0] = data;
    spdm_context->local_context.local_cert_chain_provision_size[0] = data_size;

#if LIBSPDM_RECORD_TRANSCRIPT_DATA_SUPPORT
    spdm_context->transcript.message_mut_b.buffer_size = 0;
#endif

    /* When SlotSizeRequested=1b , the Offset and Length fields in the GET_CERTIFICATE request shall be ignored by the Responder */
    m_spdm_get_certificate_request4.header.param2 =
        SPDM_GET_CERTIFICATE_REQUEST_ATTRIBUTES_SLOT_SIZE_REQUESTED;
    m_spdm_get_certificate_request4.length = LIBSPDM_MAX_CERT_CHAIN_BLOCK_LEN;
    m_spdm_get_certificate_request4.offset = 0xFF;

    response_size = sizeof(response);
    status = libspdm_get_encap_response_certificate(
        spdm_context, m_spdm_get_certificate_request4_size,
        &m_spdm_get_certificate_request4, &response_size, response);

    assert_int_equal(status, LIBSPDM_STATUS_SUCCESS);
    assert_int_equal(response_size, sizeof(spdm_certificate_response_t));
    spdm_response = (void *)response;
    assert_int_equal(spdm_response->header.request_response_code,
                     SPDM_CERTIFICATE);
    assert_int_equal(spdm_response->header.param1, 0);
    assert_int_equal(spdm_response->portion_length,0);
    assert_int_equal(spdm_response->remainder_length, data_size);

    free(data);
}

libspdm_test_context_t m_libspdm_requester_encap_certificate_test_context = {
    LIBSPDM_TEST_CONTEXT_VERSION,
    false,
};"|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\encap_certificate.c|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\encap_certificate.c|2e5352a0a8fa40c092b4033bd399f46b
"int libspdm_requester_encap_certificate_test_main(void)
{
    const struct CMUnitTest spdm_requester_encap_certificate_tests[] = {
        /* Success Case*/
        cmocka_unit_test(libspdm_test_requester_encap_certificate_case1),
        /* Can be populated with new test.*/
        cmocka_unit_test(libspdm_test_requester_encap_certificate_case2),
        /* Tests varying offset*/
        cmocka_unit_test(libspdm_test_requester_encap_certificate_case4),
        /* Tests large certificate chains*/
        cmocka_unit_test(libspdm_test_requester_encap_certificate_case5),
        /* Requests byte by byte*/
        cmocka_unit_test(libspdm_test_requester_encap_certificate_case6),
        /* check request attributes and response attributes*/
        cmocka_unit_test(libspdm_test_requester_encap_certificate_case7),
    };

    libspdm_setup_test_context(&m_libspdm_requester_encap_certificate_test_context);

    return cmocka_run_group_tests(spdm_requester_encap_certificate_tests,
                                  libspdm_unit_test_group_setup,
                                  libspdm_unit_test_group_teardown);
}

#endif /* (LIBSPDM_ENABLE_CAPABILITY_MUT_AUTH_CAP) && (..) */"|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\encap_certificate.c|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\encap_certificate.c|2a29eec612f1418cbc66ee906a0f8c56
"/**
 *  Copyright Notice:
 *  Copyright 2021-2022 DMTF. All rights reserved.
 *  License: BSD 3-Clause License. For full text see link: https://github.com/DMTF/libspdm/blob/main/LICENSE.md
 **/

#include ""spdm_requester.h""

void libspdm_dump_hex_str(const uint8_t *buffer, size_t buffer_size)
{
}

bool libspdm_read_input_file(const char *file_name, void **file_data,
                             size_t *file_size)
{
    return true;
}

bool libspdm_write_output_file(const char *file_name, const void *file_data,
                               size_t file_size)
{
    return true;
}"|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_size\test_size_of_spdm_requester\support.c|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_size\test_size_of_spdm_requester\support.c|f2d6205b9b504309afdea9a313c64394
"/**
 *  Copyright Notice:
 *  Copyright 2021-2022 DMTF. All rights reserved.
 *  License: BSD 3-Clause License. For full text see link: https://github.com/DMTF/libspdm/blob/main/LICENSE.md
 **/

#include ""spdm_responder.h""


/* Disable optimization to avoid code removal with VS2019.*/

#if defined(_MSC_EXTENSIONS)
#pragma optimize("""", off)
#elif defined (__clang__)
#pragma clang optimize off
#endif

void spdm_dispatch(void)
{
    void *spdm_context;
    libspdm_return_t status;

    spdm_context = spdm_server_init();
    if (spdm_context == NULL) {
        return;
    }

    while (true) {
        status = libspdm_responder_dispatch_message(spdm_context);
        if (status != LIBSPDM_STATUS_UNSUPPORTED_CAP) {
            continue;
        }
    }
    return;
}

/**
 * Main entry point to DXE Core.
 *
 * @param  HobStart               Pointer to the beginning of the HOB List from PEI.
 *
 * @return This function should never return.
 *
 **/
void ModuleEntryPoint(void)
{
    spdm_dispatch();

    return;
}"|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_size\test_size_of_spdm_responder\spdm_responder_main.c|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_size\test_size_of_spdm_responder\spdm_responder_main.c|d0587bf279b94b1698a9fbc0c34c53b0
"/**
 *  Copyright Notice:
 *  Copyright 2021-2022 DMTF. All rights reserved.
 *  License: BSD 3-Clause License. For full text see link: https://github.com/DMTF/libspdm/blob/main/LICENSE.md
 **/
#include ""spdm_unit_test.h""
#include ""internal/libspdm_requester_lib.h""
#include ""internal/libspdm_secured_message_lib.h""

#if LIBSPDM_ENABLE_CAPABILITY_ENCAP_CAP

spdm_key_update_request_t m_spdm_key_update_request1 = {
    {SPDM_MESSAGE_VERSION_11, SPDM_KEY_UPDATE,
     SPDM_KEY_UPDATE_OPERATIONS_TABLE_UPDATE_KEY, 0x3}
};
size_t m_spdm_key_update_request1_size = sizeof(m_spdm_key_update_request1);

spdm_key_update_request_t m_spdm_key_update_request2 = {
    {SPDM_MESSAGE_VERSION_11, SPDM_KEY_UPDATE,
     SPDM_KEY_UPDATE_OPERATIONS_TABLE_UPDATE_KEY, 0x3}
};
size_t m_spdm_key_update_request2_size = LIBSPDM_MAX_SPDM_MSG_SIZE;

spdm_key_update_request_t m_spdm_key_update_request3 = {
    {SPDM_MESSAGE_VERSION_11, SPDM_KEY_UPDATE,
     SPDM_KEY_UPDATE_OPERATIONS_TABLE_UPDATE_ALL_KEYS, 0x71}
};
size_t m_spdm_key_update_request3_size = sizeof(m_spdm_key_update_request3);

spdm_key_update_request_t m_spdm_key_update_request4 = {
    {SPDM_MESSAGE_VERSION_11, SPDM_KEY_UPDATE,
     SPDM_KEY_UPDATE_OPERATIONS_TABLE_UPDATE_ALL_KEYS, 0x71}
};
size_t m_spdm_key_update_request4_size = LIBSPDM_MAX_SPDM_MSG_SIZE;

spdm_key_update_request_t m_spdm_key_update_request5 = {
    {SPDM_MESSAGE_VERSION_11, SPDM_KEY_UPDATE,
     SPDM_KEY_UPDATE_OPERATIONS_TABLE_VERIFY_NEW_KEY, 0x4A}
};
size_t m_spdm_key_update_request5_size = sizeof(m_spdm_key_update_request5);

spdm_key_update_request_t m_spdm_key_update_request6 = {
    {SPDM_MESSAGE_VERSION_11, SPDM_KEY_UPDATE,
     SPDM_KEY_UPDATE_OPERATIONS_TABLE_VERIFY_NEW_KEY, 0x4A}
};
size_t m_spdm_key_update_request6_size = LIBSPDM_MAX_SPDM_MSG_SIZE;

spdm_key_update_request_t m_spdm_key_update_request7 = {
    {SPDM_MESSAGE_VERSION_11, SPDM_KEY_UPDATE,
     SPDM_KEY_UPDATE_OPERATIONS_TABLE_UPDATE_KEY, 0x92}
};
size_t m_spdm_key_update_request7_size = sizeof(m_spdm_key_update_request7);

spdm_key_update_request_t m_spdm_key_update_request8 = {
    {SPDM_MESSAGE_VERSION_11, SPDM_KEY_UPDATE,
     SPDM_KEY_UPDATE_OPERATIONS_TABLE_UPDATE_ALL_KEYS, 0x13}
};
size_t m_spdm_key_update_request8_size = sizeof(m_spdm_key_update_request8);

spdm_key_update_request_t m_spdm_key_update_request9 = {
    {SPDM_MESSAGE_VERSION_11, SPDM_KEY_UPDATE,
     SPDM_KEY_UPDATE_OPERATIONS_TABLE_VERIFY_NEW_KEY, 0x22}
};
size_t m_spdm_key_update_request9_size = sizeof(m_spdm_key_update_request9);

spdm_key_update_request_t m_spdm_key_update_request10 = {
    {SPDM_MESSAGE_VERSION_11, SPDM_KEY_UPDATE, 0xFF, 0x12}
};
size_t m_spdm_key_update_request10_size = sizeof(m_spdm_key_update_request10);

static void spdm_set_standard_key_update_test_state(
    libspdm_context_t *spdm_context,  uint32_t *session_id)
{
    libspdm_session_info_t *session_info;

    spdm_context->response_state = LIBSPDM_RESPONSE_STATE_NORMAL;
    spdm_context->connection_info.connection_state =
        LIBSPDM_CONNECTION_STATE_NEGOTIATED;
    spdm_context->connection_info.capability.flags |=
        SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_KEY_UPD_CAP;
    spdm_context->connection_info.capability.flags |=
        SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_ENCRYPT_CAP;
    spdm_context->connection_info.capability.flags |=
        SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_MAC_CAP;
    spdm_context->local_context.capability.flags |=
        SPDM_GET_CAPABILITIES_REQUEST_FLAGS_KEY_UPD_CAP;
    spdm_context->local_context.capability.flags |=
        SPDM_GET_CAPABILITIES_REQUEST_FLAGS_ENCRYPT_CAP;
    spdm_context->local_context.capability.flags |=
        SPDM_GET_CAPABILITIES_REQUEST_FLAGS_MAC_CAP;

    spdm_context->transcript.message_a.buffer_size = 0;
    spdm_context->connection_info.algorithm.base_hash_algo =
        m_libspdm_use_hash_algo;
    spdm_context->connection_info.algorithm.base_asym_algo =
        m_libspdm_use_asym_algo;
    spdm_context->connection_info.algorithm.dhe_named_group =
        m_libspdm_use_dhe_algo;
    spdm_context->connection_info.algorithm.aead_cipher_suite =
        m_libspdm_use_aead_algo;

    *session_id = 0xFFFFFFFF;
    spdm_context->latest_session_id = *session_id;
    spdm_context->last_spdm_request_session_id_valid = true;
    spdm_context->last_spdm_request_session_id = *session_id;
    session_info = &spdm_context->session_info[0];
    libspdm_session_info_init(spdm_context, session_info, *session_id, true);
    libspdm_secured_message_set_session_state(
        session_info->secured_message_context,
        LIBSPDM_SESSION_STATE_ESTABLISHED);
}"|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\encap_key_update.c|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\encap_key_update.c|60531304d74b47b6b15024f3842bf76a
"static void libspdm_set_standard_key_update_test_secrets(
    libspdm_secured_message_context_t *secured_message_context,
    uint8_t *m_rsp_secret_buffer,  uint8_t rsp_secret_fill,
    uint8_t *m_req_secret_buffer,  uint8_t req_secret_fill)
{
    libspdm_set_mem(m_rsp_secret_buffer, secured_message_context->hash_size, rsp_secret_fill);
    libspdm_set_mem(m_req_secret_buffer, secured_message_context->hash_size, req_secret_fill);

    libspdm_copy_mem(secured_message_context->application_secret.response_data_secret,
                     sizeof(secured_message_context->application_secret.response_data_secret),
                     m_rsp_secret_buffer, secured_message_context->aead_key_size);
    libspdm_copy_mem(secured_message_context->application_secret.request_data_secret,
                     sizeof(secured_message_context->application_secret.request_data_secret),
                     m_req_secret_buffer, secured_message_context->aead_key_size);

    libspdm_set_mem(secured_message_context->application_secret
                    .response_data_encryption_key,
                    secured_message_context->aead_key_size, rsp_secret_fill);
    libspdm_set_mem(secured_message_context->application_secret
                    .response_data_salt,
                    secured_message_context->aead_iv_size, rsp_secret_fill);

    libspdm_set_mem(secured_message_context->application_secret
                    .request_data_encryption_key,
                    secured_message_context->aead_key_size, req_secret_fill);
    libspdm_set_mem(secured_message_context->application_secret
                    .request_data_salt,
                    secured_message_context->aead_iv_size, req_secret_fill);

    secured_message_context->application_secret.response_data_sequence_number = 0;
    secured_message_context->application_secret.request_data_sequence_number = 0;
}

static void libspdm_compute_secret_update(spdm_version_number_t spdm_version,
                                          size_t hash_size,
                                          const uint8_t *in_secret,  uint8_t *out_secret,
                                          size_t out_secret_size)
{
    uint8_t bin_str9[128];
    size_t bin_str9_size;

    bin_str9_size = sizeof(bin_str9);
    libspdm_bin_concat(spdm_version,
                       SPDM_BIN_STR_9_LABEL, sizeof(SPDM_BIN_STR_9_LABEL) - 1,
                       NULL, (uint16_t)hash_size, hash_size, bin_str9,
                       &bin_str9_size);

    libspdm_hkdf_expand(m_libspdm_use_hash_algo, in_secret, hash_size, bin_str9,
                        bin_str9_size, out_secret, out_secret_size);
}

/**
 * Test 1: receiving a correct KEY_UPDATE message from the requester with
 * the UpdateKey operation.
 * Expected behavior: the encap requester accepts the request, produces a valid
 * KEY_UPDATE_ACK response message, and the request data key is updated.
 **/
void test_libspdm_requester_encap_key_update_case1(void **state)
{
    libspdm_return_t status;
    libspdm_test_context_t *spdm_test_context;
    libspdm_context_t *spdm_context;
    uint32_t session_id;
    libspdm_session_info_t *session_info;
    libspdm_secured_message_context_t *secured_message_context;

    size_t response_size;
    uint8_t response[LIBSPDM_MAX_SPDM_MSG_SIZE];
    spdm_key_update_response_t *spdm_response;

    uint8_t m_req_secret_buffer[LIBSPDM_MAX_HASH_SIZE];
    uint8_t m_rsp_secret_buffer[LIBSPDM_MAX_HASH_SIZE];

    spdm_test_context = *state;
    spdm_context = spdm_test_context->spdm_context;
    spdm_test_context->case_id = 0x01;
    spdm_context->connection_info.version = SPDM_MESSAGE_VERSION_11 <<
                                            SPDM_VERSION_NUMBER_SHIFT_BIT;

    spdm_set_standard_key_update_test_state(
        spdm_context, &session_id);

    session_info = &spdm_context->session_info[0];
    secured_message_context = session_info->secured_message_context;

    libspdm_set_standard_key_update_test_secrets(
        session_info->secured_message_context,
        m_rsp_secret_buffer, (uint8_t)(0xFF),
        m_req_secret_buffer, (uint8_t)(0xEE));

    /*request side *not* updated*/

    /*response side updated */
    libspdm_compute_secret_update(spdm_context->connection_info.version,
                                  secured_message_context->hash_size,
                                  m_rsp_secret_buffer, m_rsp_secret_buffer,
                                  secured_message_context->hash_size);

    response_size = sizeof(response);
    status = libspdm_get_encap_response_key_update(spdm_context,
                                                   m_spdm_key_update_request1_size,
                                                   &m_spdm_key_update_request1,
                                                   &response_size, response);"|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\encap_key_update.c|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\encap_key_update.c|380250e484b64bb28622d0823f505a6b
"assert_int_equal(status, LIBSPDM_STATUS_SUCCESS);
    assert_int_equal(response_size, sizeof(spdm_key_update_response_t));
    spdm_response = (void *)response;
    assert_int_equal(spdm_response->header.request_response_code,
                     SPDM_KEY_UPDATE_ACK);
    assert_int_equal(spdm_response->header.param1,
                     SPDM_KEY_UPDATE_OPERATIONS_TABLE_UPDATE_KEY);
    assert_int_equal(spdm_response->header.param2,
                     m_spdm_key_update_request1.header.param2);
    assert_memory_equal(secured_message_context
                        ->application_secret.request_data_secret,
                        m_req_secret_buffer, secured_message_context->hash_size);
    assert_memory_equal(secured_message_context
                        ->application_secret.response_data_secret,
                        m_rsp_secret_buffer, secured_message_context->hash_size);
}

/**
 * Test 2: receiving a KEY_UPDATE message larger than specified, with the
 * UpdateKey operation.
 * Expected behavior: the encap requester refuses the KEY_UPDATE message and
 * produces an ERROR message indicating the InvalidRequest. No keys
 * are updated.
 **/
void test_libspdm_requester_encap_key_update_case2(void **state)
{
    libspdm_return_t status;
    libspdm_test_context_t *spdm_test_context;
    libspdm_context_t *spdm_context;
    uint32_t session_id;
    libspdm_session_info_t *session_info;
    libspdm_secured_message_context_t *secured_message_context;

    size_t response_size;
    uint8_t response[LIBSPDM_MAX_SPDM_MSG_SIZE];
    spdm_key_update_response_t *spdm_response;

    uint8_t m_req_secret_buffer[LIBSPDM_MAX_HASH_SIZE];
    uint8_t m_rsp_secret_buffer[LIBSPDM_MAX_HASH_SIZE];

    spdm_test_context = *state;
    spdm_context = spdm_test_context->spdm_context;
    spdm_test_context->case_id = 0x02;
    spdm_context->connection_info.version = SPDM_MESSAGE_VERSION_11 <<
                                            SPDM_VERSION_NUMBER_SHIFT_BIT;

    spdm_set_standard_key_update_test_state(
        spdm_context, &session_id);

    session_info = &spdm_context->session_info[0];
    secured_message_context = session_info->secured_message_context;

    libspdm_set_standard_key_update_test_secrets(
        session_info->secured_message_context,
        m_rsp_secret_buffer, (uint8_t)(0xFF),
        m_req_secret_buffer, (uint8_t)(0xEE));

    /*no keys are updated*/

    response_size = sizeof(response);
    status = libspdm_get_encap_response_key_update(spdm_context,
                                                   m_spdm_key_update_request2_size,
                                                   &m_spdm_key_update_request2,
                                                   &response_size, response);

    assert_int_equal(status, LIBSPDM_STATUS_SUCCESS);
    assert_int_equal(response_size, sizeof(spdm_error_response_t));
    spdm_response = (void *)response;
    assert_int_equal(spdm_response->header.request_response_code,
                     SPDM_ERROR);
    assert_int_equal(spdm_response->header.param1,
                     SPDM_ERROR_CODE_INVALID_REQUEST);
    assert_int_equal(spdm_response->header.param2, 0);
    assert_memory_equal(secured_message_context
                        ->application_secret.request_data_secret,
                        m_req_secret_buffer, secured_message_context->hash_size);
    assert_memory_equal(secured_message_context
                        ->application_secret.response_data_secret,
                        m_rsp_secret_buffer, secured_message_context->hash_size);
}

void test_libspdm_requester_encap_key_update_case3(void **state)
{
    libspdm_return_t status;
    libspdm_test_context_t *spdm_test_context;
    libspdm_context_t *spdm_context;
    uint32_t session_id;
    libspdm_session_info_t *session_info;
    libspdm_secured_message_context_t *secured_message_context;

    size_t response_size;
    uint8_t response[LIBSPDM_MAX_SPDM_MSG_SIZE];
    spdm_key_update_response_t *spdm_response;

    uint8_t m_req_secret_buffer[LIBSPDM_MAX_HASH_SIZE];
    uint8_t m_rsp_secret_buffer[LIBSPDM_MAX_HASH_SIZE];

    spdm_test_context = *state;
    spdm_context = spdm_test_context->spdm_context;
    spdm_test_context->case_id = 0x03;
    spdm_context->connection_info.version = SPDM_MESSAGE_VERSION_11 <<
                                            SPDM_VERSION_NUMBER_SHIFT_BIT;

    spdm_set_standard_key_update_test_state(
        spdm_context, &session_id);"|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\encap_key_update.c|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\encap_key_update.c|55868d5ccf704678b5477a74c0a1835f
"spdm_set_standard_key_update_test_state(
        spdm_context, &session_id);

#if LIBSPDM_RECORD_TRANSCRIPT_DATA_SUPPORT
    /*""filling"" buffers*/
    spdm_context->transcript.message_m.buffer_size =
        spdm_context->transcript.message_m.max_buffer_size;
    spdm_context->transcript.message_b.buffer_size =
        spdm_context->transcript.message_b.max_buffer_size;
    spdm_context->transcript.message_c.buffer_size =
        spdm_context->transcript.message_c.max_buffer_size;
    spdm_context->transcript.message_mut_b.buffer_size =
        spdm_context->transcript.message_mut_b.max_buffer_size;
    spdm_context->transcript.message_mut_c.buffer_size =
        spdm_context->transcript.message_mut_c.max_buffer_size;
#endif

    session_info = &spdm_context->session_info[0];
    secured_message_context = session_info->secured_message_context;

    libspdm_set_standard_key_update_test_secrets(
        session_info->secured_message_context,
        m_rsp_secret_buffer, (uint8_t)(0xFF),
        m_req_secret_buffer, (uint8_t)(0xEE));

    /*request side *not* updated*/

    /*response side updated */
    libspdm_compute_secret_update(spdm_context->connection_info.version,
                                  secured_message_context->hash_size,
                                  m_rsp_secret_buffer, m_rsp_secret_buffer,
                                  secured_message_context->hash_size);

    response_size = sizeof(response);
    status = libspdm_get_encap_response_key_update(spdm_context,
                                                   m_spdm_key_update_request1_size,
                                                   &m_spdm_key_update_request1,
                                                   &response_size, response);

    assert_int_equal(status, LIBSPDM_STATUS_SUCCESS);
    assert_int_equal(response_size, sizeof(spdm_key_update_response_t));
    spdm_response = (void *)response;
    assert_int_equal(spdm_response->header.request_response_code,
                     SPDM_KEY_UPDATE_ACK);
    assert_int_equal(spdm_response->header.param1,
                     SPDM_KEY_UPDATE_OPERATIONS_TABLE_UPDATE_KEY);
    assert_int_equal(spdm_response->header.param2,
                     m_spdm_key_update_request1.header.param2);
#if LIBSPDM_RECORD_TRANSCRIPT_DATA_SUPPORT
    assert_int_equal(session_info->session_transcript.message_m.buffer_size, 0);
    assert_int_equal(spdm_context->transcript.message_b.buffer_size, 0);
    assert_int_equal(spdm_context->transcript.message_c.buffer_size, 0);
    assert_int_equal(spdm_context->transcript.message_mut_b.buffer_size, 0);
    assert_int_equal(spdm_context->transcript.message_mut_c.buffer_size, 0);
#endif
    assert_memory_equal(secured_message_context
                        ->application_secret.request_data_secret,
                        m_req_secret_buffer, secured_message_context->hash_size);
    assert_memory_equal(secured_message_context
                        ->application_secret.response_data_secret,
                        m_rsp_secret_buffer, secured_message_context->hash_size);
}

/**
 * Test 4: receiving a correct KEY_UPDATE message from the requester, but the
 * responder has no capabilities for key update.
 * Expected behavior: the encap requester refuses the KEY_UPDATE message and
 * produces an ERROR message indicating the UnsupportedRequest. No keys are
 * updated.
 **/
void test_libspdm_requester_encap_key_update_case4(void **state)
{
    libspdm_return_t status;
    libspdm_test_context_t *spdm_test_context;
    libspdm_context_t *spdm_context;
    uint32_t session_id;
    libspdm_session_info_t *session_info;
    libspdm_secured_message_context_t *secured_message_context;

    size_t response_size;
    uint8_t response[LIBSPDM_MAX_SPDM_MSG_SIZE];
    spdm_key_update_response_t *spdm_response;

    uint8_t m_req_secret_buffer[LIBSPDM_MAX_HASH_SIZE];
    uint8_t m_rsp_secret_buffer[LIBSPDM_MAX_HASH_SIZE];

    spdm_test_context = *state;
    spdm_context = spdm_test_context->spdm_context;
    spdm_test_context->case_id = 0x04;
    spdm_context->connection_info.version = SPDM_MESSAGE_VERSION_11 <<
                                            SPDM_VERSION_NUMBER_SHIFT_BIT;

    spdm_set_standard_key_update_test_state(
        spdm_context, &session_id);

    /*no capabilities*/
    spdm_context->connection_info.capability.flags &=
        !SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_KEY_UPD_CAP;
    spdm_context->local_context.capability.flags &=
        !SPDM_GET_CAPABILITIES_REQUEST_FLAGS_KEY_UPD_CAP;

    session_info = &spdm_context->session_info[0];
    secured_message_context = session_info->secured_message_context;

    libspdm_set_standard_key_update_test_secrets(
        session_info->secured_message_context,
        m_rsp_secret_buffer, (uint8_t)(0xFF),
        m_req_secret_buffer, (uint8_t)(0xEE));

    /*no keys are updated*/"|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\encap_key_update.c|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\encap_key_update.c|32751e6e15434cb18e938f3475e58bfb
"/*no keys are updated*/

    response_size = sizeof(response);
    status = libspdm_get_encap_response_key_update(spdm_context,
                                                   m_spdm_key_update_request1_size,
                                                   &m_spdm_key_update_request1,
                                                   &response_size, response);

    assert_int_equal(status, LIBSPDM_STATUS_SUCCESS);
    assert_int_equal(response_size, sizeof(spdm_error_response_t));
    spdm_response = (void *)response;
    assert_int_equal(spdm_response->header.request_response_code,
                     SPDM_ERROR);
    assert_int_equal(spdm_response->header.param1,
                     SPDM_ERROR_CODE_UNSUPPORTED_REQUEST);
    assert_int_equal(spdm_response->header.param2, SPDM_KEY_UPDATE);
    assert_memory_equal(secured_message_context
                        ->application_secret.request_data_secret,
                        m_req_secret_buffer, secured_message_context->hash_size);
    assert_memory_equal(secured_message_context
                        ->application_secret.response_data_secret,
                        m_rsp_secret_buffer, secured_message_context->hash_size);
}

/**
 * Test 5: receiving a correct KEY_UPDATE message from the requester, but the
 * responder is not correctly setup by not initializing a session during
 * KEY_EXCHANGE.
 * Expected behavior: the encap requester refuses the KEY_UPDATE message and produces
 * an ERROR message indicating the UnsupportedRequest. No keys are updated.
 **/
void test_libspdm_requester_encap_key_update_case5(void **state)
{
    libspdm_return_t status;
    libspdm_test_context_t *spdm_test_context;
    libspdm_context_t *spdm_context;
    uint32_t session_id;
    libspdm_session_info_t *session_info;
    libspdm_secured_message_context_t *secured_message_context;

    size_t response_size;
    uint8_t response[LIBSPDM_MAX_SPDM_MSG_SIZE];
    spdm_key_update_response_t *spdm_response;

    uint8_t m_req_secret_buffer[LIBSPDM_MAX_HASH_SIZE];
    uint8_t m_rsp_secret_buffer[LIBSPDM_MAX_HASH_SIZE];

    spdm_test_context = *state;
    spdm_context = spdm_test_context->spdm_context;
    spdm_test_context->case_id = 0x04;
    spdm_context->connection_info.version = SPDM_MESSAGE_VERSION_11 <<
                                            SPDM_VERSION_NUMBER_SHIFT_BIT;

    spdm_set_standard_key_update_test_state(
        spdm_context, &session_id);

    session_info = &spdm_context->session_info[0];
    secured_message_context = session_info->secured_message_context;

    /*uninitialized session*/
    libspdm_secured_message_set_session_state(
        session_info->secured_message_context,
        LIBSPDM_SESSION_STATE_NOT_STARTED);

    libspdm_set_standard_key_update_test_secrets(
        session_info->secured_message_context,
        m_rsp_secret_buffer, (uint8_t)(0xFF),
        m_req_secret_buffer, (uint8_t)(0xEE));

    /*no keys are updated*/

    response_size = sizeof(response);
    status = libspdm_get_encap_response_key_update(spdm_context,
                                                   m_spdm_key_update_request1_size,
                                                   &m_spdm_key_update_request1,
                                                   &response_size, response);
    assert_int_equal(status, LIBSPDM_STATUS_SUCCESS);
    assert_int_equal(response_size, sizeof(spdm_error_response_t));
    spdm_response = (void *)response;
    assert_int_equal(spdm_response->header.request_response_code,
                     SPDM_ERROR);
    assert_int_equal(spdm_response->header.param1,
                     SPDM_ERROR_CODE_INVALID_REQUEST);
    assert_int_equal(spdm_response->header.param2, 0);
    assert_memory_equal(secured_message_context
                        ->application_secret.request_data_secret,
                        m_req_secret_buffer, secured_message_context->hash_size);
    assert_memory_equal(secured_message_context
                        ->application_secret.response_data_secret,
                        m_rsp_secret_buffer, secured_message_context->hash_size);
}

/**
 * Test 6: receiving a correct KEY_UPDATE message from the requester with
 * the UpdateAllKeys operation.
 * Expected behavior: the encap requester refuses the KEY_UPDATE message and produces
 * an ERROR message indicating the UnsupportedRequest. No keys are updated.
 **/
void test_libspdm_requester_encap_key_update_case6(void **state)
{
    libspdm_return_t status;
    libspdm_test_context_t *spdm_test_context;
    libspdm_context_t *spdm_context;
    uint32_t session_id;

    size_t response_size;
    uint8_t response[LIBSPDM_MAX_SPDM_MSG_SIZE];
    spdm_key_update_response_t *spdm_response;


    spdm_test_context = *state;
    spdm_context = spdm_test_context->spdm_context;
    spdm_test_context->case_id = 0x06;
    spdm_context->connection_info.version = SPDM_MESSAGE_VERSION_11 <<
                                            SPDM_VERSION_NUMBER_SHIFT_BIT;"|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\encap_key_update.c|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\encap_key_update.c|30be1c1fcb9644ba9a58bce8bdbf674d
"spdm_set_standard_key_update_test_state(
        spdm_context, &session_id);

    response_size = sizeof(response);
    status = libspdm_get_encap_response_key_update(spdm_context,
                                                   m_spdm_key_update_request3_size,
                                                   &m_spdm_key_update_request3,
                                                   &response_size, response);

    assert_int_equal(status, LIBSPDM_STATUS_SUCCESS);
    assert_int_equal(response_size, sizeof(spdm_error_response_t));
    spdm_response = (void *)response;
    assert_int_equal(spdm_response->header.request_response_code,
                     SPDM_ERROR);
    assert_int_equal(spdm_response->header.param1,
                     SPDM_ERROR_CODE_INVALID_REQUEST);
    assert_int_equal(spdm_response->header.param2,
                     0);
}

/**
 * Test 7: receiving a KEY_UPDATE message larger than specified, with the
 * UpdateAllKeys operation.
 * Expected behavior: the encap requester refuses the KEY_UPDATE message and
 * produces an ERROR message indicating the InvalidRequest. No keys
 * are updated.
 **/
void test_libspdm_requester_encap_key_update_case7(void **state)
{
    libspdm_return_t status;
    libspdm_test_context_t *spdm_test_context;
    libspdm_context_t *spdm_context;
    uint32_t session_id;
    libspdm_session_info_t *session_info;
    libspdm_secured_message_context_t *secured_message_context;

    size_t response_size;
    uint8_t response[LIBSPDM_MAX_SPDM_MSG_SIZE];
    spdm_key_update_response_t *spdm_response;

    uint8_t m_req_secret_buffer[LIBSPDM_MAX_HASH_SIZE];
    uint8_t m_rsp_secret_buffer[LIBSPDM_MAX_HASH_SIZE];

    spdm_test_context = *state;
    spdm_context = spdm_test_context->spdm_context;
    spdm_test_context->case_id = 0x07;
    spdm_context->connection_info.version = SPDM_MESSAGE_VERSION_11 <<
                                            SPDM_VERSION_NUMBER_SHIFT_BIT;

    spdm_set_standard_key_update_test_state(
        spdm_context, &session_id);

    session_info = &spdm_context->session_info[0];
    secured_message_context = session_info->secured_message_context;

    libspdm_set_standard_key_update_test_secrets(
        session_info->secured_message_context,
        m_rsp_secret_buffer, (uint8_t)(0xFF),
        m_req_secret_buffer, (uint8_t)(0xEE));

    /*no keys are updated*/

    response_size = sizeof(response);
    status = libspdm_get_encap_response_key_update(spdm_context,
                                                   m_spdm_key_update_request4_size,
                                                   &m_spdm_key_update_request4,
                                                   &response_size, response);

    assert_int_equal(status, LIBSPDM_STATUS_SUCCESS);
    assert_int_equal(response_size, sizeof(spdm_error_response_t));
    spdm_response = (void *)response;
    assert_int_equal(spdm_response->header.request_response_code,
                     SPDM_ERROR);
    assert_int_equal(spdm_response->header.param1,
                     SPDM_ERROR_CODE_INVALID_REQUEST);
    assert_int_equal(spdm_response->header.param2, 0);
    assert_memory_equal(secured_message_context
                        ->application_secret.request_data_secret,
                        m_req_secret_buffer, secured_message_context->hash_size);
    assert_memory_equal(secured_message_context
                        ->application_secret.response_data_secret,
                        m_rsp_secret_buffer, secured_message_context->hash_size);
}

/**
 * Test 8: receiving a invalid KEY_UPDATE message from the requester with
 * the VerifyNewKey operation. The responder is setup as if no valid
 * KEY_UPDATE request with either the UpdateKey or UpdateAllKeys has been
 * previously received.
 * Expected behavior: the encap requester refuses the KEY_UPDATE message and
 * produces an ERROR message indicating the InvalidRequest. No keys are
 * updated.
 **/
void test_libspdm_requester_encap_key_update_case8(void **state)
{
    libspdm_return_t status;
    libspdm_test_context_t *spdm_test_context;
    libspdm_context_t *spdm_context;
    uint32_t session_id;
    libspdm_session_info_t *session_info;

    size_t response_size;
    uint8_t response[LIBSPDM_MAX_SPDM_MSG_SIZE];
    spdm_key_update_response_t *spdm_response;

    uint8_t m_req_secret_buffer[LIBSPDM_MAX_HASH_SIZE];
    uint8_t m_rsp_secret_buffer[LIBSPDM_MAX_HASH_SIZE];

    spdm_test_context = *state;
    spdm_context = spdm_test_context->spdm_context;
    spdm_test_context->case_id = 0x08;
    spdm_context->connection_info.version = SPDM_MESSAGE_VERSION_11 <<
                                            SPDM_VERSION_NUMBER_SHIFT_BIT;

    spdm_set_standard_key_update_test_state(
        spdm_context, &session_id);

    session_info = &spdm_context->session_info[0];"|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\encap_key_update.c|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\encap_key_update.c|6f4fb09b2b99464d8d1f79e40ec2fa69
"session_info = &spdm_context->session_info[0];

    libspdm_set_standard_key_update_test_secrets(
        session_info->secured_message_context,
        m_rsp_secret_buffer, (uint8_t)(0xFF),
        m_req_secret_buffer, (uint8_t)(0xEE));

    /*no mocked major secret update*/

    /*no keys are updated*/

    response_size = sizeof(response);
    status = libspdm_get_encap_response_key_update(spdm_context,
                                                   m_spdm_key_update_request5_size,
                                                   &m_spdm_key_update_request5,
                                                   &response_size, response);

    assert_int_equal(status, LIBSPDM_STATUS_SUCCESS);
    assert_int_equal(response_size, sizeof(spdm_error_response_t));
    spdm_response = (void *)response;
    assert_int_equal(spdm_response->header.request_response_code,
                     SPDM_ERROR);
    assert_int_equal(spdm_response->header.param1,
                     SPDM_ERROR_CODE_INVALID_REQUEST);
    assert_int_equal(spdm_response->header.param2,
                     0);
}

/**
 * Test 9: receiving a KEY_UPDATE message with a reserved operation code.
 * Expected behavior: the encap requester refuses the KEY_UPDATE message and
 * produces an ERROR message indicating the InvalidRequest. No keys
 * are updated.
 **/
void test_libspdm_requester_encap_key_update_case9(void **state)
{
    libspdm_return_t status;
    libspdm_test_context_t *spdm_test_context;
    libspdm_context_t *spdm_context;
    uint32_t session_id;
    libspdm_session_info_t *session_info;
    libspdm_secured_message_context_t *secured_message_context;

    size_t response_size;
    uint8_t response[LIBSPDM_MAX_SPDM_MSG_SIZE];
    spdm_key_update_response_t *spdm_response;

    uint8_t m_req_secret_buffer[LIBSPDM_MAX_HASH_SIZE];
    uint8_t m_rsp_secret_buffer[LIBSPDM_MAX_HASH_SIZE];

    spdm_test_context = *state;
    spdm_context = spdm_test_context->spdm_context;
    spdm_test_context->case_id = 0x09;
    spdm_context->connection_info.version = SPDM_MESSAGE_VERSION_11 <<
                                            SPDM_VERSION_NUMBER_SHIFT_BIT;

    spdm_set_standard_key_update_test_state(
        spdm_context, &session_id);

    session_info = &spdm_context->session_info[0];
    secured_message_context = session_info->secured_message_context;

    libspdm_set_standard_key_update_test_secrets(
        session_info->secured_message_context,
        m_rsp_secret_buffer, (uint8_t)(0xFF),
        m_req_secret_buffer, (uint8_t)(0xEE));

    /*no keys are updated*/

    response_size = sizeof(response);
    status = libspdm_get_encap_response_key_update(spdm_context,
                                                   m_spdm_key_update_request10_size,
                                                   &m_spdm_key_update_request10,
                                                   &response_size, response);

    assert_int_equal(status, LIBSPDM_STATUS_SUCCESS);
    assert_int_equal(response_size, sizeof(spdm_error_response_t));
    spdm_response = (void *)response;
    assert_int_equal(spdm_response->header.request_response_code,
                     SPDM_ERROR);
    assert_int_equal(spdm_response->header.param1,
                     SPDM_ERROR_CODE_INVALID_REQUEST);
    assert_int_equal(spdm_response->header.param2, 0);
    assert_memory_equal(secured_message_context
                        ->application_secret.request_data_secret,
                        m_req_secret_buffer, secured_message_context->hash_size);
    assert_memory_equal(secured_message_context
                        ->application_secret.response_data_secret,
                        m_rsp_secret_buffer, secured_message_context->hash_size);
}

/* UpdateKey + UpdateKey: failed*/
void test_libspdm_requester_encap_key_update_case10(void **state)
{
    libspdm_return_t status;
    libspdm_test_context_t *spdm_test_context;
    libspdm_context_t *spdm_context;
    uint32_t session_id;
    libspdm_session_info_t *session_info;
    libspdm_secured_message_context_t *secured_message_context;

    size_t response_size;
    uint8_t response[LIBSPDM_MAX_SPDM_MSG_SIZE];
    spdm_key_update_response_t *spdm_response;

    uint8_t m_req_secret_buffer[LIBSPDM_MAX_HASH_SIZE];
    uint8_t m_rsp_secret_buffer[LIBSPDM_MAX_HASH_SIZE];

    spdm_test_context = *state;
    spdm_context = spdm_test_context->spdm_context;
    spdm_test_context->case_id = 0x0A;
    spdm_context->connection_info.version = SPDM_MESSAGE_VERSION_11 <<
                                            SPDM_VERSION_NUMBER_SHIFT_BIT;

    spdm_set_standard_key_update_test_state(
        spdm_context, &session_id);

    session_info = &spdm_context->session_info[0];
    secured_message_context = session_info->secured_message_context;

    libspdm_set_standard_key_update_test_secrets(
        session_info->secured_message_context,
        m_rsp_secret_buffer, (uint8_t)(0xFF),
        m_req_secret_buffer, (uint8_t)(0xEE));"|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\encap_key_update.c|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\encap_key_update.c|7e362890251f430b8c4141c555c174e1
"/*request side *not* updated*/

    /*last request: UpdateKey*/
    session_info->last_key_update_request = m_spdm_key_update_request1;

    /*response side updated */
    libspdm_compute_secret_update(spdm_context->connection_info.version,
                                  secured_message_context->hash_size,
                                  m_rsp_secret_buffer, m_rsp_secret_buffer,
                                  secured_message_context->hash_size);

    response_size = sizeof(response);
    status = libspdm_get_encap_response_key_update(spdm_context,
                                                   m_spdm_key_update_request1_size,
                                                   &m_spdm_key_update_request1,
                                                   &response_size, response);

    assert_int_equal(status, LIBSPDM_STATUS_SUCCESS);
    assert_int_equal(response_size, sizeof(spdm_error_response_t));
    spdm_response = (void *)response;
    assert_int_equal(spdm_response->header.request_response_code,
                     SPDM_ERROR);
    assert_int_equal(spdm_response->header.param1,
                     SPDM_ERROR_CODE_INVALID_REQUEST);
    assert_int_equal(spdm_response->header.param2,
                     0);
}

/* VerifyNewKey + UpdateKey: success*/
void test_libspdm_requester_encap_key_update_case11(void **state)
{
    libspdm_return_t status;
    libspdm_test_context_t *spdm_test_context;
    libspdm_context_t *spdm_context;
    uint32_t session_id;
    libspdm_session_info_t *session_info;
    libspdm_secured_message_context_t *secured_message_context;

    size_t response_size;
    uint8_t response[LIBSPDM_MAX_SPDM_MSG_SIZE];
    spdm_key_update_response_t *spdm_response;

    uint8_t m_req_secret_buffer[LIBSPDM_MAX_HASH_SIZE];
    uint8_t m_rsp_secret_buffer[LIBSPDM_MAX_HASH_SIZE];

    spdm_test_context = *state;
    spdm_context = spdm_test_context->spdm_context;
    spdm_test_context->case_id = 0x0B;
    spdm_context->connection_info.version = SPDM_MESSAGE_VERSION_11 <<
                                            SPDM_VERSION_NUMBER_SHIFT_BIT;

    spdm_set_standard_key_update_test_state(
        spdm_context, &session_id);

    session_info = &spdm_context->session_info[0];
    secured_message_context = session_info->secured_message_context;

    libspdm_set_standard_key_update_test_secrets(
        session_info->secured_message_context,
        m_rsp_secret_buffer, (uint8_t)(0xFF),
        m_req_secret_buffer, (uint8_t)(0xEE));

    /*request side *not* updated*/

    /*last request: verify new key*/
    session_info->last_key_update_request = m_spdm_key_update_request5;
    /*verify new key clear last_key_update_request*/
    libspdm_zero_mem (&(session_info->last_key_update_request), sizeof(spdm_key_update_request_t));

    /*response side updated */
    libspdm_compute_secret_update(spdm_context->connection_info.version,
                                  secured_message_context->hash_size,
                                  m_rsp_secret_buffer, m_rsp_secret_buffer,
                                  secured_message_context->hash_size);

    response_size = sizeof(response);
    status = libspdm_get_encap_response_key_update(spdm_context,
                                                   m_spdm_key_update_request1_size,
                                                   &m_spdm_key_update_request1,
                                                   &response_size, response);

    assert_int_equal(status, LIBSPDM_STATUS_SUCCESS);
    assert_int_equal(response_size, sizeof(spdm_key_update_response_t));
    spdm_response = (void *)response;
    assert_int_equal(spdm_response->header.request_response_code,
                     SPDM_KEY_UPDATE_ACK);
    assert_int_equal(spdm_response->header.param1,
                     SPDM_KEY_UPDATE_OPERATIONS_TABLE_UPDATE_KEY);
    assert_int_equal(spdm_response->header.param2,
                     m_spdm_key_update_request1.header.param2);
    assert_memory_equal(secured_message_context
                        ->application_secret.request_data_secret,
                        m_req_secret_buffer, secured_message_context->hash_size);
    assert_memory_equal(secured_message_context
                        ->application_secret.response_data_secret,
                        m_rsp_secret_buffer, secured_message_context->hash_size);
}

/* VerifyNewKey + VerifyNewKey: failed*/
void test_libspdm_requester_encap_key_update_case12(void **state)
{
    libspdm_return_t status;
    libspdm_test_context_t *spdm_test_context;
    libspdm_context_t *spdm_context;
    uint32_t session_id;
    libspdm_session_info_t *session_info;
    libspdm_secured_message_context_t *secured_message_context;

    size_t response_size;
    uint8_t response[LIBSPDM_MAX_SPDM_MSG_SIZE];
    spdm_key_update_response_t *spdm_response;

    uint8_t m_req_secret_buffer[LIBSPDM_MAX_HASH_SIZE];
    uint8_t m_rsp_secret_buffer[LIBSPDM_MAX_HASH_SIZE];"|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\encap_key_update.c|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\encap_key_update.c|c668dfebc76a434ca96fcff358f32d2d
"spdm_test_context = *state;
    spdm_context = spdm_test_context->spdm_context;
    spdm_test_context->case_id = 0x0C;
    spdm_context->connection_info.version = SPDM_MESSAGE_VERSION_11 <<
                                            SPDM_VERSION_NUMBER_SHIFT_BIT;

    spdm_set_standard_key_update_test_state(
        spdm_context, &session_id);

    session_info = &spdm_context->session_info[0];
    secured_message_context = session_info->secured_message_context;

    libspdm_set_standard_key_update_test_secrets(
        session_info->secured_message_context,
        m_rsp_secret_buffer, (uint8_t)(0xFF),
        m_req_secret_buffer, (uint8_t)(0xEE));

    /*request side *not* updated*/

    /*last request: verify new key*/
    session_info->last_key_update_request = m_spdm_key_update_request5;
    /*verify new key clear last_key_update_request*/
    libspdm_zero_mem (&(session_info->last_key_update_request), sizeof(spdm_key_update_request_t));

    /*response side updated */
    libspdm_compute_secret_update(spdm_context->connection_info.version,
                                  secured_message_context->hash_size,
                                  m_rsp_secret_buffer, m_rsp_secret_buffer,
                                  secured_message_context->hash_size);

    response_size = sizeof(response);
    status = libspdm_get_encap_response_key_update(spdm_context,
                                                   m_spdm_key_update_request5_size,
                                                   &m_spdm_key_update_request5,
                                                   &response_size, response);

    assert_int_equal(status, LIBSPDM_STATUS_SUCCESS);
    assert_int_equal(response_size, sizeof(spdm_error_response_t));
    spdm_response = (void *)response;
    assert_int_equal(spdm_response->header.request_response_code,
                     SPDM_ERROR);
    assert_int_equal(spdm_response->header.param1,
                     SPDM_ERROR_CODE_INVALID_REQUEST);
    assert_int_equal(spdm_response->header.param2,
                     0);
}


/* ohter command + UpdateKey: success*/
void test_libspdm_requester_encap_key_update_case13(void **state)
{
    libspdm_return_t status;
    libspdm_test_context_t *spdm_test_context;
    libspdm_context_t *spdm_context;
    uint32_t session_id;
    libspdm_session_info_t *session_info;
    libspdm_secured_message_context_t *secured_message_context;

    size_t response_size;
    uint8_t response[LIBSPDM_MAX_SPDM_MSG_SIZE];
    spdm_key_update_response_t *spdm_response;

    uint8_t m_req_secret_buffer[LIBSPDM_MAX_HASH_SIZE];
    uint8_t m_rsp_secret_buffer[LIBSPDM_MAX_HASH_SIZE];

    spdm_test_context = *state;
    spdm_context = spdm_test_context->spdm_context;
    spdm_test_context->case_id = 0x0D;
    spdm_context->connection_info.version = SPDM_MESSAGE_VERSION_11 <<
                                            SPDM_VERSION_NUMBER_SHIFT_BIT;

    spdm_set_standard_key_update_test_state(
        spdm_context, &session_id);

    session_info = &spdm_context->session_info[0];
    secured_message_context = session_info->secured_message_context;

    libspdm_set_standard_key_update_test_secrets(
        session_info->secured_message_context,
        m_rsp_secret_buffer, (uint8_t)(0xFF),
        m_req_secret_buffer, (uint8_t)(0xEE));

    /*request side *not* updated*/

    /*ohter command with cleared last_key_update_request*/
    libspdm_zero_mem (&(session_info->last_key_update_request), sizeof(spdm_key_update_request_t));

    /*response side updated */
    libspdm_compute_secret_update(spdm_context->connection_info.version,
                                  secured_message_context->hash_size,
                                  m_rsp_secret_buffer, m_rsp_secret_buffer,
                                  secured_message_context->hash_size);

    response_size = sizeof(response);
    status = libspdm_get_encap_response_key_update(spdm_context,
                                                   m_spdm_key_update_request1_size,
                                                   &m_spdm_key_update_request1,
                                                   &response_size, response);"|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\encap_key_update.c|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\encap_key_update.c|b2cb42592b9f4fc499dc7730a92bdf7b
"assert_int_equal(status, LIBSPDM_STATUS_SUCCESS);
    assert_int_equal(response_size, sizeof(spdm_key_update_response_t));
    spdm_response = (void *)response;
    assert_int_equal(spdm_response->header.request_response_code,
                     SPDM_KEY_UPDATE_ACK);
    assert_int_equal(spdm_response->header.param1,
                     SPDM_KEY_UPDATE_OPERATIONS_TABLE_UPDATE_KEY);
    assert_int_equal(spdm_response->header.param2,
                     m_spdm_key_update_request1.header.param2);
    assert_memory_equal(secured_message_context
                        ->application_secret.request_data_secret,
                        m_req_secret_buffer, secured_message_context->hash_size);
    assert_memory_equal(secured_message_context
                        ->application_secret.response_data_secret,
                        m_rsp_secret_buffer, secured_message_context->hash_size);
}


/* ohter command + VerifyNewKey: failed*/
void test_libspdm_requester_encap_key_update_case14(void **state)
{
    libspdm_return_t status;
    libspdm_test_context_t *spdm_test_context;
    libspdm_context_t *spdm_context;
    uint32_t session_id;
    libspdm_session_info_t *session_info;
    libspdm_secured_message_context_t *secured_message_context;

    size_t response_size;
    uint8_t response[LIBSPDM_MAX_SPDM_MSG_SIZE];
    spdm_key_update_response_t *spdm_response;

    uint8_t m_req_secret_buffer[LIBSPDM_MAX_HASH_SIZE];
    uint8_t m_rsp_secret_buffer[LIBSPDM_MAX_HASH_SIZE];

    spdm_test_context = *state;
    spdm_context = spdm_test_context->spdm_context;
    spdm_test_context->case_id = 0x0E;
    spdm_context->connection_info.version = SPDM_MESSAGE_VERSION_11 <<
                                            SPDM_VERSION_NUMBER_SHIFT_BIT;

    spdm_set_standard_key_update_test_state(
        spdm_context, &session_id);

    session_info = &spdm_context->session_info[0];
    secured_message_context = session_info->secured_message_context;

    libspdm_set_standard_key_update_test_secrets(
        session_info->secured_message_context,
        m_rsp_secret_buffer, (uint8_t)(0xFF),
        m_req_secret_buffer, (uint8_t)(0xEE));

    /*request side *not* updated*/

    /*ohter command with cleared last_key_update_request*/
    libspdm_zero_mem (&(session_info->last_key_update_request), sizeof(spdm_key_update_request_t));

    /*response side updated */
    libspdm_compute_secret_update(spdm_context->connection_info.version,
                                  secured_message_context->hash_size,
                                  m_rsp_secret_buffer, m_rsp_secret_buffer,
                                  secured_message_context->hash_size);

    response_size = sizeof(response);
    status = libspdm_get_encap_response_key_update(spdm_context,
                                                   m_spdm_key_update_request5_size,
                                                   &m_spdm_key_update_request5,
                                                   &response_size, response);

    assert_int_equal(status, LIBSPDM_STATUS_SUCCESS);
    assert_int_equal(response_size, sizeof(spdm_error_response_t));
    spdm_response = (void *)response;
    assert_int_equal(spdm_response->header.request_response_code,
                     SPDM_ERROR);
    assert_int_equal(spdm_response->header.param1,
                     SPDM_ERROR_CODE_INVALID_REQUEST);
    assert_int_equal(spdm_response->header.param2,
                     0);
}



libspdm_test_context_t m_libspdm_requester_encap_key_update_test_context = {
    LIBSPDM_TEST_CONTEXT_VERSION,
    false,
};"|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\encap_key_update.c|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\encap_key_update.c|095f133201254560b3db2b3c87c552a6
"int libspdm_requester_encap_key_update_test_main(void)
{
    const struct CMUnitTest spdm_requester_key_update_tests[] = {
        /* Success Case -- UpdateKey*/
        cmocka_unit_test(test_libspdm_requester_encap_key_update_case1),
        /* Bad request size*/
        cmocka_unit_test(test_libspdm_requester_encap_key_update_case2),
        /* Buffer reset*/
        cmocka_unit_test(test_libspdm_requester_encap_key_update_case3),
        /* Unsupported KEY_UPD capabilities*/
        cmocka_unit_test(test_libspdm_requester_encap_key_update_case4),
        /* Uninitialized session*/
        cmocka_unit_test(test_libspdm_requester_encap_key_update_case5),
        /* ruquster RETURN_UNSUPPORTED*/
        cmocka_unit_test(test_libspdm_requester_encap_key_update_case6),
        /* Bad request size*/
        cmocka_unit_test(test_libspdm_requester_encap_key_update_case7),
        /* Uninitialized key update*/
        cmocka_unit_test(test_libspdm_requester_encap_key_update_case8),
        /* Invalid operation*/
        cmocka_unit_test(test_libspdm_requester_encap_key_update_case9),
        /* UpdateKey + UpdateKey: failed*/
        cmocka_unit_test(test_libspdm_requester_encap_key_update_case10),
        /* VerifyNewKey + UpdateKey: success*/
        cmocka_unit_test(test_libspdm_requester_encap_key_update_case11),
        /* VerifyNewKey + VerifyNewKey: failed*/
        cmocka_unit_test(test_libspdm_requester_encap_key_update_case12),
        /* ohter command + UpdateKey: success*/
        cmocka_unit_test(test_libspdm_requester_encap_key_update_case13),
        /* ohter command + VerifyNewKey: failed*/
        cmocka_unit_test(test_libspdm_requester_encap_key_update_case14),
    };

    libspdm_setup_test_context(&m_libspdm_requester_encap_key_update_test_context);

    return cmocka_run_group_tests(spdm_requester_key_update_tests,
                                  libspdm_unit_test_group_setup,
                                  libspdm_unit_test_group_teardown);
}

#endif /* LIBSPDM_ENABLE_CAPABILITY_ENCAP_CAP*/"|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\encap_key_update.c|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\encap_key_update.c|248e177177dd4aa89d9ed27f2d58529a
"#include ""spdm_unit_test.h""
#include ""internal/libspdm_common_lib.h""

/**
 * Test 1: Test support functions.
 **/
static void libspdm_test_common_context_data_case1(void **state)
{
    assert_int_equal(0x0001020304050607, libspdm_le_to_be_64(UINT64_C(0x0706050403020100)));
}

int libspdm_common_support_test_main(void)
{
    const struct CMUnitTest spdm_common_context_data_tests[] = {
        cmocka_unit_test(libspdm_test_common_context_data_case1),

    };

    return cmocka_run_group_tests(spdm_common_context_data_tests,
                                  libspdm_unit_test_group_setup,
                                  libspdm_unit_test_group_teardown);
}"|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_common\support.c|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_common\support.c|9eac0c04db0642998f01d484f496c128
"/**
 *  Copyright Notice:
 *  Copyright 2021-2024 DMTF. All rights reserved.
 *  License: BSD 3-Clause License. For full text see link: https://github.com/DMTF/libspdm/blob/main/LICENSE.md
 **/

#include ""spdm_unit_test.h""
#include ""internal/libspdm_requester_lib.h""

#if LIBSPDM_ENABLE_CAPABILITY_CHAL_CAP

static size_t m_libspdm_local_buffer_size;
static uint8_t m_libspdm_local_buffer[LIBSPDM_MAX_MESSAGE_M1M2_BUFFER_SIZE];

static size_t m_libspdm_opaque_data_size;
static uint8_t m_libspdm_opaque_data[SPDM_MAX_OPAQUE_DATA_SIZE];

static uint8_t m_requester_context[SPDM_REQ_CONTEXT_SIZE];

libspdm_return_t libspdm_requester_challenge_test_send_message(void *spdm_context,
                                                               size_t request_size,
                                                               const void *request,
                                                               uint64_t timeout)
{
    libspdm_test_context_t *spdm_test_context;
    const uint8_t *ptr;"|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\challenge.c|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\challenge.c|f9aa72e739884d3c82965b0feba4d8b9
"spdm_test_context = libspdm_get_test_context();
    ptr = (const uint8_t *)request;
    switch (spdm_test_context->case_id) {
    case 0x1:
        return LIBSPDM_STATUS_SEND_FAIL;
    case 0x2:
        m_libspdm_local_buffer_size = 0;
        libspdm_copy_mem(m_libspdm_local_buffer, sizeof(m_libspdm_local_buffer), &ptr[1],
                         request_size - 1);
        m_libspdm_local_buffer_size += (request_size - 1);
        return LIBSPDM_STATUS_SUCCESS;
    case 0x3:
        m_libspdm_local_buffer_size = 0;
        libspdm_copy_mem(m_libspdm_local_buffer, sizeof(m_libspdm_local_buffer), &ptr[1],
                         request_size - 1);
        m_libspdm_local_buffer_size += (request_size - 1);
        return LIBSPDM_STATUS_SUCCESS;
    case 0x4:
        m_libspdm_local_buffer_size = 0;
        libspdm_copy_mem(m_libspdm_local_buffer, sizeof(m_libspdm_local_buffer), &ptr[1],
                         request_size - 1);
        m_libspdm_local_buffer_size += (request_size - 1);
        return LIBSPDM_STATUS_SUCCESS;
    case 0x5:
        m_libspdm_local_buffer_size = 0;
        libspdm_copy_mem(m_libspdm_local_buffer, sizeof(m_libspdm_local_buffer), &ptr[1],
                         request_size - 1);
        m_libspdm_local_buffer_size += (request_size - 1);
        return LIBSPDM_STATUS_SUCCESS;
    case 0x6:
        m_libspdm_local_buffer_size = 0;
        libspdm_copy_mem(m_libspdm_local_buffer, sizeof(m_libspdm_local_buffer), &ptr[1],
                         request_size - 1);
        m_libspdm_local_buffer_size += (request_size - 1);
        return LIBSPDM_STATUS_SUCCESS;
    case 0x7:
        m_libspdm_local_buffer_size = 0;
        libspdm_copy_mem(m_libspdm_local_buffer, sizeof(m_libspdm_local_buffer), &ptr[1],
                         request_size - 1);
        m_libspdm_local_buffer_size += (request_size - 1);
        return LIBSPDM_STATUS_SUCCESS;
    case 0x8:
        m_libspdm_local_buffer_size = 0;
        libspdm_copy_mem(m_libspdm_local_buffer, sizeof(m_libspdm_local_buffer), &ptr[1],
                         request_size - 1);
        m_libspdm_local_buffer_size += (request_size - 1);
        return LIBSPDM_STATUS_SUCCESS;
    case 0x9: {
        static size_t sub_index = 0;
        if (sub_index == 0) {
            m_libspdm_local_buffer_size = 0;
            libspdm_copy_mem(m_libspdm_local_buffer, sizeof(m_libspdm_local_buffer), &ptr[1],
                             request_size - 1);
            m_libspdm_local_buffer_size += (request_size - 1);
            sub_index++;
        }
    }
        return LIBSPDM_STATUS_SUCCESS;
    case 0xA:
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x14:
    case 0x15:
        m_libspdm_local_buffer_size = 0;
        libspdm_copy_mem(m_libspdm_local_buffer, sizeof(m_libspdm_local_buffer), &ptr[1],
                         request_size - 1);
        m_libspdm_local_buffer_size += (request_size - 1);
        return LIBSPDM_STATUS_SUCCESS;
    case 0x16: {
        /* arbitrary data must be inserted in the message buffer for computing
         * the response hash */
        m_libspdm_local_buffer_size = 0;
#if LIBSPDM_RECORD_TRANSCRIPT_DATA_SUPPORT
        libspdm_set_mem(&m_libspdm_local_buffer[m_libspdm_local_buffer_size], 10, (uint8_t) 0xFF);
        m_libspdm_local_buffer_size += 10;
        libspdm_set_mem(&m_libspdm_local_buffer[m_libspdm_local_buffer_size], 8, (uint8_t) 0xEE);
        m_libspdm_local_buffer_size += 8;
        libspdm_set_mem(&m_libspdm_local_buffer[m_libspdm_local_buffer_size], 12, (uint8_t) 0xDD);
        m_libspdm_local_buffer_size += 12;
#endif
        libspdm_copy_mem(&m_libspdm_local_buffer[m_libspdm_local_buffer_size],
                         sizeof(m_libspdm_local_buffer) - m_libspdm_local_buffer_size,
                         &ptr[1], request_size - 1);
        m_libspdm_local_buffer_size += (request_size - 1);
    }
        return LIBSPDM_STATUS_SUCCESS;
    case 0x17:
        m_libspdm_local_buffer_size = 0;
        libspdm_copy_mem(m_libspdm_local_buffer, sizeof(m_libspdm_local_buffer), &ptr[1],
                         request_size - 1);
        m_libspdm_local_buffer_size += (request_size - 1);
        return LIBSPDM_STATUS_SUCCESS;
    case 0x18:
    case 0x19:
    case 0x1A:
        m_libspdm_local_buffer_size = 0;
        libspdm_copy_mem(m_libspdm_local_buffer, sizeof(m_libspdm_local_buffer), &ptr[1],
                         request_size - 1);
        m_libspdm_local_buffer_size += (request_size - 1);
        return LIBSPDM_STATUS_SUCCESS;
    case 0x1B:
    case 0x1C:
        m_libspdm_local_buffer_size = 0;
        libspdm_copy_mem(m_libspdm_local_buffer, sizeof(m_libspdm_local_buffer), &ptr[1],
                         request_size - 1);
        m_libspdm_local_buffer_size += (request_size - 1);
        return LIBSPDM_STATUS_SUCCESS;
    default:
        return LIBSPDM_STATUS_SEND_FAIL;
    }
}"|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\challenge.c|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\challenge.c|87801e697c97407ebf1ba1823efcace7
"libspdm_return_t libspdm_requester_challenge_test_receive_message(
    void *spdm_context, size_t *response_size,
    void **response, uint64_t timeout)
{
    libspdm_test_context_t *spdm_test_context;

    spdm_test_context = libspdm_get_test_context();
    switch (spdm_test_context->case_id) {
    case 0x1:
        return LIBSPDM_STATUS_RECEIVE_FAIL;

    case 0x2: { /*correct CHALLENGE_AUTH message*/
        spdm_challenge_auth_response_t *spdm_response;
        void *data;
        size_t data_size;
        uint8_t *ptr;
        uint8_t hash_data[LIBSPDM_MAX_HASH_SIZE];
        size_t sig_size;
        size_t spdm_response_size;
        size_t transport_header_size;

        libspdm_read_responder_public_certificate_chain(m_libspdm_use_hash_algo,
                                                        m_libspdm_use_asym_algo, &data,
                                                        &data_size, NULL, NULL);
        ((libspdm_context_t *)spdm_context)
        ->local_context.local_cert_chain_provision_size[0] =
            data_size;
        ((libspdm_context_t *)spdm_context)
        ->local_context.local_cert_chain_provision[0] = data;
        ((libspdm_context_t *)spdm_context)
        ->connection_info.algorithm.base_asym_algo =
            m_libspdm_use_asym_algo;
        ((libspdm_context_t *)spdm_context)
        ->connection_info.algorithm.base_hash_algo =
            m_libspdm_use_hash_algo;
        spdm_response_size = sizeof(spdm_challenge_auth_response_t) +
                             libspdm_get_hash_size(m_libspdm_use_hash_algo) +
                             SPDM_NONCE_SIZE + 0 + sizeof(uint16_t) + 0 +
                             libspdm_get_asym_signature_size(m_libspdm_use_asym_algo);
        transport_header_size = LIBSPDM_TEST_TRANSPORT_HEADER_SIZE;
        spdm_response = (void *)((uint8_t *)*response + transport_header_size);

        spdm_response->header.spdm_version = SPDM_MESSAGE_VERSION_11;
        spdm_response->header.request_response_code =
            SPDM_CHALLENGE_AUTH;
        spdm_response->header.param1 = 0;
        spdm_response->header.param2 = (1 << 0);
        ptr = (void *)(spdm_response + 1);
        libspdm_hash_all(
            m_libspdm_use_hash_algo,
            ((libspdm_context_t *)spdm_context)
            ->local_context.local_cert_chain_provision[0],
            ((libspdm_context_t *)spdm_context)
            ->local_context
            .local_cert_chain_provision_size[0],
            ptr);
        free(data);
        ptr += libspdm_get_hash_size(m_libspdm_use_hash_algo);
        libspdm_get_random_number(SPDM_NONCE_SIZE, ptr);
        ptr += SPDM_NONCE_SIZE;
        /* libspdm_zero_mem (ptr, libspdm_get_hash_size (m_libspdm_use_hash_algo));
         * ptr += libspdm_get_hash_size (m_libspdm_use_hash_algo);*/
        *(uint16_t *)ptr = 0;
        ptr += sizeof(uint16_t);
        libspdm_copy_mem(&m_libspdm_local_buffer[m_libspdm_local_buffer_size],
                         sizeof(m_libspdm_local_buffer) -
                         (&m_libspdm_local_buffer[m_libspdm_local_buffer_size] -
                          m_libspdm_local_buffer),
                         spdm_response, (size_t)ptr - (size_t)spdm_response);
        m_libspdm_local_buffer_size += ((size_t)ptr - (size_t)spdm_response);
        LIBSPDM_DEBUG((LIBSPDM_DEBUG_INFO, ""m_libspdm_local_buffer_size (0x%zx):\n"",
                       m_libspdm_local_buffer_size));
        libspdm_dump_hex(m_libspdm_local_buffer, m_libspdm_local_buffer_size);
        libspdm_hash_all(m_libspdm_use_hash_algo, m_libspdm_local_buffer,
                         m_libspdm_local_buffer_size, hash_data);
        LIBSPDM_DEBUG((LIBSPDM_DEBUG_INFO, ""HashDataSize (0x%x):\n"",
                       libspdm_get_hash_size(m_libspdm_use_hash_algo)));
        libspdm_dump_hex(m_libspdm_local_buffer, m_libspdm_local_buffer_size);
        sig_size = libspdm_get_asym_signature_size(m_libspdm_use_asym_algo);
        libspdm_responder_data_sign(
#if LIBSPDM_HAL_PASS_SPDM_CONTEXT
            spdm_context,
#endif
            spdm_response->header.spdm_version << SPDM_VERSION_NUMBER_SHIFT_BIT,
                SPDM_CHALLENGE_AUTH,
                m_libspdm_use_asym_algo, m_libspdm_use_hash_algo,
                false, m_libspdm_local_buffer, m_libspdm_local_buffer_size,
                ptr, &sig_size);
        ptr += sig_size;

        libspdm_transport_test_encode_message(spdm_context, NULL, false,
                                              false, spdm_response_size,
                                              spdm_response, response_size,
                                              response);
    }
        return LIBSPDM_STATUS_SUCCESS;"|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\challenge.c|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\challenge.c|026c50be09704e67814ac23b4ec40ecb
"case 0x3: { /*correct CHALLENGE_AUTH message*/
        spdm_challenge_auth_response_t *spdm_response;
        void *data;
        size_t data_size;
        uint8_t *ptr;
        uint8_t hash_data[LIBSPDM_MAX_HASH_SIZE];
        size_t sig_size;
        size_t spdm_response_size;
        size_t transport_header_size;

        libspdm_read_responder_public_certificate_chain(m_libspdm_use_hash_algo,
                                                        m_libspdm_use_asym_algo, &data,
                                                        &data_size, NULL, NULL);
        ((libspdm_context_t *)spdm_context)
        ->local_context.local_cert_chain_provision_size[0] =
            data_size;
        ((libspdm_context_t *)spdm_context)
        ->local_context.local_cert_chain_provision[0] = data;
        ((libspdm_context_t *)spdm_context)
        ->connection_info.algorithm.base_asym_algo =
            m_libspdm_use_asym_algo;
        ((libspdm_context_t *)spdm_context)
        ->connection_info.algorithm.base_hash_algo =
            m_libspdm_use_hash_algo;
        spdm_response_size = sizeof(spdm_challenge_auth_response_t) +
                             libspdm_get_hash_size(m_libspdm_use_hash_algo) +
                             SPDM_NONCE_SIZE + 0 + sizeof(uint16_t) + 0 +
                             libspdm_get_asym_signature_size(m_libspdm_use_asym_algo);
        transport_header_size = LIBSPDM_TEST_TRANSPORT_HEADER_SIZE;
        spdm_response = (void *)((uint8_t *)*response + transport_header_size);

        spdm_response->header.spdm_version = SPDM_MESSAGE_VERSION_11;
        spdm_response->header.request_response_code =
            SPDM_CHALLENGE_AUTH;
        spdm_response->header.param1 = 0;
        spdm_response->header.param2 = (1 << 0);
        ptr = (void *)(spdm_response + 1);
        libspdm_hash_all(
            m_libspdm_use_hash_algo,
            ((libspdm_context_t *)spdm_context)
            ->local_context.local_cert_chain_provision[0],
            ((libspdm_context_t *)spdm_context)
            ->local_context
            .local_cert_chain_provision_size[0],
            ptr);
        free(data);
        ptr += libspdm_get_hash_size(m_libspdm_use_hash_algo);
        libspdm_get_random_number(SPDM_NONCE_SIZE, ptr);
        ptr += SPDM_NONCE_SIZE;
        /* libspdm_zero_mem (ptr, libspdm_get_hash_size (m_libspdm_use_hash_algo));
         * ptr += libspdm_get_hash_size (m_libspdm_use_hash_algo);*/
        *(uint16_t *)ptr = 0;
        ptr += sizeof(uint16_t);
        libspdm_copy_mem(&m_libspdm_local_buffer[m_libspdm_local_buffer_size],
                         sizeof(m_libspdm_local_buffer) -
                         (&m_libspdm_local_buffer[m_libspdm_local_buffer_size] -
                          m_libspdm_local_buffer),
                         spdm_response, (size_t)ptr - (size_t)spdm_response);
        m_libspdm_local_buffer_size += ((size_t)ptr - (size_t)spdm_response);
        libspdm_hash_all(m_libspdm_use_hash_algo, m_libspdm_local_buffer,
                         m_libspdm_local_buffer_size, hash_data);
        sig_size = libspdm_get_asym_signature_size(m_libspdm_use_asym_algo);
        libspdm_responder_data_sign(
#if LIBSPDM_HAL_PASS_SPDM_CONTEXT
            spdm_context,
#endif
            spdm_response->header.spdm_version << SPDM_VERSION_NUMBER_SHIFT_BIT,
                SPDM_CHALLENGE_AUTH,
                m_libspdm_use_asym_algo, m_libspdm_use_hash_algo,
                false, m_libspdm_local_buffer, m_libspdm_local_buffer_size,
                ptr, &sig_size);
        ptr += sig_size;

        libspdm_transport_test_encode_message(spdm_context, NULL, false,
                                              false, spdm_response_size,
                                              spdm_response, response_size,
                                              response);
    }
        return LIBSPDM_STATUS_SUCCESS;

    case 0x4: { /*correct ERROR message (invalid request)*/
        spdm_error_response_t *spdm_response;
        size_t spdm_response_size;
        size_t transport_header_size;

        spdm_response_size = sizeof(spdm_error_response_t);
        transport_header_size = LIBSPDM_TEST_TRANSPORT_HEADER_SIZE;
        spdm_response = (void *)((uint8_t *)*response + transport_header_size);

        spdm_response->header.spdm_version = SPDM_MESSAGE_VERSION_11;
        spdm_response->header.request_response_code = SPDM_ERROR;
        spdm_response->header.param1 = SPDM_ERROR_CODE_INVALID_REQUEST;
        spdm_response->header.param2 = 0;

        libspdm_transport_test_encode_message(spdm_context, NULL, false,
                                              false, spdm_response_size,
                                              spdm_response,
                                              response_size, response);
    }
        return LIBSPDM_STATUS_SUCCESS;"|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\challenge.c|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\challenge.c|3ae5e6e7b72b4ab0b8b5e0fd65d2bdf3
"case 0x5: { /*correct ERROR message (busy)*/
        spdm_error_response_t *spdm_response;
        size_t spdm_response_size;
        size_t transport_header_size;

        spdm_response_size = sizeof(spdm_error_response_t);
        transport_header_size = LIBSPDM_TEST_TRANSPORT_HEADER_SIZE;
        spdm_response = (void *)((uint8_t *)*response + transport_header_size);

        spdm_response->header.spdm_version = SPDM_MESSAGE_VERSION_11;
        spdm_response->header.request_response_code = SPDM_ERROR;
        spdm_response->header.param1 = SPDM_ERROR_CODE_BUSY;
        spdm_response->header.param2 = 0;

        libspdm_transport_test_encode_message(spdm_context, NULL, false,
                                              false, spdm_response_size,
                                              spdm_response,
                                              response_size, response);
    }
        return LIBSPDM_STATUS_SUCCESS;

    case 0x6: { /*correct ERROR message (busy) + correct CHALLENGE_AUTH message*/
        static size_t sub_index1 = 0;
        if (sub_index1 == 0) {
            spdm_error_response_t *spdm_response;
            size_t spdm_response_size;
            size_t transport_header_size;

            spdm_response_size = sizeof(spdm_error_response_t);
            transport_header_size = LIBSPDM_TEST_TRANSPORT_HEADER_SIZE;
            spdm_response = (void *)((uint8_t *)*response + transport_header_size);

            spdm_response->header.spdm_version =
                SPDM_MESSAGE_VERSION_11;
            spdm_response->header.request_response_code = SPDM_ERROR;
            spdm_response->header.param1 = SPDM_ERROR_CODE_BUSY;
            spdm_response->header.param2 = 0;

            libspdm_transport_test_encode_message(
                spdm_context, NULL, false, false,
                spdm_response_size, spdm_response,
                response_size, response);
            sub_index1++;
        } else if (sub_index1 == 1) {
            spdm_challenge_auth_response_t *spdm_response;
            void *data;
            size_t data_size;
            uint8_t *ptr;
            uint8_t hash_data[LIBSPDM_MAX_HASH_SIZE];
            size_t sig_size;
            size_t spdm_response_size;
            size_t transport_header_size;

            libspdm_read_responder_public_certificate_chain(
                m_libspdm_use_hash_algo, m_libspdm_use_asym_algo, &data,
                &data_size, NULL, NULL);
            ((libspdm_context_t *)spdm_context)
            ->local_context
            .local_cert_chain_provision_size[0] = data_size;
            ((libspdm_context_t *)spdm_context)
            ->local_context.local_cert_chain_provision[0] =
                data;
            ((libspdm_context_t *)spdm_context)
            ->connection_info.algorithm.base_asym_algo =
                m_libspdm_use_asym_algo;
            ((libspdm_context_t *)spdm_context)
            ->connection_info.algorithm.base_hash_algo =
                m_libspdm_use_hash_algo;
            spdm_response_size =
                sizeof(spdm_challenge_auth_response_t) +
                libspdm_get_hash_size(m_libspdm_use_hash_algo) +
                SPDM_NONCE_SIZE + 0 + sizeof(uint16_t) + 0 +
                libspdm_get_asym_signature_size(m_libspdm_use_asym_algo);
            transport_header_size = LIBSPDM_TEST_TRANSPORT_HEADER_SIZE;
            spdm_response = (void *)((uint8_t *)*response + transport_header_size);"|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\challenge.c|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\challenge.c|d0027de2823348b5afdcf1b5e68f7281
"spdm_response->header.spdm_version =
                SPDM_MESSAGE_VERSION_11;
            spdm_response->header.request_response_code =
                SPDM_CHALLENGE_AUTH;
            spdm_response->header.param1 = 0;
            spdm_response->header.param2 = (1 << 0);
            ptr = (void *)(spdm_response + 1);
            libspdm_hash_all(
                m_libspdm_use_hash_algo,
                ((libspdm_context_t *)spdm_context)
                ->local_context
                .local_cert_chain_provision[0],
                ((libspdm_context_t *)spdm_context)
                ->local_context
                .local_cert_chain_provision_size[0],
                ptr);
            free(data);
            ptr += libspdm_get_hash_size(m_libspdm_use_hash_algo);
            libspdm_get_random_number(SPDM_NONCE_SIZE, ptr);
            ptr += SPDM_NONCE_SIZE;
            /* libspdm_zero_mem (ptr, libspdm_get_hash_size (m_libspdm_use_hash_algo));
             * ptr += libspdm_get_hash_size (m_libspdm_use_hash_algo);*/
            *(uint16_t *)ptr = 0;
            ptr += sizeof(uint16_t);
            libspdm_copy_mem(&m_libspdm_local_buffer[m_libspdm_local_buffer_size],
                             sizeof(m_libspdm_local_buffer)
                             - (&m_libspdm_local_buffer[m_libspdm_local_buffer_size] -
                                m_libspdm_local_buffer),
                             spdm_response,
                             (size_t)ptr - (size_t)spdm_response);
            m_libspdm_local_buffer_size +=
                ((size_t)ptr - (size_t)spdm_response);
            libspdm_hash_all(m_libspdm_use_hash_algo, m_libspdm_local_buffer,
                             m_libspdm_local_buffer_size, hash_data);
            sig_size =
                libspdm_get_asym_signature_size(m_libspdm_use_asym_algo);
            libspdm_responder_data_sign(
#if LIBSPDM_HAL_PASS_SPDM_CONTEXT
                spdm_context,
#endif
                spdm_response->header.spdm_version << SPDM_VERSION_NUMBER_SHIFT_BIT,
                    SPDM_CHALLENGE_AUTH,
                    m_libspdm_use_asym_algo,
                    m_libspdm_use_hash_algo,
                    false, m_libspdm_local_buffer,
                    m_libspdm_local_buffer_size, ptr,
                    &sig_size);
            ptr += sig_size;

            libspdm_transport_test_encode_message(
                spdm_context, NULL, false, false, spdm_response_size,
                spdm_response, response_size, response);
        }
    }
        return LIBSPDM_STATUS_SUCCESS;

    case 0x7: { /*correct ERROR message (request resync)*/
        spdm_error_response_t *spdm_response;
        size_t spdm_response_size;
        size_t transport_header_size;

        spdm_response_size = sizeof(spdm_error_response_t);
        transport_header_size = LIBSPDM_TEST_TRANSPORT_HEADER_SIZE;
        spdm_response = (void *)((uint8_t *)*response + transport_header_size);

        spdm_response->header.spdm_version = SPDM_MESSAGE_VERSION_11;
        spdm_response->header.request_response_code = SPDM_ERROR;
        spdm_response->header.param1 = SPDM_ERROR_CODE_REQUEST_RESYNCH;
        spdm_response->header.param2 = 0;

        libspdm_transport_test_encode_message(spdm_context, NULL, false,
                                              false, spdm_response_size,
                                              spdm_response,
                                              response_size, response);
    }
        return LIBSPDM_STATUS_SUCCESS;

    case 0x8: { /*correct ERROR message (response net ready)*/
        spdm_error_response_data_response_not_ready_t *spdm_response;
        size_t spdm_response_size;
        size_t transport_header_size;

        spdm_response_size = sizeof(spdm_error_response_data_response_not_ready_t);
        transport_header_size = LIBSPDM_TEST_TRANSPORT_HEADER_SIZE;
        spdm_response = (void *)((uint8_t *)*response + transport_header_size);

        spdm_response->header.spdm_version = SPDM_MESSAGE_VERSION_11;
        spdm_response->header.request_response_code = SPDM_ERROR;
        spdm_response->header.param1 =
            SPDM_ERROR_CODE_RESPONSE_NOT_READY;
        spdm_response->header.param2 = 0;
        spdm_response->extend_error_data.rd_exponent = 1;
        spdm_response->extend_error_data.rd_tm = 2;
        spdm_response->extend_error_data.request_code = SPDM_CHALLENGE;
        spdm_response->extend_error_data.token = 0;

        libspdm_transport_test_encode_message(spdm_context, NULL, false,
                                              false, spdm_response_size,
                                              spdm_response,
                                              response_size, response);
    }
        return LIBSPDM_STATUS_SUCCESS;"|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\challenge.c|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\challenge.c|7a6c245740d24e34a7afa1dae337a7cb
"case 0x9: { /*correct ERROR message (response not ready) + correct CHALLENGE_AUTH message*/
        static size_t sub_index2 = 0;
        if (sub_index2 == 0) {
            spdm_error_response_data_response_not_ready_t
            *spdm_response;
            size_t spdm_response_size;
            size_t transport_header_size;

            spdm_response_size = sizeof(spdm_error_response_data_response_not_ready_t);
            transport_header_size = LIBSPDM_TEST_TRANSPORT_HEADER_SIZE;
            spdm_response = (void *)((uint8_t *)*response + transport_header_size);

            spdm_response->header.spdm_version =
                SPDM_MESSAGE_VERSION_11;
            spdm_response->header.request_response_code = SPDM_ERROR;
            spdm_response->header.param1 =
                SPDM_ERROR_CODE_RESPONSE_NOT_READY;
            spdm_response->header.param2 = 0;
            spdm_response->extend_error_data.rd_exponent = 1;
            spdm_response->extend_error_data.rd_tm = 2;
            spdm_response->extend_error_data.request_code =
                SPDM_CHALLENGE;
            spdm_response->extend_error_data.token = 1;

            libspdm_transport_test_encode_message(
                spdm_context, NULL, false, false,
                spdm_response_size, spdm_response,
                response_size, response);
            sub_index2++;
        } else if (sub_index2 == 1) {
            spdm_challenge_auth_response_t *spdm_response;
            void *data;
            size_t data_size;
            uint8_t *ptr;
            uint8_t hash_data[LIBSPDM_MAX_HASH_SIZE];
            size_t sig_size;
            size_t spdm_response_size;
            size_t transport_header_size;

            libspdm_read_responder_public_certificate_chain(
                m_libspdm_use_hash_algo, m_libspdm_use_asym_algo, &data,
                &data_size, NULL, NULL);
            ((libspdm_context_t *)spdm_context)
            ->local_context
            .local_cert_chain_provision_size[0] = data_size;
            ((libspdm_context_t *)spdm_context)
            ->local_context.local_cert_chain_provision[0] =
                data;
            ((libspdm_context_t *)spdm_context)
            ->connection_info.algorithm.base_asym_algo =
                m_libspdm_use_asym_algo;
            ((libspdm_context_t *)spdm_context)
            ->connection_info.algorithm.base_hash_algo =
                m_libspdm_use_hash_algo;
            spdm_response_size =
                sizeof(spdm_challenge_auth_response_t) +
                libspdm_get_hash_size(m_libspdm_use_hash_algo) +
                SPDM_NONCE_SIZE + 0 + sizeof(uint16_t) + 0 +
                libspdm_get_asym_signature_size(m_libspdm_use_asym_algo);
            transport_header_size = LIBSPDM_TEST_TRANSPORT_HEADER_SIZE;
            spdm_response = (void *)((uint8_t *)*response + transport_header_size);"|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\challenge.c|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\challenge.c|8cb2c70bf39642f2a3f154390a21279d
"spdm_response->header.spdm_version =
                SPDM_MESSAGE_VERSION_11;
            spdm_response->header.request_response_code =
                SPDM_CHALLENGE_AUTH;
            spdm_response->header.param1 = 0;
            spdm_response->header.param2 = (1 << 0);
            ptr = (void *)(spdm_response + 1);
            libspdm_hash_all(
                m_libspdm_use_hash_algo,
                ((libspdm_context_t *)spdm_context)
                ->local_context
                .local_cert_chain_provision[0],
                ((libspdm_context_t *)spdm_context)
                ->local_context
                .local_cert_chain_provision_size[0],
                ptr);
            free(data);
            ptr += libspdm_get_hash_size(m_libspdm_use_hash_algo);
            libspdm_get_random_number(SPDM_NONCE_SIZE, ptr);
            ptr += SPDM_NONCE_SIZE;
            /* libspdm_zero_mem (ptr, libspdm_get_hash_size (m_libspdm_use_hash_algo));
             * ptr += libspdm_get_hash_size (m_libspdm_use_hash_algo);*/
            *(uint16_t *)ptr = 0;
            ptr += sizeof(uint16_t);
            libspdm_copy_mem(&m_libspdm_local_buffer[m_libspdm_local_buffer_size],
                             sizeof(m_libspdm_local_buffer)
                             - (&m_libspdm_local_buffer[m_libspdm_local_buffer_size] -
                                m_libspdm_local_buffer),
                             spdm_response,
                             (size_t)ptr - (size_t)spdm_response);
            m_libspdm_local_buffer_size +=
                ((size_t)ptr - (size_t)spdm_response);
            libspdm_hash_all(m_libspdm_use_hash_algo, m_libspdm_local_buffer,
                             m_libspdm_local_buffer_size, hash_data);
            sig_size =
                libspdm_get_asym_signature_size(m_libspdm_use_asym_algo);
            libspdm_responder_data_sign(
#if LIBSPDM_HAL_PASS_SPDM_CONTEXT
                spdm_context,
#endif
                spdm_response->header.spdm_version << SPDM_VERSION_NUMBER_SHIFT_BIT,
                    SPDM_CHALLENGE_AUTH,
                    m_libspdm_use_asym_algo,
                    m_libspdm_use_hash_algo,
                    false, m_libspdm_local_buffer,
                    m_libspdm_local_buffer_size, ptr,
                    &sig_size);
            ptr += sig_size;

            libspdm_transport_test_encode_message(
                spdm_context, NULL, false, false, spdm_response_size,
                spdm_response, response_size, response);
        }
    }
        return LIBSPDM_STATUS_SUCCESS;

    case 0xA: /*correct CHALLENGE_AUTH message*/
    {
        spdm_challenge_auth_response_t  *spdm_response;
        void                          *data;
        size_t data_size;
        uint8_t                         *Ptr;
        uint8_t hash_data[LIBSPDM_MAX_HASH_SIZE];
        size_t sig_size;
        size_t spdm_response_size;
        size_t transport_header_size;

        libspdm_read_responder_public_certificate_chain (m_libspdm_use_hash_algo,
                                                         m_libspdm_use_asym_algo,
                                                         &data,
                                                         &data_size, NULL, NULL);
        ((libspdm_context_t*)spdm_context)->local_context.local_cert_chain_provision_size[0] =
            data_size;
        ((libspdm_context_t*)spdm_context)->local_context.local_cert_chain_provision[0] = data;
        ((libspdm_context_t*)spdm_context)->connection_info.algorithm.base_asym_algo =
            m_libspdm_use_asym_algo;
        ((libspdm_context_t*)spdm_context)->connection_info.algorithm.base_hash_algo =
            m_libspdm_use_hash_algo;
        spdm_response_size = sizeof(spdm_challenge_auth_response_t) +
                             libspdm_get_hash_size (m_libspdm_use_hash_algo) +
                             SPDM_NONCE_SIZE +
                             0 +
                             sizeof(uint16_t) + 0 +
                             libspdm_get_asym_signature_size (m_libspdm_use_asym_algo);
        transport_header_size = LIBSPDM_TEST_TRANSPORT_HEADER_SIZE;
        spdm_response = (void *)((uint8_t *)*response + transport_header_size);"|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\challenge.c|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\challenge.c|b2ad564f01f940e3a4ab37c5f7f555c4
"spdm_response->header.spdm_version = SPDM_MESSAGE_VERSION_11;
        spdm_response->header.request_response_code = SPDM_CHALLENGE_AUTH;
        spdm_response->header.param1 = 0;
        spdm_response->header.param2 = (1 << 0);
        Ptr = (void *)(spdm_response + 1);
        libspdm_hash_all (m_libspdm_use_hash_algo,
                          ((libspdm_context_t*)spdm_context)->local_context.local_cert_chain_provision[
                              0],
                          ((libspdm_context_t*)spdm_context)->local_context.local_cert_chain_provision_size[
                              0],
                          Ptr);
        free(data);
        Ptr += libspdm_get_hash_size (m_libspdm_use_hash_algo);
        libspdm_get_random_number (SPDM_NONCE_SIZE, Ptr);
        Ptr += SPDM_NONCE_SIZE;
        /* libspdm_zero_mem (Ptr, libspdm_get_hash_size (m_libspdm_use_hash_algo));
         * Ptr += libspdm_get_hash_size (m_libspdm_use_hash_algo);*/
        *(uint16_t *)Ptr = 0;
        Ptr += sizeof(uint16_t);
        libspdm_copy_mem(&m_libspdm_local_buffer[m_libspdm_local_buffer_size],
                         sizeof(m_libspdm_local_buffer) -
                         (&m_libspdm_local_buffer[m_libspdm_local_buffer_size] -
                          m_libspdm_local_buffer),
                         spdm_response,
                         (size_t)Ptr - (size_t)spdm_response);
        m_libspdm_local_buffer_size += ((size_t)Ptr - (size_t)spdm_response);
        libspdm_hash_all (m_libspdm_use_hash_algo, m_libspdm_local_buffer,
                          m_libspdm_local_buffer_size, hash_data);
        sig_size = libspdm_get_asym_signature_size (m_libspdm_use_asym_algo);
        libspdm_responder_data_sign(
#if LIBSPDM_HAL_PASS_SPDM_CONTEXT
            spdm_context,
#endif
            spdm_response->header.spdm_version << SPDM_VERSION_NUMBER_SHIFT_BIT,
                SPDM_CHALLENGE_AUTH,
                m_libspdm_use_asym_algo, m_libspdm_use_hash_algo, false, m_libspdm_local_buffer,
                m_libspdm_local_buffer_size, Ptr, &sig_size);
        Ptr += sig_size;

        libspdm_transport_test_encode_message (spdm_context, NULL, false, false, spdm_response_size,
                                               spdm_response, response_size, response);
    }
        return LIBSPDM_STATUS_SUCCESS;

    case 0xB: /*CHALLENGE_AUTH message smaller than a SPDM header*/
    {
        spdm_challenge_auth_response_t  *spdm_response;
        size_t spdm_response_size;
        size_t transport_header_size;

        transport_header_size = LIBSPDM_TEST_TRANSPORT_HEADER_SIZE;
        spdm_response = (void *)((uint8_t *)*response + transport_header_size);
        spdm_response_size = sizeof(spdm_challenge_auth_response_t) - 1; /*smaller than standard message size*/

        spdm_response->header.spdm_version = SPDM_MESSAGE_VERSION_11;
        spdm_response->header.request_response_code = SPDM_CHALLENGE_AUTH;
        spdm_response->header.param1 = 0;
        spdm_response->header.param2 = (1 << 0);

        libspdm_transport_test_encode_message (spdm_context, NULL, false, false, spdm_response_size,
                                               spdm_response, response_size, response);
    }
        return LIBSPDM_STATUS_SUCCESS;

    case 0xC: /*CHALLENGE_AUTH message with wrong version (1.0)*/
    {
        spdm_challenge_auth_response_t  *spdm_response;
        void                          *data;
        size_t data_size;
        uint8_t                         *Ptr;
        uint8_t hash_data[LIBSPDM_MAX_HASH_SIZE];
        size_t sig_size;
        size_t spdm_response_size;
        size_t transport_header_size;"|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\challenge.c|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\challenge.c|ef06e57abaa24e0d9f8784fd154939d2
"libspdm_read_responder_public_certificate_chain (m_libspdm_use_hash_algo,
                                                         m_libspdm_use_asym_algo,
                                                         &data,
                                                         &data_size, NULL, NULL);
        ((libspdm_context_t*)spdm_context)->local_context.local_cert_chain_provision_size[0] =
            data_size;
        ((libspdm_context_t*)spdm_context)->local_context.local_cert_chain_provision[0] = data;
        ((libspdm_context_t*)spdm_context)->connection_info.algorithm.base_asym_algo =
            m_libspdm_use_asym_algo;
        ((libspdm_context_t*)spdm_context)->connection_info.algorithm.base_hash_algo =
            m_libspdm_use_hash_algo;
        spdm_response_size = sizeof(spdm_challenge_auth_response_t) +
                             libspdm_get_hash_size (m_libspdm_use_hash_algo) +
                             SPDM_NONCE_SIZE +
                             libspdm_get_hash_size (m_libspdm_use_hash_algo) +
                             sizeof(uint16_t) + 0 +
                             libspdm_get_asym_signature_size (m_libspdm_use_asym_algo);
        transport_header_size = LIBSPDM_TEST_TRANSPORT_HEADER_SIZE;
        spdm_response = (void *)((uint8_t *)*response + transport_header_size);

        spdm_response->header.spdm_version = SPDM_MESSAGE_VERSION_10; /*wrong version*/
        spdm_response->header.request_response_code = SPDM_CHALLENGE_AUTH;
        spdm_response->header.param1 = 0;
        spdm_response->header.param2 = (1 << 0);
        Ptr = (void *)(spdm_response + 1);
        libspdm_hash_all (m_libspdm_use_hash_algo,
                          ((libspdm_context_t*)spdm_context)->local_context.local_cert_chain_provision[
                              0],
                          ((libspdm_context_t*)spdm_context)->local_context.local_cert_chain_provision_size[
                              0],
                          Ptr);
        free(data);
        Ptr += libspdm_get_hash_size (m_libspdm_use_hash_algo);
        libspdm_get_random_number (SPDM_NONCE_SIZE, Ptr);
        Ptr += SPDM_NONCE_SIZE;
        /* libspdm_zero_mem (Ptr, libspdm_get_hash_size (m_libspdm_use_hash_algo));
         * Ptr += libspdm_get_hash_size (m_libspdm_use_hash_algo);*/
        *(uint16_t *)Ptr = 0;
        Ptr += sizeof(uint16_t);
        libspdm_copy_mem(&m_libspdm_local_buffer[m_libspdm_local_buffer_size],
                         sizeof(m_libspdm_local_buffer) -
                         (&m_libspdm_local_buffer[m_libspdm_local_buffer_size] -
                          m_libspdm_local_buffer),
                         spdm_response,
                         (size_t)Ptr - (size_t)spdm_response);
        m_libspdm_local_buffer_size += ((size_t)Ptr - (size_t)spdm_response);
        libspdm_hash_all (m_libspdm_use_hash_algo, m_libspdm_local_buffer,
                          m_libspdm_local_buffer_size, hash_data);
        sig_size = libspdm_get_asym_signature_size (m_libspdm_use_asym_algo);
        libspdm_responder_data_sign(
#if LIBSPDM_HAL_PASS_SPDM_CONTEXT
            spdm_context,
#endif
            spdm_response->header.spdm_version << SPDM_VERSION_NUMBER_SHIFT_BIT,
                SPDM_CHALLENGE_AUTH,
                m_libspdm_use_asym_algo, m_libspdm_use_hash_algo, false, m_libspdm_local_buffer,
                m_libspdm_local_buffer_size, Ptr, &sig_size);
        Ptr += sig_size;

        libspdm_transport_test_encode_message (spdm_context, NULL, false, false, spdm_response_size,
                                               spdm_response, response_size, response);
    }
        return LIBSPDM_STATUS_SUCCESS;

    case 0xD: /*SPDM (mostly CHALLENGE_AUTH) message with wrong response code (0x83)*/
    {
        spdm_challenge_auth_response_t  *spdm_response;
        void                          *data;
        size_t data_size;
        uint8_t                         *Ptr;
        uint8_t hash_data[LIBSPDM_MAX_HASH_SIZE];
        size_t sig_size;
        size_t spdm_response_size;
        size_t transport_header_size;"|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\challenge.c|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\challenge.c|f65a2c53281c490f9f65cb72f7d5aea6
"libspdm_read_responder_public_certificate_chain (m_libspdm_use_hash_algo,
                                                         m_libspdm_use_asym_algo,
                                                         &data,
                                                         &data_size, NULL, NULL);
        ((libspdm_context_t*)spdm_context)->local_context.local_cert_chain_provision_size[0] =
            data_size;
        ((libspdm_context_t*)spdm_context)->local_context.local_cert_chain_provision[0] = data;
        ((libspdm_context_t*)spdm_context)->connection_info.algorithm.base_asym_algo =
            m_libspdm_use_asym_algo;
        ((libspdm_context_t*)spdm_context)->connection_info.algorithm.base_hash_algo =
            m_libspdm_use_hash_algo;
        spdm_response_size = sizeof(spdm_challenge_auth_response_t) +
                             libspdm_get_hash_size (m_libspdm_use_hash_algo) +
                             SPDM_NONCE_SIZE +
                             0 +
                             sizeof(uint16_t) + 0 +
                             libspdm_get_asym_signature_size (m_libspdm_use_asym_algo);
        transport_header_size = LIBSPDM_TEST_TRANSPORT_HEADER_SIZE;
        spdm_response = (void *)((uint8_t *)*response + transport_header_size);

        spdm_response->header.spdm_version = SPDM_MESSAGE_VERSION_11;
        spdm_response->header.request_response_code = SPDM_CHALLENGE; /*wrong response code*/
        spdm_response->header.param1 = 0;
        spdm_response->header.param2 = (1 << 0);
        Ptr = (void *)(spdm_response + 1);
        libspdm_hash_all (m_libspdm_use_hash_algo,
                          ((libspdm_context_t*)spdm_context)->local_context.local_cert_chain_provision[
                              0],
                          ((libspdm_context_t*)spdm_context)->local_context.local_cert_chain_provision_size[
                              0],
                          Ptr);
        free(data);
        Ptr += libspdm_get_hash_size (m_libspdm_use_hash_algo);
        libspdm_get_random_number (SPDM_NONCE_SIZE, Ptr);
        Ptr += SPDM_NONCE_SIZE;
        /* libspdm_zero_mem (Ptr, libspdm_get_hash_size (m_libspdm_use_hash_algo));
         * Ptr += libspdm_get_hash_size (m_libspdm_use_hash_algo);*/
        *(uint16_t *)Ptr = 0;
        Ptr += sizeof(uint16_t);
        libspdm_copy_mem(&m_libspdm_local_buffer[m_libspdm_local_buffer_size],
                         sizeof(m_libspdm_local_buffer) -
                         (&m_libspdm_local_buffer[m_libspdm_local_buffer_size] -
                          m_libspdm_local_buffer),
                         spdm_response,
                         (size_t)Ptr - (size_t)spdm_response);
        m_libspdm_local_buffer_size += ((size_t)Ptr - (size_t)spdm_response);
        libspdm_hash_all (m_libspdm_use_hash_algo, m_libspdm_local_buffer,
                          m_libspdm_local_buffer_size, hash_data);
        sig_size = libspdm_get_asym_signature_size (m_libspdm_use_asym_algo);
        libspdm_responder_data_sign(
#if LIBSPDM_HAL_PASS_SPDM_CONTEXT
            spdm_context,
#endif
            spdm_response->header.spdm_version << SPDM_VERSION_NUMBER_SHIFT_BIT,
                SPDM_CHALLENGE_AUTH,
                m_libspdm_use_asym_algo, m_libspdm_use_hash_algo, false, m_libspdm_local_buffer,
                m_libspdm_local_buffer_size, Ptr, &sig_size);
        Ptr += sig_size;

        libspdm_transport_test_encode_message (spdm_context, NULL, false, false, spdm_response_size,
                                               spdm_response, response_size, response);
    }
        return LIBSPDM_STATUS_SUCCESS;

    case 0xE: /*correct CHALLENGE_AUTH message with wrong slot number*/
    {
        spdm_challenge_auth_response_t  *spdm_response;
        void                          *data;
        size_t data_size;
        uint8_t                         *Ptr;
        uint8_t hash_data[LIBSPDM_MAX_HASH_SIZE];
        size_t sig_size;
        size_t spdm_response_size;
        size_t transport_header_size;"|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\challenge.c|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\challenge.c|2c993d7d1ffb4dd380d3e4ce52982f1a
"libspdm_read_responder_public_certificate_chain (m_libspdm_use_hash_algo,
                                                         m_libspdm_use_asym_algo,
                                                         &data,
                                                         &data_size, NULL, NULL);
        ((libspdm_context_t*)spdm_context)->local_context.local_cert_chain_provision_size[0] =
            data_size;
        ((libspdm_context_t*)spdm_context)->local_context.local_cert_chain_provision[0] = data;
        ((libspdm_context_t*)spdm_context)->connection_info.algorithm.base_asym_algo =
            m_libspdm_use_asym_algo;
        ((libspdm_context_t*)spdm_context)->connection_info.algorithm.base_hash_algo =
            m_libspdm_use_hash_algo;
        spdm_response_size = sizeof(spdm_challenge_auth_response_t) +
                             libspdm_get_hash_size (m_libspdm_use_hash_algo) +
                             SPDM_NONCE_SIZE +
                             0 +
                             sizeof(uint16_t) + 0 +
                             libspdm_get_asym_signature_size (m_libspdm_use_asym_algo);
        transport_header_size = LIBSPDM_TEST_TRANSPORT_HEADER_SIZE;
        spdm_response = (void *)((uint8_t *)*response + transport_header_size);

        spdm_response->header.spdm_version = SPDM_MESSAGE_VERSION_11;
        spdm_response->header.request_response_code = SPDM_CHALLENGE_AUTH;
        spdm_response->header.param1 = 1;
        spdm_response->header.param2 = (1 << 1); /*wrong slot number*/
        Ptr = (void *)(spdm_response + 1);
        libspdm_hash_all (m_libspdm_use_hash_algo,
                          ((libspdm_context_t*)spdm_context)->local_context.local_cert_chain_provision[
                              0],
                          ((libspdm_context_t*)spdm_context)->local_context.local_cert_chain_provision_size[
                              0],
                          Ptr);
        free(data);
        Ptr += libspdm_get_hash_size (m_libspdm_use_hash_algo);
        libspdm_get_random_number (SPDM_NONCE_SIZE, Ptr);
        Ptr += SPDM_NONCE_SIZE;
        /* libspdm_zero_mem (Ptr, libspdm_get_hash_size (m_libspdm_use_hash_algo));
         * Ptr += libspdm_get_hash_size (m_libspdm_use_hash_algo);*/
        *(uint16_t *)Ptr = 0;
        Ptr += sizeof(uint16_t);
        libspdm_copy_mem(&m_libspdm_local_buffer[m_libspdm_local_buffer_size],
                         sizeof(m_libspdm_local_buffer) -
                         (&m_libspdm_local_buffer[m_libspdm_local_buffer_size] -
                          m_libspdm_local_buffer),
                         spdm_response,
                         (size_t)Ptr - (size_t)spdm_response);
        m_libspdm_local_buffer_size += ((size_t)Ptr - (size_t)spdm_response);
        libspdm_hash_all (m_libspdm_use_hash_algo, m_libspdm_local_buffer,
                          m_libspdm_local_buffer_size, hash_data);
        sig_size = libspdm_get_asym_signature_size (m_libspdm_use_asym_algo);
        libspdm_responder_data_sign(
#if LIBSPDM_HAL_PASS_SPDM_CONTEXT
            spdm_context,
#endif
            spdm_response->header.spdm_version << SPDM_VERSION_NUMBER_SHIFT_BIT,
                SPDM_CHALLENGE_AUTH,
                m_libspdm_use_asym_algo, m_libspdm_use_hash_algo, false, m_libspdm_local_buffer,
                m_libspdm_local_buffer_size, Ptr, &sig_size);
        Ptr += sig_size;

        libspdm_transport_test_encode_message (spdm_context, NULL, false, false, spdm_response_size,
                                               spdm_response, response_size, response);
    }
        return LIBSPDM_STATUS_SUCCESS;

    case 0xF: /*CHALLENGE_AUTH message with slot number overflow*/
    {
        spdm_challenge_auth_response_t  *spdm_response;
        void                          *data;
        size_t data_size;
        uint8_t                         *Ptr;
        uint8_t hash_data[LIBSPDM_MAX_HASH_SIZE];
        size_t sig_size;
        size_t spdm_response_size;
        size_t transport_header_size;"|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\challenge.c|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\challenge.c|0f84e4b7c8e04f398b93ff6fde580c27
"libspdm_read_responder_public_certificate_chain (m_libspdm_use_hash_algo,
                                                         m_libspdm_use_asym_algo,
                                                         &data,
                                                         &data_size, NULL, NULL);
        ((libspdm_context_t*)spdm_context)->local_context.local_cert_chain_provision_size[0] =
            data_size;
        ((libspdm_context_t*)spdm_context)->local_context.local_cert_chain_provision[0] = data;
        ((libspdm_context_t*)spdm_context)->connection_info.algorithm.base_asym_algo =
            m_libspdm_use_asym_algo;
        ((libspdm_context_t*)spdm_context)->connection_info.algorithm.base_hash_algo =
            m_libspdm_use_hash_algo;
        spdm_response_size = sizeof(spdm_challenge_auth_response_t) +
                             libspdm_get_hash_size (m_libspdm_use_hash_algo) +
                             SPDM_NONCE_SIZE +
                             0 +
                             sizeof(uint16_t) + 0 +
                             libspdm_get_asym_signature_size (m_libspdm_use_asym_algo);
        transport_header_size = LIBSPDM_TEST_TRANSPORT_HEADER_SIZE;
        spdm_response = (void *)((uint8_t *)*response + transport_header_size);

        spdm_response->header.spdm_version = SPDM_MESSAGE_VERSION_11;
        spdm_response->header.request_response_code = SPDM_CHALLENGE_AUTH;
        spdm_response->header.param1 = 8; /*slot number overflow*/
        spdm_response->header.param2 = (1 << 0);
        Ptr = (void *)(spdm_response + 1);
        libspdm_hash_all (m_libspdm_use_hash_algo,
                          ((libspdm_context_t*)spdm_context)->local_context.local_cert_chain_provision[
                              0],
                          ((libspdm_context_t*)spdm_context)->local_context.local_cert_chain_provision_size[
                              0],
                          Ptr);
        free(data);
        Ptr += libspdm_get_hash_size (m_libspdm_use_hash_algo);
        libspdm_get_random_number (SPDM_NONCE_SIZE, Ptr);
        Ptr += SPDM_NONCE_SIZE;
        /* libspdm_zero_mem (Ptr, libspdm_get_hash_size (m_libspdm_use_hash_algo));
         * Ptr += libspdm_get_hash_size (m_libspdm_use_hash_algo);*/
        *(uint16_t *)Ptr = 0;
        Ptr += sizeof(uint16_t);
        libspdm_copy_mem(&m_libspdm_local_buffer[m_libspdm_local_buffer_size],
                         sizeof(m_libspdm_local_buffer) -
                         (&m_libspdm_local_buffer[m_libspdm_local_buffer_size] -
                          m_libspdm_local_buffer),
                         spdm_response,
                         (size_t)Ptr - (size_t)spdm_response);
        m_libspdm_local_buffer_size += ((size_t)Ptr - (size_t)spdm_response);
        libspdm_hash_all (m_libspdm_use_hash_algo, m_libspdm_local_buffer,
                          m_libspdm_local_buffer_size, hash_data);
        sig_size = libspdm_get_asym_signature_size (m_libspdm_use_asym_algo);
        libspdm_responder_data_sign(
#if LIBSPDM_HAL_PASS_SPDM_CONTEXT
            spdm_context,
#endif
            spdm_response->header.spdm_version << SPDM_VERSION_NUMBER_SHIFT_BIT,
                SPDM_CHALLENGE_AUTH,
                m_libspdm_use_asym_algo, m_libspdm_use_hash_algo, false, m_libspdm_local_buffer,
                m_libspdm_local_buffer_size, Ptr, &sig_size);
        Ptr += sig_size;

        libspdm_transport_test_encode_message (spdm_context, NULL, false, false, spdm_response_size,
                                               spdm_response, response_size, response);
    }
        return LIBSPDM_STATUS_SUCCESS;

    case 0x10: /*correct CHALLENGE_AUTH message with ""libspdm"" opaque data*/
    {
        spdm_challenge_auth_response_t  *spdm_response;
        void                          *data;
        size_t data_size;
        uint8_t                         *Ptr;
        uint8_t hash_data[LIBSPDM_MAX_HASH_SIZE];
        size_t sig_size;
        size_t spdm_response_size;
        size_t transport_header_size;"|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\challenge.c|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\challenge.c|b85ffcf442ec4e87a13646362d437d87
"libspdm_read_responder_public_certificate_chain (m_libspdm_use_hash_algo,
                                                         m_libspdm_use_asym_algo,
                                                         &data,
                                                         &data_size, NULL, NULL);
        ((libspdm_context_t*)spdm_context)->local_context.local_cert_chain_provision_size[0] =
            data_size;
        ((libspdm_context_t*)spdm_context)->local_context.local_cert_chain_provision[0] = data;
        ((libspdm_context_t*)spdm_context)->connection_info.algorithm.base_asym_algo =
            m_libspdm_use_asym_algo;
        ((libspdm_context_t*)spdm_context)->connection_info.algorithm.base_hash_algo =
            m_libspdm_use_hash_algo;
        spdm_response_size = sizeof(spdm_challenge_auth_response_t) +
                             libspdm_get_hash_size (m_libspdm_use_hash_algo) +
                             SPDM_NONCE_SIZE +
                             0 +
                             sizeof(uint16_t) + 8 +
                             libspdm_get_asym_signature_size (m_libspdm_use_asym_algo);
        transport_header_size = LIBSPDM_TEST_TRANSPORT_HEADER_SIZE;
        spdm_response = (void *)((uint8_t *)*response + transport_header_size);

        spdm_response->header.spdm_version = SPDM_MESSAGE_VERSION_11;
        spdm_response->header.request_response_code = SPDM_CHALLENGE_AUTH;
        spdm_response->header.param1 = 0;
        spdm_response->header.param2 = (1 << 0);
        Ptr = (void *)(spdm_response + 1);
        libspdm_hash_all (m_libspdm_use_hash_algo,
                          ((libspdm_context_t*)spdm_context)->local_context.local_cert_chain_provision[
                              0],
                          ((libspdm_context_t*)spdm_context)->local_context.local_cert_chain_provision_size[
                              0],
                          Ptr);
        free(data);
        Ptr += libspdm_get_hash_size (m_libspdm_use_hash_algo);
        libspdm_get_random_number (SPDM_NONCE_SIZE, Ptr);
        Ptr += SPDM_NONCE_SIZE;
        /* libspdm_zero_mem (Ptr, libspdm_get_hash_size (m_libspdm_use_hash_algo));
         * Ptr += libspdm_get_hash_size (m_libspdm_use_hash_algo);*/
        *(uint16_t *)Ptr = (uint16_t)strlen(""libspdm"");
        Ptr += sizeof(uint16_t);
        libspdm_copy_mem(Ptr, (size_t)(*response) + *response_size - (size_t)Ptr, ""libspdm"",
                         strlen(""libspdm""));
        Ptr += strlen(""libspdm"");
        libspdm_copy_mem(&m_libspdm_local_buffer[m_libspdm_local_buffer_size],
                         sizeof(m_libspdm_local_buffer) -
                         (&m_libspdm_local_buffer[m_libspdm_local_buffer_size] -
                          m_libspdm_local_buffer),
                         spdm_response,
                         (size_t)Ptr - (size_t)spdm_response);
        m_libspdm_local_buffer_size += ((size_t)Ptr - (size_t)spdm_response);
        libspdm_hash_all (m_libspdm_use_hash_algo, m_libspdm_local_buffer,
                          m_libspdm_local_buffer_size, hash_data);
        sig_size = libspdm_get_asym_signature_size (m_libspdm_use_asym_algo);
        libspdm_responder_data_sign(
#if LIBSPDM_HAL_PASS_SPDM_CONTEXT
            spdm_context,
#endif
            spdm_response->header.spdm_version << SPDM_VERSION_NUMBER_SHIFT_BIT,
                SPDM_CHALLENGE_AUTH,
                m_libspdm_use_asym_algo, m_libspdm_use_hash_algo, false, m_libspdm_local_buffer,
                m_libspdm_local_buffer_size, Ptr, &sig_size);
        Ptr += sig_size;

        libspdm_transport_test_encode_message (spdm_context, NULL, false, false, spdm_response_size,
                                               spdm_response, response_size, response);
    }
        return LIBSPDM_STATUS_SUCCESS;

    case 0x11: /*correct CHALLENGE_AUTH message with invalid signature*/
    {
        spdm_challenge_auth_response_t  *spdm_response;
        void                          *data;
        size_t data_size;
        uint8_t                         *Ptr;
        uint8_t hash_data[LIBSPDM_MAX_HASH_SIZE];
        size_t sig_size;
        size_t spdm_response_size;
        size_t transport_header_size;"|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\challenge.c|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\challenge.c|109c5df6766c434f921f99148e0ac1d4
"libspdm_read_responder_public_certificate_chain (m_libspdm_use_hash_algo,
                                                         m_libspdm_use_asym_algo,
                                                         &data,
                                                         &data_size, NULL, NULL);
        ((libspdm_context_t*)spdm_context)->local_context.local_cert_chain_provision_size[0] =
            data_size;
        ((libspdm_context_t*)spdm_context)->local_context.local_cert_chain_provision[0] = data;
        ((libspdm_context_t*)spdm_context)->connection_info.algorithm.base_asym_algo =
            m_libspdm_use_asym_algo;
        ((libspdm_context_t*)spdm_context)->connection_info.algorithm.base_hash_algo =
            m_libspdm_use_hash_algo;
        spdm_response_size = sizeof(spdm_challenge_auth_response_t) +
                             libspdm_get_hash_size (m_libspdm_use_hash_algo) +
                             SPDM_NONCE_SIZE +
                             0 +
                             sizeof(uint16_t) + 0 +
                             libspdm_get_asym_signature_size (m_libspdm_use_asym_algo);
        transport_header_size = LIBSPDM_TEST_TRANSPORT_HEADER_SIZE;
        spdm_response = (void *)((uint8_t *)*response + transport_header_size);

        spdm_response->header.spdm_version = SPDM_MESSAGE_VERSION_11;
        spdm_response->header.request_response_code = SPDM_CHALLENGE_AUTH;
        spdm_response->header.param1 = 0;
        spdm_response->header.param2 = (1 << 0);
        Ptr = (void *)(spdm_response + 1);
        libspdm_hash_all (m_libspdm_use_hash_algo,
                          ((libspdm_context_t*)spdm_context)->local_context.local_cert_chain_provision[
                              0],
                          ((libspdm_context_t*)spdm_context)->local_context.local_cert_chain_provision_size[
                              0],
                          Ptr);
        free(data);
        Ptr += libspdm_get_hash_size (m_libspdm_use_hash_algo);
        libspdm_get_random_number (SPDM_NONCE_SIZE, Ptr);
        Ptr += SPDM_NONCE_SIZE;
        /* libspdm_zero_mem (Ptr, libspdm_get_hash_size (m_libspdm_use_hash_algo));
         * Ptr += libspdm_get_hash_size (m_libspdm_use_hash_algo);*/
        *(uint16_t *)Ptr = 0;
        Ptr += sizeof(uint16_t);
        libspdm_copy_mem(&m_libspdm_local_buffer[m_libspdm_local_buffer_size],
                         sizeof(m_libspdm_local_buffer) -
                         (&m_libspdm_local_buffer[m_libspdm_local_buffer_size] -
                          m_libspdm_local_buffer),
                         spdm_response,
                         (size_t)Ptr - (size_t)spdm_response);
        m_libspdm_local_buffer_size += ((size_t)Ptr - (size_t)spdm_response);
        libspdm_hash_all (m_libspdm_use_hash_algo, m_libspdm_local_buffer,
                          m_libspdm_local_buffer_size, hash_data);
        libspdm_hash_all (m_libspdm_use_hash_algo, hash_data, libspdm_get_hash_size (
                              m_libspdm_use_hash_algo), hash_data);
        sig_size = libspdm_get_asym_signature_size (m_libspdm_use_asym_algo);
        libspdm_responder_data_sign(
#if LIBSPDM_HAL_PASS_SPDM_CONTEXT
            spdm_context,
#endif
            spdm_response->header.spdm_version << SPDM_VERSION_NUMBER_SHIFT_BIT,
                SPDM_CHALLENGE_AUTH,
                m_libspdm_use_asym_algo, m_libspdm_use_hash_algo, false, hash_data, libspdm_get_hash_size (
                m_libspdm_use_hash_algo), Ptr, &sig_size);
        Ptr += sig_size;

        libspdm_transport_test_encode_message (spdm_context, NULL, false, false, spdm_response_size,
                                               spdm_response, response_size, response);
    }
        return LIBSPDM_STATUS_SUCCESS;

    case 0x12: /*correct CHALLENGE_AUTH message*/
    case 0x13: /*correct CHALLENGE_AUTH message*/
    {
        spdm_challenge_auth_response_t  *spdm_response;
        void                          *data;
        size_t data_size;
        uint8_t                         *Ptr;
        uint8_t hash_data[LIBSPDM_MAX_HASH_SIZE];
        size_t sig_size;
        size_t spdm_response_size;
        size_t transport_header_size;"|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\challenge.c|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\challenge.c|cdbac289b630450b80d4c8dd9fe677f9
"libspdm_read_responder_public_certificate_chain (m_libspdm_use_hash_algo,
                                                         m_libspdm_use_asym_algo,
                                                         &data,
                                                         &data_size, NULL, NULL);
        ((libspdm_context_t*)spdm_context)->local_context.local_cert_chain_provision_size[0] =
            data_size;
        ((libspdm_context_t*)spdm_context)->local_context.local_cert_chain_provision[0] = data;
        ((libspdm_context_t*)spdm_context)->connection_info.algorithm.base_asym_algo =
            m_libspdm_use_asym_algo;
        ((libspdm_context_t*)spdm_context)->connection_info.algorithm.base_hash_algo =
            m_libspdm_use_hash_algo;
        spdm_response_size = sizeof(spdm_challenge_auth_response_t) +
                             libspdm_get_hash_size (m_libspdm_use_hash_algo) +
                             SPDM_NONCE_SIZE +
                             libspdm_get_hash_size (m_libspdm_use_hash_algo) +
                             sizeof(uint16_t) + 0 +
                             libspdm_get_asym_signature_size (m_libspdm_use_asym_algo);
        transport_header_size = LIBSPDM_TEST_TRANSPORT_HEADER_SIZE;
        spdm_response = (void *)((uint8_t *)*response + transport_header_size);

        spdm_response->header.spdm_version = SPDM_MESSAGE_VERSION_11;
        spdm_response->header.request_response_code = SPDM_CHALLENGE_AUTH;
        spdm_response->header.param1 = 0;
        spdm_response->header.param2 = (1 << 0);
        Ptr = (void *)(spdm_response + 1);
        libspdm_hash_all (m_libspdm_use_hash_algo,
                          ((libspdm_context_t*)spdm_context)->local_context.local_cert_chain_provision[
                              0],
                          ((libspdm_context_t*)spdm_context)->local_context.local_cert_chain_provision_size[
                              0],
                          Ptr);
        free(data);
        Ptr += libspdm_get_hash_size (m_libspdm_use_hash_algo);
        libspdm_get_random_number (SPDM_NONCE_SIZE, Ptr);
        Ptr += SPDM_NONCE_SIZE;
        libspdm_zero_mem (Ptr, libspdm_get_hash_size (m_libspdm_use_hash_algo));
        Ptr += libspdm_get_hash_size (m_libspdm_use_hash_algo);
        *(uint16_t *)Ptr = 0;
        Ptr += sizeof(uint16_t);
        libspdm_copy_mem(&m_libspdm_local_buffer[m_libspdm_local_buffer_size],
                         sizeof(m_libspdm_local_buffer) -
                         (&m_libspdm_local_buffer[m_libspdm_local_buffer_size] -
                          m_libspdm_local_buffer),
                         spdm_response,
                         (size_t)Ptr - (size_t)spdm_response);
        m_libspdm_local_buffer_size += ((size_t)Ptr - (size_t)spdm_response);
        libspdm_hash_all (m_libspdm_use_hash_algo, m_libspdm_local_buffer,
                          m_libspdm_local_buffer_size, hash_data);
        sig_size = libspdm_get_asym_signature_size (m_libspdm_use_asym_algo);
        libspdm_responder_data_sign(
#if LIBSPDM_HAL_PASS_SPDM_CONTEXT
            spdm_context,
#endif
            spdm_response->header.spdm_version << SPDM_VERSION_NUMBER_SHIFT_BIT,
                SPDM_CHALLENGE_AUTH,
                m_libspdm_use_asym_algo, m_libspdm_use_hash_algo, false, m_libspdm_local_buffer,
                m_libspdm_local_buffer_size, Ptr, &sig_size);
        Ptr += sig_size;

        libspdm_transport_test_encode_message (spdm_context, NULL, false, false, spdm_response_size,
                                               spdm_response, response_size, response);
    }
        return LIBSPDM_STATUS_SUCCESS;

    case 0x14:
    {
        static uint16_t error_code = LIBSPDM_ERROR_CODE_RESERVED_00;

        spdm_error_response_t *spdm_response;
        size_t spdm_response_size;
        size_t transport_header_size;

        if(error_code <= 0xff) {
            spdm_response_size = sizeof(spdm_error_response_t);
            transport_header_size = LIBSPDM_TEST_TRANSPORT_HEADER_SIZE;
            spdm_response = (void *)((uint8_t *)*response + transport_header_size);

            spdm_response->header.spdm_version = SPDM_MESSAGE_VERSION_11;
            spdm_response->header.request_response_code = SPDM_ERROR;
            spdm_response->header.param1 = (uint8_t) error_code;
            spdm_response->header.param2 = 0;

            libspdm_transport_test_encode_message (spdm_context, NULL, false, false,
                                                   spdm_response_size, spdm_response,
                                                   response_size, response);
        }"|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\challenge.c|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\challenge.c|a3d448023b6d492da7a36d6a0c7f0178
"error_code++;
        if(error_code == SPDM_ERROR_CODE_BUSY) { /*busy is treated in cases 5 and 6*/
            error_code = SPDM_ERROR_CODE_UNEXPECTED_REQUEST;
        }
        if(error_code == LIBSPDM_ERROR_CODE_RESERVED_0D) { /*skip some reserved error codes (0d to 3e)*/
            error_code = LIBSPDM_ERROR_CODE_RESERVED_3F;
        }
        if(error_code == SPDM_ERROR_CODE_RESPONSE_NOT_READY) { /*skip response not ready, request resync, and some reserved codes (44 to fc)*/
            error_code = LIBSPDM_ERROR_CODE_RESERVED_FD;
        }
    }
        return LIBSPDM_STATUS_SUCCESS;

    case 0x15: /*correct CHALLENGE_AUTH message with multiple slot numbers */
    {
        spdm_challenge_auth_response_t  *spdm_response;
        void                          *data;
        size_t data_size;
        uint8_t                       *ptr;
        uint8_t hash_data[LIBSPDM_MAX_HASH_SIZE];
        size_t sig_size;
        size_t spdm_response_size;
        size_t transport_header_size;

        libspdm_read_responder_public_certificate_chain (m_libspdm_use_hash_algo,
                                                         m_libspdm_use_asym_algo,
                                                         &data,
                                                         &data_size, NULL, NULL);
        ((libspdm_context_t*)spdm_context)->local_context.local_cert_chain_provision_size[0] =
            data_size;
        ((libspdm_context_t*)spdm_context)->local_context.local_cert_chain_provision[0] = data;
        ((libspdm_context_t*)spdm_context)->connection_info.algorithm.base_asym_algo =
            m_libspdm_use_asym_algo;
        ((libspdm_context_t*)spdm_context)->connection_info.algorithm.base_hash_algo =
            m_libspdm_use_hash_algo;
        spdm_response_size = sizeof(spdm_challenge_auth_response_t) +
                             libspdm_get_hash_size (m_libspdm_use_hash_algo) +
                             SPDM_NONCE_SIZE +
                             0 +
                             sizeof(uint16_t) + 0 +
                             libspdm_get_asym_signature_size (m_libspdm_use_asym_algo);
        transport_header_size = LIBSPDM_TEST_TRANSPORT_HEADER_SIZE;
        spdm_response = (void *)((uint8_t *)*response + transport_header_size);

        spdm_response->header.spdm_version = SPDM_MESSAGE_VERSION_11;
        spdm_response->header.request_response_code = SPDM_CHALLENGE_AUTH;
        spdm_response->header.param1 = 0;
        spdm_response->header.param2 = 0x71; /*multiple slot numbers */
        ptr = (void *)(spdm_response + 1);
        libspdm_hash_all (m_libspdm_use_hash_algo,
                          ((libspdm_context_t*)spdm_context)->local_context.local_cert_chain_provision[
                              0],
                          ((libspdm_context_t*)spdm_context)->local_context.local_cert_chain_provision_size[
                              0],
                          ptr);
        free(data);
        ptr += libspdm_get_hash_size (m_libspdm_use_hash_algo);
        libspdm_get_random_number (SPDM_NONCE_SIZE, ptr);
        ptr += SPDM_NONCE_SIZE;
        *(uint16_t *)ptr = 0;
        ptr += sizeof(uint16_t);
        libspdm_copy_mem(&m_libspdm_local_buffer[m_libspdm_local_buffer_size],
                         sizeof(m_libspdm_local_buffer) -
                         (&m_libspdm_local_buffer[m_libspdm_local_buffer_size] -
                          m_libspdm_local_buffer),
                         spdm_response,
                         (size_t)ptr - (size_t)spdm_response);
        m_libspdm_local_buffer_size += ((size_t)ptr - (size_t)spdm_response);
        libspdm_hash_all (m_libspdm_use_hash_algo, m_libspdm_local_buffer,
                          m_libspdm_local_buffer_size, hash_data);
        sig_size = libspdm_get_asym_signature_size (m_libspdm_use_asym_algo);
        libspdm_responder_data_sign(
#if LIBSPDM_HAL_PASS_SPDM_CONTEXT
            spdm_context,
#endif
            spdm_response->header.spdm_version << SPDM_VERSION_NUMBER_SHIFT_BIT,
                SPDM_CHALLENGE_AUTH,
                m_libspdm_use_asym_algo, m_libspdm_use_hash_algo, false, m_libspdm_local_buffer,
                m_libspdm_local_buffer_size, ptr, &sig_size);
        ptr += sig_size;
        libspdm_transport_test_encode_message (spdm_context, NULL, false, false, spdm_response_size,
                                               spdm_response, response_size, response);
    }
        return LIBSPDM_STATUS_SUCCESS;

    case 0x16: { /*correct CHALLENGE_AUTH message*/
        spdm_challenge_auth_response_t *spdm_response;
        void *data;
        size_t data_size;
        uint8_t *ptr;
        uint8_t hash_data[LIBSPDM_MAX_HASH_SIZE];
        size_t sig_size;
        size_t spdm_response_size;
        size_t transport_header_size;"|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\challenge.c|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\challenge.c|c7ad54ecb4a84c008578f910c8fb687a
"libspdm_read_responder_public_certificate_chain (m_libspdm_use_hash_algo,
                                                         m_libspdm_use_asym_algo,
                                                         &data,
                                                         &data_size, NULL, NULL);
        ((libspdm_context_t *)spdm_context)->local_context.local_cert_chain_provision_size[0] =
            data_size;
        ((libspdm_context_t *)spdm_context)->local_context.local_cert_chain_provision[0] = data;
        ((libspdm_context_t *)spdm_context)->connection_info.algorithm.base_asym_algo =
            m_libspdm_use_asym_algo;
        ((libspdm_context_t *)spdm_context)->connection_info.algorithm.base_hash_algo =
            m_libspdm_use_hash_algo;
        spdm_response_size = sizeof(spdm_challenge_auth_response_t) +
                             libspdm_get_hash_size(m_libspdm_use_hash_algo) +
                             SPDM_NONCE_SIZE + 0 + sizeof(uint16_t) + 0 +
                             libspdm_get_asym_signature_size(m_libspdm_use_asym_algo);
        transport_header_size = LIBSPDM_TEST_TRANSPORT_HEADER_SIZE;
        spdm_response = (void *)((uint8_t *)*response + transport_header_size);

        spdm_response->header.spdm_version = SPDM_MESSAGE_VERSION_11;
        spdm_response->header.request_response_code =SPDM_CHALLENGE_AUTH;
        spdm_response->header.param1 = 0;
        spdm_response->header.param2 = (1 << 0);
        ptr = (void *)(spdm_response + 1);
        libspdm_hash_all(m_libspdm_use_hash_algo,
                         ((libspdm_context_t *)spdm_context)
                         ->local_context.local_cert_chain_provision[0],
                         ((libspdm_context_t *)spdm_context)
                         ->local_context.local_cert_chain_provision_size[0],
                         ptr);
        free(data);
        ptr += libspdm_get_hash_size(m_libspdm_use_hash_algo);
        libspdm_get_random_number(SPDM_NONCE_SIZE, ptr);
        ptr += SPDM_NONCE_SIZE;
        /* libspdm_zero_mem (ptr, spdm_get_hash_size (m_libspdm_use_hash_algo));
         * ptr += spdm_get_hash_size (m_libspdm_use_hash_algo);*/
        *(uint16_t *)ptr = 0;
        ptr += sizeof(uint16_t);
        libspdm_copy_mem(&m_libspdm_local_buffer[m_libspdm_local_buffer_size],
                         sizeof(m_libspdm_local_buffer) - m_libspdm_local_buffer_size,
                         spdm_response, (size_t)ptr - (size_t)spdm_response);
        m_libspdm_local_buffer_size += ((size_t)ptr - (size_t)spdm_response);
        LIBSPDM_DEBUG((LIBSPDM_DEBUG_INFO, ""m_libspdm_local_buffer (0x%zx):\n"",
                       m_libspdm_local_buffer_size));
        libspdm_dump_hex(m_libspdm_local_buffer, m_libspdm_local_buffer_size);
        libspdm_hash_all(m_libspdm_use_hash_algo, m_libspdm_local_buffer,
                         m_libspdm_local_buffer_size, hash_data);
        LIBSPDM_DEBUG((LIBSPDM_DEBUG_INFO, ""HashDataSize (0x%x):\n"",
                       libspdm_get_hash_size(m_libspdm_use_hash_algo)));
        libspdm_dump_hex(hash_data, libspdm_get_hash_size(m_libspdm_use_hash_algo));
        sig_size = libspdm_get_asym_signature_size(m_libspdm_use_asym_algo);
        libspdm_responder_data_sign(
#if LIBSPDM_HAL_PASS_SPDM_CONTEXT
            spdm_context,
#endif
            spdm_response->header.spdm_version <<
                SPDM_VERSION_NUMBER_SHIFT_BIT,
                SPDM_CHALLENGE_AUTH,
                m_libspdm_use_asym_algo, m_libspdm_use_hash_algo,
                false, m_libspdm_local_buffer, m_libspdm_local_buffer_size,
                ptr, &sig_size);
        ptr += sig_size;

        libspdm_transport_test_encode_message(spdm_context, NULL, false,
                                              false, spdm_response_size,
                                              spdm_response, response_size,
                                              response);
    }
        return LIBSPDM_STATUS_SUCCESS;

    case 0x17: { /*correct CHALLENGE_AUTH message*/
        spdm_challenge_auth_response_t *spdm_response;
        void *data;
        size_t data_size;
        uint8_t *ptr;
        uint8_t hash_data[LIBSPDM_MAX_HASH_SIZE];
        size_t sig_size;
        size_t spdm_response_size;
        size_t transport_header_size;
        static uint8_t slot_id = 0;"|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\challenge.c|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\challenge.c|0ed74e300b70446f886ba25e5cd8c937
"if (slot_id == 0) {
            libspdm_read_responder_public_certificate_chain(m_libspdm_use_hash_algo,
                                                            m_libspdm_use_asym_algo, &data,
                                                            &data_size, NULL, NULL);
        } else {
            libspdm_read_responder_public_certificate_chain_per_slot(1,
                                                                     m_libspdm_use_hash_algo,
                                                                     m_libspdm_use_asym_algo, &data,
                                                                     &data_size, NULL, NULL);
        }
        ((libspdm_context_t *)spdm_context)
        ->local_context.local_cert_chain_provision_size[slot_id] =
            data_size;
        ((libspdm_context_t *)spdm_context)
        ->local_context.local_cert_chain_provision[slot_id] = data;
        ((libspdm_context_t *)spdm_context)
        ->connection_info.algorithm.base_asym_algo =
            m_libspdm_use_asym_algo;
        ((libspdm_context_t *)spdm_context)
        ->connection_info.algorithm.base_hash_algo =
            m_libspdm_use_hash_algo;
        spdm_response_size = sizeof(spdm_challenge_auth_response_t) +
                             libspdm_get_hash_size(m_libspdm_use_hash_algo) +
                             SPDM_NONCE_SIZE + 0 + sizeof(uint16_t) + 0 +
                             libspdm_get_asym_signature_size(m_libspdm_use_asym_algo);
        transport_header_size = LIBSPDM_TEST_TRANSPORT_HEADER_SIZE;
        spdm_response = (void *)((uint8_t *)*response + transport_header_size);

        spdm_response->header.spdm_version = SPDM_MESSAGE_VERSION_11;
        spdm_response->header.request_response_code =
            SPDM_CHALLENGE_AUTH;
        spdm_response->header.param1 = slot_id & 0xF;
        spdm_response->header.param2 = (1 << slot_id);
        ptr = (void *)(spdm_response + 1);
        libspdm_hash_all(
            m_libspdm_use_hash_algo,
            ((libspdm_context_t *)spdm_context)
            ->local_context.local_cert_chain_provision[slot_id],
            ((libspdm_context_t *)spdm_context)
            ->local_context
            .local_cert_chain_provision_size[slot_id],
            ptr);
        free(data);
        ptr += libspdm_get_hash_size(m_libspdm_use_hash_algo);
        libspdm_get_random_number(SPDM_NONCE_SIZE, ptr);
        ptr += SPDM_NONCE_SIZE;
        /* libspdm_zero_mem (ptr, libspdm_get_hash_size (m_libspdm_use_hash_algo));
         * ptr += libspdm_get_hash_size (m_libspdm_use_hash_algo);*/
        *(uint16_t *)ptr = 0;
        ptr += sizeof(uint16_t);
        libspdm_copy_mem(&m_libspdm_local_buffer[m_libspdm_local_buffer_size],
                         sizeof(m_libspdm_local_buffer) -
                         (&m_libspdm_local_buffer[m_libspdm_local_buffer_size] -
                          m_libspdm_local_buffer),
                         spdm_response, (size_t)ptr - (size_t)spdm_response);
        m_libspdm_local_buffer_size += ((size_t)ptr - (size_t)spdm_response);
        LIBSPDM_DEBUG((LIBSPDM_DEBUG_INFO, ""m_libspdm_local_buffer_size (0x%zx):\n"",
                       m_libspdm_local_buffer_size));
        libspdm_dump_hex(m_libspdm_local_buffer, m_libspdm_local_buffer_size);
        libspdm_hash_all(m_libspdm_use_hash_algo, m_libspdm_local_buffer,
                         m_libspdm_local_buffer_size, hash_data);
        LIBSPDM_DEBUG((LIBSPDM_DEBUG_INFO, ""HashDataSize (0x%x):\n"",
                       libspdm_get_hash_size(m_libspdm_use_hash_algo)));
        libspdm_dump_hex(m_libspdm_local_buffer, m_libspdm_local_buffer_size);
        sig_size = libspdm_get_asym_signature_size(m_libspdm_use_asym_algo);
        libspdm_responder_data_sign(
#if LIBSPDM_HAL_PASS_SPDM_CONTEXT
            spdm_context,
#endif
            spdm_response->header.spdm_version << SPDM_VERSION_NUMBER_SHIFT_BIT,
                SPDM_CHALLENGE_AUTH,
                m_libspdm_use_asym_algo, m_libspdm_use_hash_algo,
                false, m_libspdm_local_buffer, m_libspdm_local_buffer_size,
                ptr, &sig_size);
        ptr += sig_size;

        libspdm_transport_test_encode_message(spdm_context, NULL, false,
                                              false, spdm_response_size,
                                              spdm_response, response_size,
                                              response);
        slot_id++;
    }
        return LIBSPDM_STATUS_SUCCESS;

    case 0x18: { /* correct CHALLENGE_AUTH message using slot 0xFF */
        spdm_challenge_auth_response_t *spdm_response;
        void *data;
        size_t data_size;
        uint8_t *ptr;
        uint8_t hash_data[LIBSPDM_MAX_HASH_SIZE];
        size_t sig_size;
        size_t spdm_response_size;
        size_t transport_header_size;"|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\challenge.c|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\challenge.c|0d01f26a3403488ba11813aff596eaf0
"libspdm_read_responder_public_key(m_libspdm_use_asym_algo, &data, &data_size);
        ((libspdm_context_t *)spdm_context)
        ->local_context.local_public_key_provision_size = data_size;
        ((libspdm_context_t *)spdm_context)
        ->local_context.local_public_key_provision = data;
        ((libspdm_context_t *)spdm_context)
        ->connection_info.algorithm.base_asym_algo =
            m_libspdm_use_asym_algo;
        ((libspdm_context_t *)spdm_context)
        ->connection_info.algorithm.base_hash_algo =
            m_libspdm_use_hash_algo;
        spdm_response_size = sizeof(spdm_challenge_auth_response_t) +
                             libspdm_get_hash_size(m_libspdm_use_hash_algo) +
                             SPDM_NONCE_SIZE + 0 + sizeof(uint16_t) + 0 +
                             libspdm_get_asym_signature_size(m_libspdm_use_asym_algo);
        transport_header_size = LIBSPDM_TEST_TRANSPORT_HEADER_SIZE;
        spdm_response = (void *)((uint8_t *)*response + transport_header_size);

        spdm_response->header.spdm_version = SPDM_MESSAGE_VERSION_11;
        spdm_response->header.request_response_code =
            SPDM_CHALLENGE_AUTH;
        spdm_response->header.param1 = 0x0F;
        spdm_response->header.param2 = 0;
        ptr = (void *)(spdm_response + 1);
        libspdm_hash_all(
            m_libspdm_use_hash_algo,
            ((libspdm_context_t *)spdm_context)
            ->local_context.local_public_key_provision,
            ((libspdm_context_t *)spdm_context)
            ->local_context
            .local_public_key_provision_size,
            ptr);
        free(data);
        ptr += libspdm_get_hash_size(m_libspdm_use_hash_algo);
        libspdm_get_random_number(SPDM_NONCE_SIZE, ptr);
        ptr += SPDM_NONCE_SIZE;
        /* libspdm_zero_mem (ptr, libspdm_get_hash_size (m_libspdm_use_hash_algo));
         * ptr += libspdm_get_hash_size (m_libspdm_use_hash_algo);*/
        *(uint16_t *)ptr = 0;
        ptr += sizeof(uint16_t);
        libspdm_copy_mem(&m_libspdm_local_buffer[m_libspdm_local_buffer_size],
                         sizeof(m_libspdm_local_buffer) -
                         (&m_libspdm_local_buffer[m_libspdm_local_buffer_size] -
                          m_libspdm_local_buffer),
                         spdm_response, (size_t)ptr - (size_t)spdm_response);
        m_libspdm_local_buffer_size += ((size_t)ptr - (size_t)spdm_response);
        LIBSPDM_DEBUG((LIBSPDM_DEBUG_INFO, ""m_libspdm_local_buffer_size (0x%zx):\n"",
                       m_libspdm_local_buffer_size));
        libspdm_dump_hex(m_libspdm_local_buffer, m_libspdm_local_buffer_size);
        libspdm_hash_all(m_libspdm_use_hash_algo, m_libspdm_local_buffer,
                         m_libspdm_local_buffer_size, hash_data);
        LIBSPDM_DEBUG((LIBSPDM_DEBUG_INFO, ""HashDataSize (0x%x):\n"",
                       libspdm_get_hash_size(m_libspdm_use_hash_algo)));
        libspdm_dump_hex(m_libspdm_local_buffer, m_libspdm_local_buffer_size);
        sig_size = libspdm_get_asym_signature_size(m_libspdm_use_asym_algo);
        libspdm_responder_data_sign(
#if LIBSPDM_HAL_PASS_SPDM_CONTEXT
            spdm_context,
#endif
            spdm_response->header.spdm_version << SPDM_VERSION_NUMBER_SHIFT_BIT,
                SPDM_CHALLENGE_AUTH,
                m_libspdm_use_asym_algo, m_libspdm_use_hash_algo,
                false, m_libspdm_local_buffer, m_libspdm_local_buffer_size,
                ptr, &sig_size);
        ptr += sig_size;

        libspdm_transport_test_encode_message(spdm_context, NULL, false,
                                              false, spdm_response_size,
                                              spdm_response, response_size,
                                              response);
    }
        return LIBSPDM_STATUS_SUCCESS;

    case 0x19: /*CHALLENGE_AUTH message contains opaque_length greater than the maximum allowed*/
    {
        spdm_challenge_auth_response_t  *spdm_response;
        void                          *data;
        size_t data_size;
        uint8_t                         *Ptr;
        uint8_t hash_data[LIBSPDM_MAX_HASH_SIZE];
        size_t sig_size;
        size_t spdm_response_size;
        size_t transport_header_size;
        uint16_t opaque_length;
        opaque_length = SPDM_MAX_OPAQUE_DATA_SIZE + 1;  /*opaque_length greater than the maximum allowed*/"|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\challenge.c|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\challenge.c|a90a7de621d845eeb8925d4425bbedff
"libspdm_read_responder_public_certificate_chain (m_libspdm_use_hash_algo,
                                                         m_libspdm_use_asym_algo,
                                                         &data,
                                                         &data_size, NULL, NULL);
        ((libspdm_context_t*)spdm_context)->local_context.local_cert_chain_provision_size[0] =
            data_size;
        ((libspdm_context_t*)spdm_context)->local_context.local_cert_chain_provision[0] = data;
        ((libspdm_context_t*)spdm_context)->connection_info.algorithm.base_asym_algo =
            m_libspdm_use_asym_algo;
        ((libspdm_context_t*)spdm_context)->connection_info.algorithm.base_hash_algo =
            m_libspdm_use_hash_algo;
        spdm_response_size = sizeof(spdm_challenge_auth_response_t) +
                             libspdm_get_hash_size (m_libspdm_use_hash_algo) +
                             SPDM_NONCE_SIZE +
                             0 +
                             sizeof(uint16_t) +
                             opaque_length +
                             libspdm_get_asym_signature_size (m_libspdm_use_asym_algo);
        transport_header_size = LIBSPDM_TEST_TRANSPORT_HEADER_SIZE;
        spdm_response = (void *)((uint8_t *)*response + transport_header_size);

        spdm_response->header.spdm_version = SPDM_MESSAGE_VERSION_11;
        spdm_response->header.request_response_code = SPDM_CHALLENGE_AUTH;
        spdm_response->header.param1 = 0;
        spdm_response->header.param2 = (1 << 0);
        Ptr = (void *)(spdm_response + 1);
        libspdm_hash_all (m_libspdm_use_hash_algo,
                          ((libspdm_context_t*)spdm_context)->local_context.local_cert_chain_provision[
                              0],
                          ((libspdm_context_t*)spdm_context)->local_context.local_cert_chain_provision_size[
                              0],
                          Ptr);
        free(data);
        Ptr += libspdm_get_hash_size (m_libspdm_use_hash_algo);
        libspdm_get_random_number (SPDM_NONCE_SIZE, Ptr);
        Ptr += SPDM_NONCE_SIZE;
        /* libspdm_zero_mem (Ptr, libspdm_get_hash_size (m_libspdm_use_hash_algo));
         * Ptr += libspdm_get_hash_size (m_libspdm_use_hash_algo);*/
        *(uint16_t *)Ptr = opaque_length;
        Ptr += sizeof(uint16_t);
        libspdm_set_mem(Ptr, opaque_length, 255);
        Ptr += opaque_length;
        libspdm_copy_mem(&m_libspdm_local_buffer[m_libspdm_local_buffer_size],
                         sizeof(m_libspdm_local_buffer) -
                         (&m_libspdm_local_buffer[m_libspdm_local_buffer_size] -
                          m_libspdm_local_buffer),
                         spdm_response,
                         (size_t)Ptr - (size_t)spdm_response);
        m_libspdm_local_buffer_size += ((size_t)Ptr - (size_t)spdm_response);
        libspdm_hash_all (m_libspdm_use_hash_algo, m_libspdm_local_buffer,
                          m_libspdm_local_buffer_size, hash_data);
        sig_size = libspdm_get_asym_signature_size (m_libspdm_use_asym_algo);
        libspdm_responder_data_sign(
#if LIBSPDM_HAL_PASS_SPDM_CONTEXT
            spdm_context,
#endif
            spdm_response->header.spdm_version << SPDM_VERSION_NUMBER_SHIFT_BIT,
                SPDM_CHALLENGE_AUTH,
                m_libspdm_use_asym_algo, m_libspdm_use_hash_algo, false, m_libspdm_local_buffer,
                m_libspdm_local_buffer_size, Ptr, &sig_size);
        Ptr += sig_size;

        libspdm_transport_test_encode_message (spdm_context, NULL, false, false, spdm_response_size,
                                               spdm_response, response_size, response);
    }
        return LIBSPDM_STATUS_SUCCESS;

    case 0x1A:
    {
        spdm_challenge_auth_response_t  *spdm_response;
        spdm_general_opaque_data_table_header_t
        *spdm_general_opaque_data_table_header;
        opaque_element_table_header_t
        *opaque_element_table_header;
        void *data;
        size_t data_size;
        uint8_t *Ptr;
        size_t sig_size;
        size_t spdm_response_size;
        size_t transport_header_size;
        uint8_t element_num;
        uint8_t element_index;
        size_t current_element_len;
        uint16_t opaque_element_data_len;"|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\challenge.c|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\challenge.c|c6bb09d8888741b1b769d7c638acdc8e
"libspdm_read_responder_public_certificate_chain (m_libspdm_use_hash_algo,
                                                         m_libspdm_use_asym_algo,
                                                         &data,
                                                         &data_size, NULL, NULL);
        ((libspdm_context_t*)spdm_context)->local_context.local_cert_chain_provision_size[0] =
            data_size;
        ((libspdm_context_t*)spdm_context)->local_context.local_cert_chain_provision[0] = data;
        ((libspdm_context_t*)spdm_context)->connection_info.algorithm.base_asym_algo =
            m_libspdm_use_asym_algo;
        ((libspdm_context_t*)spdm_context)->connection_info.algorithm.base_hash_algo =
            m_libspdm_use_hash_algo;


        spdm_general_opaque_data_table_header = (void *)m_libspdm_opaque_data;
        spdm_general_opaque_data_table_header->total_elements = 4;
        opaque_element_table_header = (void *)(spdm_general_opaque_data_table_header + 1);

        element_num = spdm_general_opaque_data_table_header->total_elements;
        m_libspdm_opaque_data_size = sizeof(spdm_general_opaque_data_table_header_t);

        for (element_index = 0; element_index < element_num; element_index++) {
            opaque_element_table_header->id = SPDM_REGISTRY_ID_MAX;
            opaque_element_table_header->vendor_len = 0;
            opaque_element_data_len = (uint16_t)strlen(""libspdm"");;

            Ptr = (void *)(opaque_element_table_header + 1);
            Ptr += opaque_element_table_header->vendor_len;

            libspdm_copy_mem((uint16_t *)Ptr,
                             sizeof(opaque_element_data_len),
                             &opaque_element_data_len,
                             sizeof(opaque_element_data_len));

            libspdm_copy_mem(Ptr + sizeof(opaque_element_data_len),
                             SPDM_MAX_OPAQUE_DATA_SIZE -
                             sizeof(opaque_element_table_header_t), ""libspdm"",
                             strlen(""libspdm""));

            current_element_len = sizeof(opaque_element_table_header_t) +
                                  opaque_element_table_header->vendor_len +
                                  sizeof(opaque_element_data_len) +
                                  opaque_element_data_len;
            current_element_len = (current_element_len + 3) & ~3;

            /*move to next element*/
            opaque_element_table_header =
                (opaque_element_table_header_t *)
                ((uint8_t *)opaque_element_table_header +
                 current_element_len);

            m_libspdm_opaque_data_size += current_element_len;
        }

        spdm_response_size = sizeof(spdm_challenge_auth_response_t) +
                             libspdm_get_hash_size (m_libspdm_use_hash_algo) +
                             SPDM_NONCE_SIZE +
                             0 +
                             sizeof(uint16_t) + m_libspdm_opaque_data_size +
                             libspdm_get_asym_signature_size (m_libspdm_use_asym_algo);
        transport_header_size = LIBSPDM_TEST_TRANSPORT_HEADER_SIZE;
        spdm_response = (void *)((uint8_t *)*response + transport_header_size);

        spdm_response->header.spdm_version = SPDM_MESSAGE_VERSION_12;
        spdm_response->header.request_response_code = SPDM_CHALLENGE_AUTH;
        spdm_response->header.param1 = 0;
        spdm_response->header.param2 = (1 << 0);
        Ptr = (void *)(spdm_response + 1);
        libspdm_hash_all (m_libspdm_use_hash_algo,
                          ((libspdm_context_t*)spdm_context)->local_context.local_cert_chain_provision[
                              0],
                          ((libspdm_context_t*)spdm_context)->local_context.local_cert_chain_provision_size[
                              0],
                          Ptr);
        free(data);
        Ptr += libspdm_get_hash_size (m_libspdm_use_hash_algo);
        libspdm_get_random_number (SPDM_NONCE_SIZE, Ptr);
        Ptr += SPDM_NONCE_SIZE;
        *(uint16_t *)Ptr = (uint16_t)m_libspdm_opaque_data_size;
        Ptr += sizeof(uint16_t);
        libspdm_copy_mem(Ptr, (size_t)(*response) + *response_size - (size_t)Ptr,
                         m_libspdm_opaque_data,
                         m_libspdm_opaque_data_size);
        Ptr += m_libspdm_opaque_data_size;"|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\challenge.c|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\challenge.c|dd29c2a86ed342a698c60be06dd7e108
"libspdm_copy_mem(&m_libspdm_local_buffer[m_libspdm_local_buffer_size],
                         sizeof(m_libspdm_local_buffer) -
                         (&m_libspdm_local_buffer[m_libspdm_local_buffer_size] -
                          m_libspdm_local_buffer),
                         spdm_response,
                         (size_t)Ptr - (size_t)spdm_response);
        m_libspdm_local_buffer_size += ((size_t)Ptr - (size_t)spdm_response);
        sig_size = libspdm_get_asym_signature_size (m_libspdm_use_asym_algo);
        libspdm_responder_data_sign(
#if LIBSPDM_HAL_PASS_SPDM_CONTEXT
            spdm_context,
#endif
            spdm_response->header.spdm_version << SPDM_VERSION_NUMBER_SHIFT_BIT,
                SPDM_CHALLENGE_AUTH,
                m_libspdm_use_asym_algo, m_libspdm_use_hash_algo, false, m_libspdm_local_buffer,
                m_libspdm_local_buffer_size, Ptr, &sig_size);
        Ptr += sig_size;

        libspdm_transport_test_encode_message (spdm_context, NULL, false, false, spdm_response_size,
                                               spdm_response, response_size, response);
    }
        return LIBSPDM_STATUS_SUCCESS;
    case 0x1B: {
        spdm_challenge_auth_response_t *spdm_response;
        void *data;
        size_t data_size;
        uint8_t *ptr;
        uint8_t hash_data[LIBSPDM_MAX_HASH_SIZE];
        size_t sig_size;
        size_t spdm_response_size;
        size_t transport_header_size;
        uint8_t slot_id = 0;

        libspdm_read_responder_public_certificate_chain(m_libspdm_use_hash_algo,
                                                        m_libspdm_use_asym_algo, &data,
                                                        &data_size, NULL, NULL);
        ((libspdm_context_t *)spdm_context)
        ->local_context.local_cert_chain_provision_size[0] =
            data_size;
        ((libspdm_context_t *)spdm_context)
        ->local_context.local_cert_chain_provision[0] = data;
        ((libspdm_context_t *)spdm_context)
        ->connection_info.algorithm.base_asym_algo =
            m_libspdm_use_asym_algo;
        ((libspdm_context_t *)spdm_context)
        ->connection_info.algorithm.base_hash_algo =
            m_libspdm_use_hash_algo;
        spdm_response_size = sizeof(spdm_challenge_auth_response_t) +
                             libspdm_get_hash_size(m_libspdm_use_hash_algo) +
                             SPDM_NONCE_SIZE + 0 + sizeof(uint16_t) + 0 +
                             libspdm_get_asym_signature_size(m_libspdm_use_asym_algo) +
                             SPDM_REQ_CONTEXT_SIZE;
        transport_header_size = LIBSPDM_TEST_TRANSPORT_HEADER_SIZE;
        spdm_response = (void *)((uint8_t *)*response + transport_header_size);"|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\challenge.c|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\challenge.c|4884e451f7ac4cd087f7abed2f9cf3d5
"spdm_response->header.spdm_version = SPDM_MESSAGE_VERSION_13;
        spdm_response->header.request_response_code =
            SPDM_CHALLENGE_AUTH;
        spdm_response->header.param1 = slot_id;
        spdm_response->header.param2 = (1 << slot_id);
        ptr = (void *)(spdm_response + 1);
        libspdm_hash_all(
            m_libspdm_use_hash_algo,
            ((libspdm_context_t *)spdm_context)
            ->local_context.local_cert_chain_provision[slot_id],
            ((libspdm_context_t *)spdm_context)
            ->local_context
            .local_cert_chain_provision_size[slot_id],
            ptr);
        free(data);
        ptr += libspdm_get_hash_size(m_libspdm_use_hash_algo);
        libspdm_get_random_number(SPDM_NONCE_SIZE, ptr);
        ptr += SPDM_NONCE_SIZE;
        *(uint16_t *)ptr = 0;
        ptr += sizeof(uint16_t);
        libspdm_copy_mem(ptr, SPDM_REQ_CONTEXT_SIZE, m_requester_context, SPDM_REQ_CONTEXT_SIZE);
        ptr += SPDM_REQ_CONTEXT_SIZE;
        libspdm_copy_mem(&m_libspdm_local_buffer[m_libspdm_local_buffer_size],
                         sizeof(m_libspdm_local_buffer) -
                         (&m_libspdm_local_buffer[m_libspdm_local_buffer_size] -
                          m_libspdm_local_buffer),
                         spdm_response, (size_t)ptr - (size_t)spdm_response);
        m_libspdm_local_buffer_size += ((size_t)ptr - (size_t)spdm_response);
        LIBSPDM_DEBUG((LIBSPDM_DEBUG_INFO, ""m_libspdm_local_buffer_size (0x%zx):\n"",
                       m_libspdm_local_buffer_size));
        libspdm_dump_hex(m_libspdm_local_buffer, m_libspdm_local_buffer_size);
        libspdm_hash_all(m_libspdm_use_hash_algo, m_libspdm_local_buffer,
                         m_libspdm_local_buffer_size, hash_data);
        LIBSPDM_DEBUG((LIBSPDM_DEBUG_INFO, ""HashDataSize (0x%x):\n"",
                       libspdm_get_hash_size(m_libspdm_use_hash_algo)));
        libspdm_dump_hex(m_libspdm_local_buffer, m_libspdm_local_buffer_size);
        sig_size = libspdm_get_asym_signature_size(m_libspdm_use_asym_algo);
        libspdm_responder_data_sign(
#if LIBSPDM_HAL_PASS_SPDM_CONTEXT
            spdm_context,
#endif
            spdm_response->header.spdm_version << SPDM_VERSION_NUMBER_SHIFT_BIT,
                SPDM_CHALLENGE_AUTH,
                m_libspdm_use_asym_algo, m_libspdm_use_hash_algo,
                false, m_libspdm_local_buffer, m_libspdm_local_buffer_size,
                ptr, &sig_size);
        ptr += sig_size;

        libspdm_transport_test_encode_message(spdm_context, NULL, false,
                                              false, spdm_response_size,
                                              spdm_response, response_size,
                                              response);
    }
        return LIBSPDM_STATUS_SUCCESS;
    case 0x1C: {
        spdm_challenge_auth_response_t *spdm_response;
        void *data;
        size_t data_size;
        uint8_t *ptr;
        uint8_t hash_data[LIBSPDM_MAX_HASH_SIZE];
        size_t sig_size;
        size_t spdm_response_size;
        size_t transport_header_size;
        uint8_t slot_id = 0;

        libspdm_read_responder_public_certificate_chain(m_libspdm_use_hash_algo,
                                                        m_libspdm_use_asym_algo, &data,
                                                        &data_size, NULL, NULL);
        ((libspdm_context_t *)spdm_context)
        ->local_context.local_cert_chain_provision_size[0] =
            data_size;
        ((libspdm_context_t *)spdm_context)
        ->local_context.local_cert_chain_provision[0] = data;
        ((libspdm_context_t *)spdm_context)
        ->connection_info.algorithm.base_asym_algo =
            m_libspdm_use_asym_algo;
        ((libspdm_context_t *)spdm_context)
        ->connection_info.algorithm.base_hash_algo =
            m_libspdm_use_hash_algo;
        spdm_response_size = sizeof(spdm_challenge_auth_response_t) +
                             libspdm_get_hash_size(m_libspdm_use_hash_algo) +
                             SPDM_NONCE_SIZE + 0 + sizeof(uint16_t) + 0 +
                             libspdm_get_asym_signature_size(m_libspdm_use_asym_algo) +
                             SPDM_REQ_CONTEXT_SIZE;
        transport_header_size = LIBSPDM_TEST_TRANSPORT_HEADER_SIZE;
        spdm_response = (void *)((uint8_t *)*response + transport_header_size);"|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\challenge.c|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\challenge.c|cc81f5f7cde74b9d925ddb25fb9b2571
"spdm_response->header.spdm_version = SPDM_MESSAGE_VERSION_13;
        spdm_response->header.request_response_code =
            SPDM_CHALLENGE_AUTH;
        spdm_response->header.param1 = slot_id;
        spdm_response->header.param2 = (1 << slot_id);
        ptr = (void *)(spdm_response + 1);
        libspdm_hash_all(
            m_libspdm_use_hash_algo,
            ((libspdm_context_t *)spdm_context)
            ->local_context.local_cert_chain_provision[slot_id],
            ((libspdm_context_t *)spdm_context)
            ->local_context
            .local_cert_chain_provision_size[slot_id],
            ptr);
        free(data);
        ptr += libspdm_get_hash_size(m_libspdm_use_hash_algo);
        libspdm_get_random_number(SPDM_NONCE_SIZE, ptr);
        ptr += SPDM_NONCE_SIZE;
        *(uint16_t *)ptr = 0;
        ptr += sizeof(uint16_t);
        libspdm_get_random_number(SPDM_REQ_CONTEXT_SIZE,ptr);
        ptr += SPDM_REQ_CONTEXT_SIZE;

        libspdm_copy_mem(&m_libspdm_local_buffer[m_libspdm_local_buffer_size],
                         sizeof(m_libspdm_local_buffer) -
                         (&m_libspdm_local_buffer[m_libspdm_local_buffer_size] -
                          m_libspdm_local_buffer),
                         spdm_response, (size_t)ptr - (size_t)spdm_response);
        m_libspdm_local_buffer_size += ((size_t)ptr - (size_t)spdm_response);
        LIBSPDM_DEBUG((LIBSPDM_DEBUG_INFO, ""m_libspdm_local_buffer_size (0x%zx):\n"",
                       m_libspdm_local_buffer_size));
        libspdm_dump_hex(m_libspdm_local_buffer, m_libspdm_local_buffer_size);
        libspdm_hash_all(m_libspdm_use_hash_algo, m_libspdm_local_buffer,
                         m_libspdm_local_buffer_size, hash_data);
        LIBSPDM_DEBUG((LIBSPDM_DEBUG_INFO, ""HashDataSize (0x%x):\n"",
                       libspdm_get_hash_size(m_libspdm_use_hash_algo)));
        libspdm_dump_hex(m_libspdm_local_buffer, m_libspdm_local_buffer_size);
        sig_size = libspdm_get_asym_signature_size(m_libspdm_use_asym_algo);
        libspdm_responder_data_sign(
#if LIBSPDM_HAL_PASS_SPDM_CONTEXT
            spdm_context,
#endif
            spdm_response->header.spdm_version << SPDM_VERSION_NUMBER_SHIFT_BIT,
                SPDM_CHALLENGE_AUTH,
                m_libspdm_use_asym_algo, m_libspdm_use_hash_algo,
                false, m_libspdm_local_buffer, m_libspdm_local_buffer_size,
                ptr, &sig_size);
        ptr += sig_size;

        libspdm_transport_test_encode_message(spdm_context, NULL, false,
                                              false, spdm_response_size,
                                              spdm_response, response_size,
                                              response);
    }
        return LIBSPDM_STATUS_SUCCESS;
    default:
        return LIBSPDM_STATUS_RECEIVE_FAIL;
    }
}

/**
 * Test 1: when no CHALLENGE_AUTH message is received, and the client returns a
 * device error.
 * Expected behavior: client returns a status of RETURN_DEVICE_ERROR.
 **/
void libspdm_test_requester_challenge_case1(void **state)
{
    libspdm_return_t status;
    libspdm_test_context_t *spdm_test_context;
    libspdm_context_t *spdm_context;
    uint8_t measurement_hash[LIBSPDM_MAX_HASH_SIZE];
    void *data;
    size_t data_size;
    void *hash;
    size_t hash_size;

    spdm_test_context = *state;
    spdm_context = spdm_test_context->spdm_context;
    spdm_test_context->case_id = 0x1;
    spdm_context->connection_info.connection_state =
        LIBSPDM_CONNECTION_STATE_NEGOTIATED;
    spdm_context->connection_info.capability.flags = 0;
    spdm_context->connection_info.capability.flags |=
        SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_CHAL_CAP;
    libspdm_read_responder_public_certificate_chain(m_libspdm_use_hash_algo,
                                                    m_libspdm_use_asym_algo, &data,
                                                    &data_size, &hash, &hash_size);
    libspdm_reset_message_a(spdm_context);
    libspdm_reset_message_b(spdm_context);
    libspdm_reset_message_c(spdm_context);
    spdm_context->connection_info.algorithm.base_hash_algo =
        m_libspdm_use_hash_algo;
    spdm_context->connection_info.algorithm.base_asym_algo =
        m_libspdm_use_asym_algo;

    spdm_context->connection_info.version = SPDM_MESSAGE_VERSION_11 <<
                                            SPDM_VERSION_NUMBER_SHIFT_BIT;"|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\challenge.c|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\challenge.c|1b47013fb75641028c13b293f40eac1e
"#if LIBSPDM_RECORD_TRANSCRIPT_DATA_SUPPORT
    spdm_context->connection_info.peer_used_cert_chain[0].buffer_size =
        data_size;
    libspdm_copy_mem(spdm_context->connection_info.peer_used_cert_chain[0].buffer,
                     sizeof(spdm_context->connection_info.peer_used_cert_chain[0].buffer),
                     data, data_size);
#else
    libspdm_hash_all(
        spdm_context->connection_info.algorithm.base_hash_algo,
        data, data_size,
        spdm_context->connection_info.peer_used_cert_chain[0].buffer_hash);
    spdm_context->connection_info.peer_used_cert_chain[0].buffer_hash_size =
        libspdm_get_hash_size(spdm_context->connection_info.algorithm.base_hash_algo);
    libspdm_get_leaf_cert_public_key_from_cert_chain(
        spdm_context->connection_info.algorithm.base_hash_algo,
        spdm_context->connection_info.algorithm.base_asym_algo,
        data, data_size,
        &spdm_context->connection_info.peer_used_cert_chain[0].leaf_cert_public_key);
#endif

    libspdm_zero_mem(measurement_hash, sizeof(measurement_hash));
    status = libspdm_challenge(
        spdm_context, NULL, 0,
        SPDM_CHALLENGE_REQUEST_NO_MEASUREMENT_SUMMARY_HASH,
        measurement_hash, NULL);
    assert_int_equal(status, LIBSPDM_STATUS_SEND_FAIL);
#if LIBSPDM_RECORD_TRANSCRIPT_DATA_SUPPORT
    assert_int_equal(spdm_context->transcript.message_c.buffer_size, 0);
#endif
    free(data);
}

/**
 * Test 2: the requester is setup correctly to send a CHALLENGE message:
 * - it has flags indicating that the previous messages were sent
 * (GET_CAPABILITIES, NEGOTIATE_ALGORITHMS, and GET_DIGESTS).
 * - it received the CAPABILITIES message, allowing the use of hash and digital
 * signature algorithms, and the use of challenges.
 * - it has the responder's certificate chain.
 * The CHALLENGE message requests usage of the first certificate in the chain
 * (param1=0) and do not request measurements (param2=0).
 * The received CHALLENGE_AUTH message correctly responds to the challenge, with
 * no opaque data and a signature on the sent nonce.
 * Expected behavior: client returns a status of RETURN_SUCCESS.
 **/
void libspdm_test_requester_challenge_case2(void **state)
{
    libspdm_return_t status;
    libspdm_test_context_t *spdm_test_context;
    libspdm_context_t *spdm_context;
    uint8_t measurement_hash[LIBSPDM_MAX_HASH_SIZE];
    void *data;
    size_t data_size;
    void *hash;
    size_t hash_size;

    spdm_test_context = *state;
    spdm_context = spdm_test_context->spdm_context;
    spdm_test_context->case_id = 0x2;
    spdm_context->connection_info.connection_state =
        LIBSPDM_CONNECTION_STATE_NEGOTIATED;
    spdm_context->connection_info.capability.flags = 0;
    spdm_context->connection_info.capability.flags |=
        SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_CHAL_CAP;
    libspdm_read_responder_public_certificate_chain(m_libspdm_use_hash_algo,
                                                    m_libspdm_use_asym_algo, &data,
                                                    &data_size, &hash, &hash_size);
    libspdm_reset_message_a(spdm_context);
    libspdm_reset_message_b(spdm_context);
    libspdm_reset_message_c(spdm_context);
    spdm_context->connection_info.algorithm.base_hash_algo =
        m_libspdm_use_hash_algo;
    spdm_context->connection_info.algorithm.base_asym_algo =
        m_libspdm_use_asym_algo;

    spdm_context->connection_info.version = SPDM_MESSAGE_VERSION_11 <<
                                            SPDM_VERSION_NUMBER_SHIFT_BIT;

#if LIBSPDM_RECORD_TRANSCRIPT_DATA_SUPPORT
    spdm_context->connection_info.peer_used_cert_chain[0].buffer_size =
        data_size;
    libspdm_copy_mem(spdm_context->connection_info.peer_used_cert_chain[0].buffer,
                     sizeof(spdm_context->connection_info.peer_used_cert_chain[0].buffer),
                     data, data_size);
#else
    libspdm_hash_all(
        spdm_context->connection_info.algorithm.base_hash_algo,
        data, data_size,
        spdm_context->connection_info.peer_used_cert_chain[0].buffer_hash);
    spdm_context->connection_info.peer_used_cert_chain[0].buffer_hash_size =
        libspdm_get_hash_size(spdm_context->connection_info.algorithm.base_hash_algo);
    libspdm_get_leaf_cert_public_key_from_cert_chain(
        spdm_context->connection_info.algorithm.base_hash_algo,
        spdm_context->connection_info.algorithm.base_asym_algo,
        data, data_size,
        &spdm_context->connection_info.peer_used_cert_chain[0].leaf_cert_public_key);
#endif

    libspdm_zero_mem(measurement_hash, sizeof(measurement_hash));
    status = libspdm_challenge(
        spdm_context, NULL, 0,
        SPDM_CHALLENGE_REQUEST_NO_MEASUREMENT_SUMMARY_HASH,
        measurement_hash, NULL);
    assert_int_equal(status, LIBSPDM_STATUS_SUCCESS);"|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\challenge.c|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\challenge.c|dc4f1cbbd7e545d3be97e2392f59215a
"/* Completion of CHALLENGE sets M1/M2 to null. */
#if LIBSPDM_RECORD_TRANSCRIPT_DATA_SUPPORT
    assert_int_equal(spdm_context->transcript.message_c.buffer_size, 0);
#else
    assert_null(spdm_context->transcript.digest_context_m1m2);
#endif
    free(data);
}

/**
 * Test 3: the requester is not setup correctly to send a CHALLENGE message:
 * - it has *no* flags indicating that the previous messages were sent
 * (GET_CAPABILITIES, NEGOTIATE_ALGORITHMS, GET_DIGESTS); but
 * - it received the CAPABILITIES message, allowing the use of hash and digital
 * signature algorithms, and the use of challenges.
 * - it has the responder's certificate chain.
 * The CHALLENGE message requests usage of the first certificate in the chain
 * (param1=0) and do not request measurements (param2=0).
 * The received CHALLENGE_AUTH message correctly responds to the challenge, with
 * no opaque data and a signature on the sent nonce.
 * Expected behavior: client returns a status of RETURN_DEVICE_ERROR, and the ""C""
 * transcript buffer is not set.
 **/
void libspdm_test_requester_challenge_case3(void **state)
{
    libspdm_return_t status;
    libspdm_test_context_t *spdm_test_context;
    libspdm_context_t *spdm_context;
    uint8_t measurement_hash[LIBSPDM_MAX_HASH_SIZE];
    void *data;
    size_t data_size;
    void *hash;
    size_t hash_size;

    spdm_test_context = *state;
    spdm_context = spdm_test_context->spdm_context;
    spdm_test_context->case_id = 0x3;
    spdm_context->connection_info.connection_state =
        LIBSPDM_CONNECTION_STATE_NOT_STARTED;
    spdm_context->connection_info.capability.flags = 0;
    spdm_context->connection_info.capability.flags |=
        SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_CHAL_CAP;
    libspdm_read_responder_public_certificate_chain(m_libspdm_use_hash_algo,
                                                    m_libspdm_use_asym_algo, &data,
                                                    &data_size, &hash, &hash_size);
    libspdm_reset_message_a(spdm_context);
    libspdm_reset_message_b(spdm_context);
    libspdm_reset_message_c(spdm_context);
    spdm_context->connection_info.algorithm.base_hash_algo =
        m_libspdm_use_hash_algo;
    spdm_context->connection_info.algorithm.base_asym_algo =
        m_libspdm_use_asym_algo;

    spdm_context->connection_info.version = SPDM_MESSAGE_VERSION_11 <<
                                            SPDM_VERSION_NUMBER_SHIFT_BIT;

#if LIBSPDM_RECORD_TRANSCRIPT_DATA_SUPPORT
    spdm_context->connection_info.peer_used_cert_chain[0].buffer_size =
        data_size;
    libspdm_copy_mem(spdm_context->connection_info.peer_used_cert_chain[0].buffer,
                     sizeof(spdm_context->connection_info.peer_used_cert_chain[0].buffer),
                     data, data_size);
#else
    libspdm_hash_all(
        spdm_context->connection_info.algorithm.base_hash_algo,
        data, data_size,
        spdm_context->connection_info.peer_used_cert_chain[0].buffer_hash);
    spdm_context->connection_info.peer_used_cert_chain[0].buffer_hash_size =
        libspdm_get_hash_size(spdm_context->connection_info.algorithm.base_hash_algo);
    libspdm_get_leaf_cert_public_key_from_cert_chain(
        spdm_context->connection_info.algorithm.base_hash_algo,
        spdm_context->connection_info.algorithm.base_asym_algo,
        data, data_size,
        &spdm_context->connection_info.peer_used_cert_chain[0].leaf_cert_public_key);
#endif

    libspdm_zero_mem(measurement_hash, sizeof(measurement_hash));
    status = libspdm_challenge(
        spdm_context, NULL, 0,
        SPDM_CHALLENGE_REQUEST_NO_MEASUREMENT_SUMMARY_HASH,
        measurement_hash, NULL);
    assert_int_equal(status, LIBSPDM_STATUS_INVALID_STATE_LOCAL);
#if LIBSPDM_RECORD_TRANSCRIPT_DATA_SUPPORT
    assert_int_equal(spdm_context->transcript.message_c.buffer_size, 0);
#endif
    free(data);
}

/**
 * Test 4: the requester is setup correctly (see Test 2), but receives an ERROR
 * message indicating InvalidParameters.
 * Expected behavior: client returns a status of RETURN_DEVICE_ERROR, and the ""C""
 * transcript buffer is reset.
 **/
void libspdm_test_requester_challenge_case4(void **state)
{
    libspdm_return_t status;
    libspdm_test_context_t *spdm_test_context;
    libspdm_context_t *spdm_context;
    uint8_t measurement_hash[LIBSPDM_MAX_HASH_SIZE];
    void *data;
    size_t data_size;
    void *hash;
    size_t hash_size;"|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\challenge.c|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\challenge.c|4416a304d4d342948fd2c9a9e81f73f2
"spdm_test_context = *state;
    spdm_context = spdm_test_context->spdm_context;
    spdm_test_context->case_id = 0x4;
    spdm_context->connection_info.connection_state =
        LIBSPDM_CONNECTION_STATE_NEGOTIATED;
    spdm_context->connection_info.capability.flags = 0;
    spdm_context->connection_info.capability.flags |=
        SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_CHAL_CAP;
    libspdm_read_responder_public_certificate_chain(m_libspdm_use_hash_algo,
                                                    m_libspdm_use_asym_algo, &data,
                                                    &data_size, &hash, &hash_size);
    libspdm_reset_message_a(spdm_context);
    libspdm_reset_message_b(spdm_context);
    libspdm_reset_message_c(spdm_context);
    spdm_context->connection_info.algorithm.base_hash_algo =
        m_libspdm_use_hash_algo;
    spdm_context->connection_info.algorithm.base_asym_algo =
        m_libspdm_use_asym_algo;

    spdm_context->connection_info.version = SPDM_MESSAGE_VERSION_11 <<
                                            SPDM_VERSION_NUMBER_SHIFT_BIT;

#if LIBSPDM_RECORD_TRANSCRIPT_DATA_SUPPORT
    spdm_context->connection_info.peer_used_cert_chain[0].buffer_size =
        data_size;
    libspdm_copy_mem(spdm_context->connection_info.peer_used_cert_chain[0].buffer,
                     sizeof(spdm_context->connection_info.peer_used_cert_chain[0].buffer),
                     data, data_size);
#else
    libspdm_hash_all(
        spdm_context->connection_info.algorithm.base_hash_algo,
        data, data_size,
        spdm_context->connection_info.peer_used_cert_chain[0].buffer_hash);
    spdm_context->connection_info.peer_used_cert_chain[0].buffer_hash_size =
        libspdm_get_hash_size(spdm_context->connection_info.algorithm.base_hash_algo);
    libspdm_get_leaf_cert_public_key_from_cert_chain(
        spdm_context->connection_info.algorithm.base_hash_algo,
        spdm_context->connection_info.algorithm.base_asym_algo,
        data, data_size,
        &spdm_context->connection_info.peer_used_cert_chain[0].leaf_cert_public_key);
#endif

    libspdm_zero_mem(measurement_hash, sizeof(measurement_hash));
    status = libspdm_challenge(
        spdm_context, NULL, 0,
        SPDM_CHALLENGE_REQUEST_NO_MEASUREMENT_SUMMARY_HASH,
        measurement_hash, NULL);
    assert_int_equal(status, LIBSPDM_STATUS_ERROR_PEER);
#if LIBSPDM_RECORD_TRANSCRIPT_DATA_SUPPORT
    assert_int_equal(spdm_context->transcript.message_c.buffer_size, 0);
#endif
    free(data);
}

/**
 * Test 5: the requester is setup correctly (see Test 2), but receives an ERROR
 * message indicating the Busy status of the responder.
 * Expected behavior: client returns a status of RETURN_DEVICE_ERROR, and the ""C""
 * transcript buffer is reset.
 **/
void libspdm_test_requester_challenge_case5(void **state)
{
    libspdm_return_t status;
    libspdm_test_context_t *spdm_test_context;
    libspdm_context_t *spdm_context;
    uint8_t measurement_hash[LIBSPDM_MAX_HASH_SIZE];
    void *data;
    size_t data_size;
    void *hash;
    size_t hash_size;

    spdm_test_context = *state;
    spdm_context = spdm_test_context->spdm_context;
    spdm_test_context->case_id = 0x5;
    spdm_context->connection_info.connection_state =
        LIBSPDM_CONNECTION_STATE_NEGOTIATED;
    spdm_context->connection_info.capability.flags = 0;
    spdm_context->connection_info.capability.flags |=
        SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_CHAL_CAP;
    libspdm_read_responder_public_certificate_chain(m_libspdm_use_hash_algo,
                                                    m_libspdm_use_asym_algo, &data,
                                                    &data_size, &hash, &hash_size);
    libspdm_reset_message_a(spdm_context);
    libspdm_reset_message_b(spdm_context);
    libspdm_reset_message_c(spdm_context);
    spdm_context->connection_info.algorithm.base_hash_algo =
        m_libspdm_use_hash_algo;
    spdm_context->connection_info.algorithm.base_asym_algo =
        m_libspdm_use_asym_algo;

    spdm_context->connection_info.version = SPDM_MESSAGE_VERSION_11 <<
                                            SPDM_VERSION_NUMBER_SHIFT_BIT;"|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\challenge.c|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\challenge.c|b2cae51dc0aa4c11be1007a23ffae513
"#if LIBSPDM_RECORD_TRANSCRIPT_DATA_SUPPORT
    spdm_context->connection_info.peer_used_cert_chain[0].buffer_size =
        data_size;
    libspdm_copy_mem(spdm_context->connection_info.peer_used_cert_chain[0].buffer,
                     sizeof(spdm_context->connection_info.peer_used_cert_chain[0].buffer),
                     data, data_size);
#else
    libspdm_hash_all(
        spdm_context->connection_info.algorithm.base_hash_algo,
        data, data_size,
        spdm_context->connection_info.peer_used_cert_chain[0].buffer_hash);
    spdm_context->connection_info.peer_used_cert_chain[0].buffer_hash_size =
        libspdm_get_hash_size(spdm_context->connection_info.algorithm.base_hash_algo);
    libspdm_get_leaf_cert_public_key_from_cert_chain(
        spdm_context->connection_info.algorithm.base_hash_algo,
        spdm_context->connection_info.algorithm.base_asym_algo,
        data, data_size,
        &spdm_context->connection_info.peer_used_cert_chain[0].leaf_cert_public_key);
#endif

    libspdm_zero_mem(measurement_hash, sizeof(measurement_hash));
    status = libspdm_challenge(
        spdm_context, NULL, 0,
        SPDM_CHALLENGE_REQUEST_NO_MEASUREMENT_SUMMARY_HASH,
        measurement_hash, NULL);
    assert_int_equal(status, LIBSPDM_STATUS_BUSY_PEER);
#if LIBSPDM_RECORD_TRANSCRIPT_DATA_SUPPORT
    assert_int_equal(spdm_context->transcript.message_c.buffer_size, 0);
#endif
    free(data);
}

/**
 * Test 6: the requester is setup correctly (see Test 2), but, on the first try,
 * receiving a Busy ERROR message, and on retry, receiving a correct CHALLENGE_AUTH
 * message to the challenge, with no opaque data and a signature on the sent nonce.
 * Expected behavior: client returns a status of RETURN_SUCCESS.
 **/
void libspdm_test_requester_challenge_case6(void **state)
{
    libspdm_return_t status;
    libspdm_test_context_t *spdm_test_context;
    libspdm_context_t *spdm_context;
    uint8_t measurement_hash[LIBSPDM_MAX_HASH_SIZE];
    void *data;
    size_t data_size;
    void *hash;
    size_t hash_size;

    spdm_test_context = *state;
    spdm_context = spdm_test_context->spdm_context;
    spdm_test_context->case_id = 0x6;
    spdm_context->retry_times = 3;
    spdm_context->connection_info.connection_state =
        LIBSPDM_CONNECTION_STATE_NEGOTIATED;
    spdm_context->connection_info.capability.flags = 0;
    spdm_context->connection_info.capability.flags |=
        SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_CHAL_CAP;
    libspdm_read_responder_public_certificate_chain(m_libspdm_use_hash_algo,
                                                    m_libspdm_use_asym_algo, &data,
                                                    &data_size, &hash, &hash_size);
    libspdm_reset_message_a(spdm_context);
    libspdm_reset_message_b(spdm_context);
    libspdm_reset_message_c(spdm_context);
    spdm_context->connection_info.algorithm.base_hash_algo =
        m_libspdm_use_hash_algo;
    spdm_context->connection_info.algorithm.base_asym_algo =
        m_libspdm_use_asym_algo;

    spdm_context->connection_info.version = SPDM_MESSAGE_VERSION_11 <<
                                            SPDM_VERSION_NUMBER_SHIFT_BIT;

#if LIBSPDM_RECORD_TRANSCRIPT_DATA_SUPPORT
    spdm_context->connection_info.peer_used_cert_chain[0].buffer_size =
        data_size;
    libspdm_copy_mem(spdm_context->connection_info.peer_used_cert_chain[0].buffer,
                     sizeof(spdm_context->connection_info.peer_used_cert_chain[0].buffer),
                     data, data_size);
#else
    libspdm_hash_all(
        spdm_context->connection_info.algorithm.base_hash_algo,
        data, data_size,
        spdm_context->connection_info.peer_used_cert_chain[0].buffer_hash);
    spdm_context->connection_info.peer_used_cert_chain[0].buffer_hash_size =
        libspdm_get_hash_size(spdm_context->connection_info.algorithm.base_hash_algo);
    libspdm_get_leaf_cert_public_key_from_cert_chain(
        spdm_context->connection_info.algorithm.base_hash_algo,
        spdm_context->connection_info.algorithm.base_asym_algo,
        data, data_size,
        &spdm_context->connection_info.peer_used_cert_chain[0].leaf_cert_public_key);
#endif

    libspdm_zero_mem(measurement_hash, sizeof(measurement_hash));
    status = libspdm_challenge(
        spdm_context, NULL, 0,
        SPDM_CHALLENGE_REQUEST_NO_MEASUREMENT_SUMMARY_HASH,
        measurement_hash, NULL);
    assert_int_equal(status, LIBSPDM_STATUS_SUCCESS);
    free(data);
}"|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\challenge.c|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\challenge.c|bdd95c35ce8d4a798cf6337c512c2af0
"/**
 * Test 7: the requester is setup correctly (see Test 2), but receives an ERROR
 * message indicating the RequestResynch status of the responder.
 * Expected behavior: client returns a status of RETURN_DEVICE_ERROR, the ""C""
 * transcript buffer is reset, and the communication is reset to expect a new
 * GET_VERSION message.
 **/
void libspdm_test_requester_challenge_case7(void **state)
{
    libspdm_return_t status;
    libspdm_test_context_t *spdm_test_context;
    libspdm_context_t *spdm_context;
    uint8_t measurement_hash[LIBSPDM_MAX_HASH_SIZE];
    void *data;
    size_t data_size;
    void *hash;
    size_t hash_size;

    spdm_test_context = *state;
    spdm_context = spdm_test_context->spdm_context;
    spdm_test_context->case_id = 0x7;
    spdm_context->connection_info.connection_state =
        LIBSPDM_CONNECTION_STATE_NEGOTIATED;
    spdm_context->connection_info.capability.flags = 0;
    spdm_context->connection_info.capability.flags |=
        SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_CHAL_CAP;
    libspdm_read_responder_public_certificate_chain(m_libspdm_use_hash_algo,
                                                    m_libspdm_use_asym_algo, &data,
                                                    &data_size, &hash, &hash_size);
    libspdm_reset_message_a(spdm_context);
    libspdm_reset_message_b(spdm_context);
    libspdm_reset_message_c(spdm_context);
    spdm_context->connection_info.algorithm.base_hash_algo =
        m_libspdm_use_hash_algo;
    spdm_context->connection_info.algorithm.base_asym_algo =
        m_libspdm_use_asym_algo;

    spdm_context->connection_info.version = SPDM_MESSAGE_VERSION_11 <<
                                            SPDM_VERSION_NUMBER_SHIFT_BIT;

#if LIBSPDM_RECORD_TRANSCRIPT_DATA_SUPPORT
    spdm_context->connection_info.peer_used_cert_chain[0].buffer_size =
        data_size;
    libspdm_copy_mem(spdm_context->connection_info.peer_used_cert_chain[0].buffer,
                     sizeof(spdm_context->connection_info.peer_used_cert_chain[0].buffer),
                     data, data_size);
#else
    libspdm_hash_all(
        spdm_context->connection_info.algorithm.base_hash_algo,
        data, data_size,
        spdm_context->connection_info.peer_used_cert_chain[0].buffer_hash);
    spdm_context->connection_info.peer_used_cert_chain[0].buffer_hash_size =
        libspdm_get_hash_size(spdm_context->connection_info.algorithm.base_hash_algo);
    libspdm_get_leaf_cert_public_key_from_cert_chain(
        spdm_context->connection_info.algorithm.base_hash_algo,
        spdm_context->connection_info.algorithm.base_asym_algo,
        data, data_size,
        &spdm_context->connection_info.peer_used_cert_chain[0].leaf_cert_public_key);
#endif

    libspdm_zero_mem(measurement_hash, sizeof(measurement_hash));
    status = libspdm_challenge(
        spdm_context, NULL, 0,
        SPDM_CHALLENGE_REQUEST_NO_MEASUREMENT_SUMMARY_HASH,
        measurement_hash, NULL);
    assert_int_equal(status, LIBSPDM_STATUS_RESYNCH_PEER);
    assert_int_equal(spdm_context->connection_info.connection_state,
                     LIBSPDM_CONNECTION_STATE_NOT_STARTED);
#if LIBSPDM_RECORD_TRANSCRIPT_DATA_SUPPORT
    assert_int_equal(spdm_context->transcript.message_c.buffer_size, 0);
#endif
    free(data);
}

/**
 * Test 8: the requester is setup correctly (see Test 2), but receives an ERROR
 * message indicating the ResponseNotReady status of the responder.
 * Expected behavior: client returns a status of RETURN_DEVICE_ERROR, and the ""C""
 * buffer stores nothing.
 **/
void libspdm_test_requester_challenge_case8(void **state)
{
    libspdm_return_t status;
    libspdm_test_context_t *spdm_test_context;
    libspdm_context_t *spdm_context;
    uint8_t measurement_hash[LIBSPDM_MAX_HASH_SIZE];
    void *data;
    size_t data_size;
    void *hash;
    size_t hash_size;

    spdm_test_context = *state;
    spdm_context = spdm_test_context->spdm_context;
    spdm_test_context->case_id = 0x8;
    spdm_context->connection_info.connection_state =
        LIBSPDM_CONNECTION_STATE_NEGOTIATED;
    spdm_context->connection_info.capability.flags = 0;
    spdm_context->connection_info.capability.flags |=
        SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_CHAL_CAP;
    libspdm_read_responder_public_certificate_chain(m_libspdm_use_hash_algo,
                                                    m_libspdm_use_asym_algo, &data,
                                                    &data_size, &hash, &hash_size);
    libspdm_reset_message_a(spdm_context);
    libspdm_reset_message_b(spdm_context);
    libspdm_reset_message_c(spdm_context);
    spdm_context->connection_info.algorithm.base_hash_algo =
        m_libspdm_use_hash_algo;
    spdm_context->connection_info.algorithm.base_asym_algo =
        m_libspdm_use_asym_algo;"|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\challenge.c|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\challenge.c|411ee834c110486c8d90983166138d04
"spdm_context->connection_info.version = SPDM_MESSAGE_VERSION_11 <<
                                            SPDM_VERSION_NUMBER_SHIFT_BIT;
#if LIBSPDM_RECORD_TRANSCRIPT_DATA_SUPPORT
    spdm_context->connection_info.peer_used_cert_chain[0].buffer_size =
        data_size;
    libspdm_copy_mem(spdm_context->connection_info.peer_used_cert_chain[0].buffer,
                     sizeof(spdm_context->connection_info.peer_used_cert_chain[0].buffer),
                     data, data_size);
#else
    libspdm_hash_all(
        spdm_context->connection_info.algorithm.base_hash_algo,
        data, data_size,
        spdm_context->connection_info.peer_used_cert_chain[0].buffer_hash);
    spdm_context->connection_info.peer_used_cert_chain[0].buffer_hash_size =
        libspdm_get_hash_size(spdm_context->connection_info.algorithm.base_hash_algo);
    libspdm_get_leaf_cert_public_key_from_cert_chain(
        spdm_context->connection_info.algorithm.base_hash_algo,
        spdm_context->connection_info.algorithm.base_asym_algo,
        data, data_size,
        &spdm_context->connection_info.peer_used_cert_chain[0].leaf_cert_public_key);
#endif

    libspdm_zero_mem(measurement_hash, sizeof(measurement_hash));

    status = libspdm_challenge(
        spdm_context, NULL, 0,
        SPDM_CHALLENGE_REQUEST_NO_MEASUREMENT_SUMMARY_HASH,
        measurement_hash, NULL);
    assert_int_equal(status, LIBSPDM_STATUS_NOT_READY_PEER);
#if LIBSPDM_RECORD_TRANSCRIPT_DATA_SUPPORT
    assert_int_equal (spdm_context->transcript.message_c.buffer_size, 0);
#endif
    free(data);
}

/**
 * Test 9: the requester is setup correctly (see Test 2), but, on the first try,
 * receiving a ResponseNotReady ERROR message, and on retry, receiving a correct
 * CHALLENGE_AUTH message to the challenge, with no opaque data and a signature
 * on the sent nonce.
 * Expected behavior: client returns a status of RETURN_SUCCESS.
 **/
void libspdm_test_requester_challenge_case9(void **state)
{
    libspdm_return_t status;
    libspdm_test_context_t *spdm_test_context;
    libspdm_context_t *spdm_context;
    uint8_t measurement_hash[LIBSPDM_MAX_HASH_SIZE];
    void *data;
    size_t data_size;
    void *hash;
    size_t hash_size;

    spdm_test_context = *state;
    spdm_context = spdm_test_context->spdm_context;
    spdm_test_context->case_id = 0x9;
    spdm_context->connection_info.connection_state = LIBSPDM_CONNECTION_STATE_NEGOTIATED;
    spdm_context->connection_info.capability.flags = 0;
    spdm_context->connection_info.capability.flags |= SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_CHAL_CAP;
    libspdm_read_responder_public_certificate_chain(m_libspdm_use_hash_algo,
                                                    m_libspdm_use_asym_algo, &data,
                                                    &data_size, &hash, &hash_size);
    libspdm_reset_message_a(spdm_context);
    libspdm_reset_message_b(spdm_context);
    libspdm_reset_message_c(spdm_context);
    spdm_context->connection_info.algorithm.base_hash_algo = m_libspdm_use_hash_algo;
    spdm_context->connection_info.algorithm.base_asym_algo = m_libspdm_use_asym_algo;

    spdm_context->connection_info.version = SPDM_MESSAGE_VERSION_11 <<
                                            SPDM_VERSION_NUMBER_SHIFT_BIT;

#if LIBSPDM_RECORD_TRANSCRIPT_DATA_SUPPORT
    spdm_context->connection_info.peer_used_cert_chain[0].buffer_size = data_size;
    libspdm_copy_mem(spdm_context->connection_info.peer_used_cert_chain[0].buffer,
                     sizeof(spdm_context->connection_info.peer_used_cert_chain[0].buffer),
                     data, data_size);
#else
    libspdm_hash_all(
        spdm_context->connection_info.algorithm.base_hash_algo,
        data, data_size,
        spdm_context->connection_info.peer_used_cert_chain[0].buffer_hash);
    spdm_context->connection_info.peer_used_cert_chain[0].buffer_hash_size =
        libspdm_get_hash_size(spdm_context->connection_info.algorithm.base_hash_algo);
    libspdm_get_leaf_cert_public_key_from_cert_chain(
        spdm_context->connection_info.algorithm.base_hash_algo,
        spdm_context->connection_info.algorithm.base_asym_algo,
        data, data_size,
        &spdm_context->connection_info.peer_used_cert_chain[0].leaf_cert_public_key);
#endif

    libspdm_zero_mem(measurement_hash, sizeof(measurement_hash));
    status = libspdm_challenge(
        spdm_context, NULL, 0,
        SPDM_CHALLENGE_REQUEST_NO_MEASUREMENT_SUMMARY_HASH,
        measurement_hash, NULL);
    if (LIBSPDM_RESPOND_IF_READY_SUPPORT) {
        assert_int_equal(status, LIBSPDM_STATUS_SUCCESS);
    } else {
        assert_int_equal(status, LIBSPDM_STATUS_NOT_READY_PEER);
    }
    free(data);
}"|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\challenge.c|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\challenge.c|31a9b2f8f33e44cc930801afd903f652
"/**
 * Test 10: the requester is not setup correctly to send a CHALLENGE message.
 * Specifically, it has *not* received the capability for challenge, although it
 * has received capability for executing both hash and signature algorithms.
 * The remaining setup and message exchange were executed correctly (see Test 2).
 * Expected behavior: client returns a status of RETURN_DEVICE_ERROR, and the ""C""
 * transcript buffer is not set.
 **/
void libspdm_test_requester_challenge_case10(void **state) {
    libspdm_return_t status;
    libspdm_test_context_t    *spdm_test_context;
    libspdm_context_t  *spdm_context;
    uint8_t measurement_hash[LIBSPDM_MAX_HASH_SIZE];
    void                 *data;
    size_t data_size;
    void                 *hash;
    size_t hash_size;

    spdm_test_context = *state;
    spdm_context = spdm_test_context->spdm_context;
    spdm_test_context->case_id = 0xA;
    spdm_context->connection_info.connection_state = LIBSPDM_CONNECTION_STATE_NEGOTIATED;
    spdm_context->connection_info.capability.flags = 0;
    /* spdm_context->connection_info.capability.flags |= SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_CHAL_CAP;*/
    libspdm_read_responder_public_certificate_chain (m_libspdm_use_hash_algo,
                                                     m_libspdm_use_asym_algo,
                                                     &data, &data_size,
                                                     &hash, &hash_size);
    libspdm_reset_message_a(spdm_context);
    libspdm_reset_message_b(spdm_context);
    libspdm_reset_message_c(spdm_context);
    spdm_context->connection_info.algorithm.base_hash_algo = m_libspdm_use_hash_algo;
    spdm_context->connection_info.algorithm.base_asym_algo = m_libspdm_use_asym_algo;

    spdm_context->connection_info.version = SPDM_MESSAGE_VERSION_11 <<
                                            SPDM_VERSION_NUMBER_SHIFT_BIT;

#if LIBSPDM_RECORD_TRANSCRIPT_DATA_SUPPORT
    spdm_context->connection_info.peer_used_cert_chain[0].buffer_size =
        data_size;
    libspdm_copy_mem(spdm_context->connection_info.peer_used_cert_chain[0].buffer,
                     sizeof(spdm_context->connection_info.peer_used_cert_chain[0].buffer),
                     data, data_size);
#else
    libspdm_hash_all(
        spdm_context->connection_info.algorithm.base_hash_algo,
        data, data_size,
        spdm_context->connection_info.peer_used_cert_chain[0].buffer_hash);
    spdm_context->connection_info.peer_used_cert_chain[0].buffer_hash_size =
        libspdm_get_hash_size(spdm_context->connection_info.algorithm.base_hash_algo);
    libspdm_get_leaf_cert_public_key_from_cert_chain(
        spdm_context->connection_info.algorithm.base_hash_algo,
        spdm_context->connection_info.algorithm.base_asym_algo,
        data, data_size,
        &spdm_context->connection_info.peer_used_cert_chain[0].leaf_cert_public_key);
#endif

    libspdm_zero_mem (measurement_hash, sizeof(measurement_hash));
    status = libspdm_challenge (spdm_context, NULL, 0,
                                SPDM_CHALLENGE_REQUEST_NO_MEASUREMENT_SUMMARY_HASH,
                                measurement_hash, NULL);
    assert_int_equal (status, LIBSPDM_STATUS_UNSUPPORTED_CAP);
#if LIBSPDM_RECORD_TRANSCRIPT_DATA_SUPPORT
    assert_int_equal (spdm_context->transcript.message_c.buffer_size, 0);
#endif
    free(data);
}

/**
 * Test 11: the requester is setup correctly (see Test 2), but receives a malformed
 * response message, smaller then a standard SPDM message header.
 * Expected behavior: client returns a status of RETURN_DEVICE_ERROR,.
 **/
void libspdm_test_requester_challenge_case11(void **state) {
    libspdm_return_t status;
    libspdm_test_context_t    *spdm_test_context;
    libspdm_context_t  *spdm_context;
    uint8_t measurement_hash[LIBSPDM_MAX_HASH_SIZE];
    void                 *data;
    size_t data_size;
    void                 *hash;
    size_t hash_size;

    spdm_test_context = *state;
    spdm_context = spdm_test_context->spdm_context;
    spdm_test_context->case_id = 0xB;
    spdm_context->connection_info.connection_state = LIBSPDM_CONNECTION_STATE_NEGOTIATED;
    spdm_context->connection_info.capability.flags = 0;
    spdm_context->connection_info.capability.flags |= SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_CHAL_CAP;
    libspdm_read_responder_public_certificate_chain (m_libspdm_use_hash_algo,
                                                     m_libspdm_use_asym_algo,
                                                     &data, &data_size,
                                                     &hash, &hash_size);
    libspdm_reset_message_a(spdm_context);
    libspdm_reset_message_b(spdm_context);
    libspdm_reset_message_c(spdm_context);
    spdm_context->connection_info.algorithm.base_hash_algo = m_libspdm_use_hash_algo;
    spdm_context->connection_info.algorithm.base_asym_algo = m_libspdm_use_asym_algo;"|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\challenge.c|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\challenge.c|91b9a269803d4ff29762476b363f1bd2
"spdm_context->connection_info.version = SPDM_MESSAGE_VERSION_11 <<
                                            SPDM_VERSION_NUMBER_SHIFT_BIT;

#if LIBSPDM_RECORD_TRANSCRIPT_DATA_SUPPORT
    spdm_context->connection_info.peer_used_cert_chain[0].buffer_size =
        data_size;
    libspdm_copy_mem(spdm_context->connection_info.peer_used_cert_chain[0].buffer,
                     sizeof(spdm_context->connection_info.peer_used_cert_chain[0].buffer),
                     data, data_size);
#else
    libspdm_hash_all(
        spdm_context->connection_info.algorithm.base_hash_algo,
        data, data_size,
        spdm_context->connection_info.peer_used_cert_chain[0].buffer_hash);
    spdm_context->connection_info.peer_used_cert_chain[0].buffer_hash_size =
        libspdm_get_hash_size(spdm_context->connection_info.algorithm.base_hash_algo);
    libspdm_get_leaf_cert_public_key_from_cert_chain(
        spdm_context->connection_info.algorithm.base_hash_algo,
        spdm_context->connection_info.algorithm.base_asym_algo,
        data, data_size,
        &spdm_context->connection_info.peer_used_cert_chain[0].leaf_cert_public_key);
#endif

    libspdm_zero_mem (measurement_hash, sizeof(measurement_hash));
    status = libspdm_challenge (spdm_context, NULL, 0,
                                SPDM_CHALLENGE_REQUEST_NO_MEASUREMENT_SUMMARY_HASH,
                                measurement_hash, NULL);
    assert_int_equal (status, LIBSPDM_STATUS_INVALID_MSG_FIELD);
    free(data);
}

/**
 * Test 12: the requester is setup correctly (see Test 2), but receives a malformed
 * response message, with version (1.0) different from the request (1.1).
 * The remaining message data is as a correct CHALLENGE_AUTH message.
 * Expected behavior: client returns a status of RETURN_DEVICE_ERROR.
 **/
void libspdm_test_requester_challenge_case12(void **state) {
    libspdm_return_t status;
    libspdm_test_context_t    *spdm_test_context;
    libspdm_context_t  *spdm_context;
    uint8_t measurement_hash[LIBSPDM_MAX_HASH_SIZE];
    void                 *data;
    size_t data_size;
    void                 *hash;
    size_t hash_size;

    spdm_test_context = *state;
    spdm_context = spdm_test_context->spdm_context;
    spdm_test_context->case_id = 0xC;
    spdm_context->connection_info.connection_state = LIBSPDM_CONNECTION_STATE_NEGOTIATED;
    spdm_context->connection_info.capability.flags = 0;
    spdm_context->connection_info.capability.flags |= SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_CHAL_CAP;
    libspdm_read_responder_public_certificate_chain (m_libspdm_use_hash_algo,
                                                     m_libspdm_use_asym_algo,
                                                     &data, &data_size,
                                                     &hash, &hash_size);
    libspdm_reset_message_a(spdm_context);
    libspdm_reset_message_b(spdm_context);
    libspdm_reset_message_c(spdm_context);
    spdm_context->connection_info.algorithm.base_hash_algo = m_libspdm_use_hash_algo;
    spdm_context->connection_info.algorithm.base_asym_algo = m_libspdm_use_asym_algo;

    spdm_context->connection_info.version = SPDM_MESSAGE_VERSION_11 <<
                                            SPDM_VERSION_NUMBER_SHIFT_BIT;

#if LIBSPDM_RECORD_TRANSCRIPT_DATA_SUPPORT
    spdm_context->connection_info.peer_used_cert_chain[0].buffer_size =
        data_size;
    libspdm_copy_mem(spdm_context->connection_info.peer_used_cert_chain[0].buffer,
                     sizeof(spdm_context->connection_info.peer_used_cert_chain[0].buffer),
                     data, data_size);
#else
    libspdm_hash_all(
        spdm_context->connection_info.algorithm.base_hash_algo,
        data, data_size,
        spdm_context->connection_info.peer_used_cert_chain[0].buffer_hash);
    spdm_context->connection_info.peer_used_cert_chain[0].buffer_hash_size =
        libspdm_get_hash_size(spdm_context->connection_info.algorithm.base_hash_algo);
    libspdm_get_leaf_cert_public_key_from_cert_chain(
        spdm_context->connection_info.algorithm.base_hash_algo,
        spdm_context->connection_info.algorithm.base_asym_algo,
        data, data_size,
        &spdm_context->connection_info.peer_used_cert_chain[0].leaf_cert_public_key);
#endif

    libspdm_zero_mem (measurement_hash, sizeof(measurement_hash));
    status = libspdm_challenge (spdm_context, NULL, 0,
                                SPDM_CHALLENGE_REQUEST_NO_MEASUREMENT_SUMMARY_HASH,
                                measurement_hash, NULL);
    assert_int_equal (status, LIBSPDM_STATUS_INVALID_MSG_FIELD);
    free(data);
}"|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\challenge.c|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\challenge.c|f5eb4eb946ff457488114cd8764a952c
"/**
 * Test 13: the requester is setup correctly (see Test 2), but receives a malformed
 * response message, with wrong request_response_code (CHALLENGE 0x83 instead of
 * CHALLENGE_AUTH 0x03).
 * The remaining message data is as a correct CHALLENGE_AUTH message.
 * Expected behavior: client returns a status of RETURN_DEVICE_ERROR.
 **/
void libspdm_test_requester_challenge_case13(void **state) {
    libspdm_return_t status;
    libspdm_test_context_t    *spdm_test_context;
    libspdm_context_t  *spdm_context;
    uint8_t measurement_hash[LIBSPDM_MAX_HASH_SIZE];
    void                 *data;
    size_t data_size;
    void                 *hash;
    size_t hash_size;

    spdm_test_context = *state;
    spdm_context = spdm_test_context->spdm_context;
    spdm_test_context->case_id = 0xD;
    spdm_context->connection_info.connection_state = LIBSPDM_CONNECTION_STATE_NEGOTIATED;
    spdm_context->connection_info.capability.flags = 0;
    spdm_context->connection_info.capability.flags |= SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_CHAL_CAP;
    libspdm_read_responder_public_certificate_chain (m_libspdm_use_hash_algo,
                                                     m_libspdm_use_asym_algo,
                                                     &data, &data_size,
                                                     &hash, &hash_size);
    libspdm_reset_message_a(spdm_context);
    libspdm_reset_message_b(spdm_context);
    libspdm_reset_message_c(spdm_context);
    spdm_context->connection_info.algorithm.base_hash_algo = m_libspdm_use_hash_algo;
    spdm_context->connection_info.algorithm.base_asym_algo = m_libspdm_use_asym_algo;

    spdm_context->connection_info.version = SPDM_MESSAGE_VERSION_11 <<
                                            SPDM_VERSION_NUMBER_SHIFT_BIT;

#if LIBSPDM_RECORD_TRANSCRIPT_DATA_SUPPORT
    spdm_context->connection_info.peer_used_cert_chain[0].buffer_size =
        data_size;
    libspdm_copy_mem(spdm_context->connection_info.peer_used_cert_chain[0].buffer,
                     sizeof(spdm_context->connection_info.peer_used_cert_chain[0].buffer),
                     data, data_size);
#else
    libspdm_hash_all(
        spdm_context->connection_info.algorithm.base_hash_algo,
        data, data_size,
        spdm_context->connection_info.peer_used_cert_chain[0].buffer_hash);
    spdm_context->connection_info.peer_used_cert_chain[0].buffer_hash_size =
        libspdm_get_hash_size(spdm_context->connection_info.algorithm.base_hash_algo);
    libspdm_get_leaf_cert_public_key_from_cert_chain(
        spdm_context->connection_info.algorithm.base_hash_algo,
        spdm_context->connection_info.algorithm.base_asym_algo,
        data, data_size,
        &spdm_context->connection_info.peer_used_cert_chain[0].leaf_cert_public_key);
#endif

    libspdm_zero_mem (measurement_hash, sizeof(measurement_hash));
    status = libspdm_challenge (spdm_context, NULL, 0,
                                SPDM_CHALLENGE_REQUEST_NO_MEASUREMENT_SUMMARY_HASH,
                                measurement_hash, NULL);
    assert_int_equal (status, LIBSPDM_STATUS_INVALID_MSG_FIELD);
    free(data);
}

/**
 * Test 14: the requester is setup correctly (see Test 2), but receives a malformed
 * response message, with a slot number different from the requested.
 * The remaining message data is as a correct CHALLENGE_AUTH message.
 * Expected behavior: client returns a status of RETURN_DEVICE_ERROR.
 **/
void libspdm_test_requester_challenge_case14(void **state) {
    libspdm_return_t status;
    libspdm_test_context_t    *spdm_test_context;
    libspdm_context_t  *spdm_context;
    uint8_t measurement_hash[LIBSPDM_MAX_HASH_SIZE];
    void                 *data;
    size_t data_size;
    void                 *hash;
    size_t hash_size;

    spdm_test_context = *state;
    spdm_context = spdm_test_context->spdm_context;
    spdm_test_context->case_id = 0xE;
    spdm_context->connection_info.connection_state = LIBSPDM_CONNECTION_STATE_NEGOTIATED;
    spdm_context->connection_info.capability.flags = 0;
    spdm_context->connection_info.capability.flags |= SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_CHAL_CAP;
    libspdm_read_responder_public_certificate_chain (m_libspdm_use_hash_algo,
                                                     m_libspdm_use_asym_algo,
                                                     &data, &data_size,
                                                     &hash, &hash_size);
    libspdm_reset_message_a(spdm_context);
    libspdm_reset_message_b(spdm_context);
    libspdm_reset_message_c(spdm_context);
    spdm_context->connection_info.algorithm.base_hash_algo = m_libspdm_use_hash_algo;
    spdm_context->connection_info.algorithm.base_asym_algo = m_libspdm_use_asym_algo;

    spdm_context->connection_info.version = SPDM_MESSAGE_VERSION_11 <<
                                            SPDM_VERSION_NUMBER_SHIFT_BIT;"|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\challenge.c|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\challenge.c|84cd1fa716464eda94c64abeca669bd0
"#if LIBSPDM_RECORD_TRANSCRIPT_DATA_SUPPORT
    spdm_context->connection_info.peer_used_cert_chain[0].buffer_size =
        data_size;
    libspdm_copy_mem(spdm_context->connection_info.peer_used_cert_chain[0].buffer,
                     sizeof(spdm_context->connection_info.peer_used_cert_chain[0].buffer),
                     data, data_size);
#else
    libspdm_hash_all(
        spdm_context->connection_info.algorithm.base_hash_algo,
        data, data_size,
        spdm_context->connection_info.peer_used_cert_chain[0].buffer_hash);
    spdm_context->connection_info.peer_used_cert_chain[0].buffer_hash_size =
        libspdm_get_hash_size(spdm_context->connection_info.algorithm.base_hash_algo);
    libspdm_get_leaf_cert_public_key_from_cert_chain(
        spdm_context->connection_info.algorithm.base_hash_algo,
        spdm_context->connection_info.algorithm.base_asym_algo,
        data, data_size,
        &spdm_context->connection_info.peer_used_cert_chain[0].leaf_cert_public_key);
#endif

    libspdm_zero_mem (measurement_hash, sizeof(measurement_hash));
    status = libspdm_challenge (spdm_context, NULL, 0,
                                SPDM_CHALLENGE_REQUEST_NO_MEASUREMENT_SUMMARY_HASH,
                                measurement_hash, NULL);
    assert_int_equal (status, LIBSPDM_STATUS_INVALID_MSG_FIELD);
    free(data);
}

/**
 * Test 15: free to be populated by test.
 **/
void libspdm_test_requester_challenge_case15(void **state) {
}

/**
 * Test 16: the requester is setup correctly to send a CHALLENGE message:
 * - it has flags indicating that the previous messages were sent
 * (GET_CAPABILITIES, NEGOTIATE_ALGORITHMS, and GET_DIGESTS).
 * - it received the CAPABILITIES message, allowing the use of hash and digital
 * signature algorithms, and the use of challenges.
 * - it has the responder's certificate chain.
 * The CHALLENGE message requests usage of the first certificate in the chain
 * (param1=0) and do not request measurements (param2=0).
 * The received CHALLENGE_AUTH message correctly responds to the challenge, opaque
 * data with bytes from the string ""libspdm"", and a signature on the sent nonce.
 * Expected behavior: client returns a status of RETURN_SUCCESS.
 **/
void libspdm_test_requester_challenge_case16(void **state) {
    libspdm_return_t status;
    libspdm_test_context_t    *spdm_test_context;
    libspdm_context_t  *spdm_context;
    uint8_t measurement_hash[LIBSPDM_MAX_HASH_SIZE];
    void                 *data;
    size_t data_size;
    void                 *hash;
    size_t hash_size;
    uint8_t opaque_data[SPDM_MAX_OPAQUE_DATA_SIZE];
    size_t opaque_data_size;

    spdm_test_context = *state;
    spdm_context = spdm_test_context->spdm_context;
    spdm_test_context->case_id = 0x10;
    spdm_context->connection_info.connection_state = LIBSPDM_CONNECTION_STATE_NEGOTIATED;
    spdm_context->connection_info.capability.flags = 0;
    spdm_context->connection_info.capability.flags |= SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_CHAL_CAP;
    libspdm_read_responder_public_certificate_chain (m_libspdm_use_hash_algo,
                                                     m_libspdm_use_asym_algo,
                                                     &data, &data_size,
                                                     &hash, &hash_size);
    libspdm_reset_message_a(spdm_context);
    libspdm_reset_message_b(spdm_context);
    libspdm_reset_message_c(spdm_context);
    spdm_context->connection_info.algorithm.base_hash_algo = m_libspdm_use_hash_algo;
    spdm_context->connection_info.algorithm.base_asym_algo = m_libspdm_use_asym_algo;

    spdm_context->connection_info.version = SPDM_MESSAGE_VERSION_11 <<
                                            SPDM_VERSION_NUMBER_SHIFT_BIT;

#if LIBSPDM_RECORD_TRANSCRIPT_DATA_SUPPORT
    spdm_context->connection_info.peer_used_cert_chain[0].buffer_size =
        data_size;
    libspdm_copy_mem(spdm_context->connection_info.peer_used_cert_chain[0].buffer,
                     sizeof(spdm_context->connection_info.peer_used_cert_chain[0].buffer),
                     data, data_size);
#else
    libspdm_hash_all(
        spdm_context->connection_info.algorithm.base_hash_algo,
        data, data_size,
        spdm_context->connection_info.peer_used_cert_chain[0].buffer_hash);
    spdm_context->connection_info.peer_used_cert_chain[0].buffer_hash_size =
        libspdm_get_hash_size(spdm_context->connection_info.algorithm.base_hash_algo);
    libspdm_get_leaf_cert_public_key_from_cert_chain(
        spdm_context->connection_info.algorithm.base_hash_algo,
        spdm_context->connection_info.algorithm.base_asym_algo,
        data, data_size,
        &spdm_context->connection_info.peer_used_cert_chain[0].leaf_cert_public_key);
#endif

    opaque_data_size = sizeof(opaque_data);"|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\challenge.c|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\challenge.c|764ad5e030584d96ba99db8908f50587
"opaque_data_size = sizeof(opaque_data);

    libspdm_zero_mem (measurement_hash, sizeof(measurement_hash));
    status = libspdm_challenge_ex (spdm_context, NULL, 0,
                                   SPDM_CHALLENGE_REQUEST_NO_MEASUREMENT_SUMMARY_HASH,
                                   measurement_hash, NULL, NULL, NULL, NULL,
                                   opaque_data, &opaque_data_size);
    assert_int_equal(status, LIBSPDM_STATUS_SUCCESS);
    assert_int_equal(opaque_data_size, strlen(""libspdm""));
    assert_memory_equal(opaque_data, ""libspdm"", opaque_data_size);
    free(data);
}

/**
 * Test 17: the requester is setup correctly to send a CHALLENGE message:
 * - it has flags indicating that the previous messages were sent
 * (GET_CAPABILITIES, NEGOTIATE_ALGORITHMS, and GET_DIGESTS).
 * - it received the CAPABILITIES message, allowing the use of hash and digital
 * signature algorithms, and the use of challenges.
 * - it has the responder's certificate chain.
 * The CHALLENGE message requests usage of the first certificate in the chain
 * (param1=0) and do not request measurements (param2=0).
 * The received CHALLENGE_AUTH message correctly responds to the challenge,
 * but with an invalid signature.
 * Expected behavior: client returns a status of RETURN_SECURITY_VIOLATION.
 **/
void libspdm_test_requester_challenge_case17(void **state) {
    libspdm_return_t status;
    libspdm_test_context_t    *spdm_test_context;
    libspdm_context_t  *spdm_context;
    uint8_t measurement_hash[LIBSPDM_MAX_HASH_SIZE];
    void                 *data;
    size_t data_size;
    void                 *hash;
    size_t hash_size;

    spdm_test_context = *state;
    spdm_context = spdm_test_context->spdm_context;
    spdm_test_context->case_id = 0x11;
    spdm_context->connection_info.connection_state = LIBSPDM_CONNECTION_STATE_NEGOTIATED;
    spdm_context->connection_info.capability.flags = 0;
    spdm_context->connection_info.capability.flags |= SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_CHAL_CAP;
    libspdm_read_responder_public_certificate_chain (m_libspdm_use_hash_algo,
                                                     m_libspdm_use_asym_algo,
                                                     &data, &data_size,
                                                     &hash, &hash_size);
    libspdm_reset_message_a(spdm_context);
    libspdm_reset_message_b(spdm_context);
    libspdm_reset_message_c(spdm_context);
    spdm_context->connection_info.algorithm.base_hash_algo = m_libspdm_use_hash_algo;
    spdm_context->connection_info.algorithm.base_asym_algo = m_libspdm_use_asym_algo;

    spdm_context->connection_info.version = SPDM_MESSAGE_VERSION_11 <<
                                            SPDM_VERSION_NUMBER_SHIFT_BIT;

#if LIBSPDM_RECORD_TRANSCRIPT_DATA_SUPPORT
    spdm_context->connection_info.peer_used_cert_chain[0].buffer_size =
        data_size;
    libspdm_copy_mem(spdm_context->connection_info.peer_used_cert_chain[0].buffer,
                     sizeof(spdm_context->connection_info.peer_used_cert_chain[0].buffer),
                     data, data_size);
#else
    libspdm_hash_all(
        spdm_context->connection_info.algorithm.base_hash_algo,
        data, data_size,
        spdm_context->connection_info.peer_used_cert_chain[0].buffer_hash);
    spdm_context->connection_info.peer_used_cert_chain[0].buffer_hash_size =
        libspdm_get_hash_size(spdm_context->connection_info.algorithm.base_hash_algo);
    libspdm_get_leaf_cert_public_key_from_cert_chain(
        spdm_context->connection_info.algorithm.base_hash_algo,
        spdm_context->connection_info.algorithm.base_asym_algo,
        data, data_size,
        &spdm_context->connection_info.peer_used_cert_chain[0].leaf_cert_public_key);
#endif

    libspdm_zero_mem (measurement_hash, sizeof(measurement_hash));
    status = libspdm_challenge (spdm_context, NULL, 0,
                                SPDM_CHALLENGE_REQUEST_NO_MEASUREMENT_SUMMARY_HASH,
                                measurement_hash, NULL);
    assert_int_equal (status, LIBSPDM_STATUS_VERIF_FAIL);
    free(data);
}"|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\challenge.c|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\challenge.c|ecdde3e1163a49bb8c05079298f26276
"/**
 * Test 18: the requester is setup correctly to send a CHALLENGE message:
 * - it has flags indicating that the previous messages were sent
 * (GET_CAPABILITIES, NEGOTIATE_ALGORITHMS, and GET_DIGESTS).
 * - it received the CAPABILITIES message, allowing the use of hash and digital
 * signature algorithms, the use of challenges, and of measurements.
 * - it has the responder's certificate chain.
 * The CHALLENGE message requests usage of the first certificate in the chain
 * (param1=0) and request TCB measurements (param2=1).
 * The received CHALLENGE_AUTH message correctly responds to the challenge, with
 * no opaque data and a signature on the sent nonce.
 * Expected behavior: client returns a status of RETURN_SUCCESS.
 **/
void libspdm_test_requester_challenge_case18(void **state) {
    libspdm_return_t status;
    libspdm_test_context_t    *spdm_test_context;
    libspdm_context_t  *spdm_context;
    uint8_t measurement_hash[LIBSPDM_MAX_HASH_SIZE];
    void                 *data;
    size_t data_size;
    void                 *hash;
    size_t hash_size;

    spdm_test_context = *state;
    spdm_context = spdm_test_context->spdm_context;
    spdm_test_context->case_id = 0x12;
    spdm_context->connection_info.connection_state = LIBSPDM_CONNECTION_STATE_NEGOTIATED;
    spdm_context->connection_info.capability.flags = 0;
    spdm_context->connection_info.capability.flags |= SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_CHAL_CAP;
    spdm_context->connection_info.capability.flags |= SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_MEAS_CAP; /*additional measurement capability*/
    libspdm_read_responder_public_certificate_chain (m_libspdm_use_hash_algo,
                                                     m_libspdm_use_asym_algo,
                                                     &data, &data_size,
                                                     &hash, &hash_size);
    libspdm_reset_message_a(spdm_context);
    libspdm_reset_message_b(spdm_context);
    libspdm_reset_message_c(spdm_context);
    spdm_context->connection_info.algorithm.base_hash_algo = m_libspdm_use_hash_algo;
    spdm_context->connection_info.algorithm.base_asym_algo = m_libspdm_use_asym_algo;

    spdm_context->connection_info.version = SPDM_MESSAGE_VERSION_11 <<
                                            SPDM_VERSION_NUMBER_SHIFT_BIT;

#if LIBSPDM_RECORD_TRANSCRIPT_DATA_SUPPORT
    spdm_context->connection_info.peer_used_cert_chain[0].buffer_size =
        data_size;
    libspdm_copy_mem(spdm_context->connection_info.peer_used_cert_chain[0].buffer,
                     sizeof(spdm_context->connection_info.peer_used_cert_chain[0].buffer),
                     data, data_size);
#else
    libspdm_hash_all(
        spdm_context->connection_info.algorithm.base_hash_algo,
        data, data_size,
        spdm_context->connection_info.peer_used_cert_chain[0].buffer_hash);
    spdm_context->connection_info.peer_used_cert_chain[0].buffer_hash_size =
        libspdm_get_hash_size(spdm_context->connection_info.algorithm.base_hash_algo);
    libspdm_get_leaf_cert_public_key_from_cert_chain(
        spdm_context->connection_info.algorithm.base_hash_algo,
        spdm_context->connection_info.algorithm.base_asym_algo,
        data, data_size,
        &spdm_context->connection_info.peer_used_cert_chain[0].leaf_cert_public_key);
#endif

    libspdm_zero_mem (measurement_hash, sizeof(measurement_hash));
    status = libspdm_challenge (spdm_context, NULL, 0,
                                SPDM_CHALLENGE_REQUEST_TCB_COMPONENT_MEASUREMENT_HASH,
                                measurement_hash, NULL);
    assert_int_equal(status, LIBSPDM_STATUS_SUCCESS);
}

/**
 * Test 19: the requester is setup correctly to send a CHALLENGE message:
 * - it has flags indicating that the previous messages were sent
 * (GET_CAPABILITIES, NEGOTIATE_ALGORITHMS, and GET_DIGESTS).
 * - it received the CAPABILITIES message, allowing the use of hash and digital
 * signature algorithms, the use of challenges, and of measurements.
 * - it has the responder's certificate chain.
 * The CHALLENGE message requests usage of the first certificate in the chain
 * (param1=0) and request TCB measurements (param2=1).
 * The received CHALLENGE_AUTH message correctly responds to the challenge, with
 * no opaque data and a signature on the sent nonce.
 * Expected behavior: client returns a status of RETURN_SUCCESS.
 **/
void libspdm_test_requester_challenge_case19(void **state) {
    libspdm_return_t status;
    libspdm_test_context_t    *spdm_test_context;
    libspdm_context_t  *spdm_context;
    uint8_t measurement_hash[LIBSPDM_MAX_HASH_SIZE];
    void                 *data;
    size_t data_size;
    void                 *hash;
    size_t hash_size;"|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\challenge.c|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\challenge.c|cbf68379e41444bab073db44d6cc651b
"spdm_test_context = *state;
    spdm_context = spdm_test_context->spdm_context;
    spdm_test_context->case_id = 0x13;
    spdm_context->connection_info.connection_state = LIBSPDM_CONNECTION_STATE_NEGOTIATED;
    spdm_context->connection_info.capability.flags = 0;
    spdm_context->connection_info.capability.flags |= SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_CHAL_CAP;
    spdm_context->connection_info.capability.flags |= SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_MEAS_CAP; /*additional measurement capability*/
    libspdm_read_responder_public_certificate_chain (m_libspdm_use_hash_algo,
                                                     m_libspdm_use_asym_algo,
                                                     &data, &data_size,
                                                     &hash, &hash_size);
    libspdm_reset_message_a(spdm_context);
    libspdm_reset_message_b(spdm_context);
    libspdm_reset_message_c(spdm_context);
    spdm_context->connection_info.algorithm.base_hash_algo = m_libspdm_use_hash_algo;
    spdm_context->connection_info.algorithm.base_asym_algo = m_libspdm_use_asym_algo;

    spdm_context->connection_info.version = SPDM_MESSAGE_VERSION_11 <<
                                            SPDM_VERSION_NUMBER_SHIFT_BIT;

#if LIBSPDM_RECORD_TRANSCRIPT_DATA_SUPPORT
    spdm_context->connection_info.peer_used_cert_chain[0].buffer_size =
        data_size;
    libspdm_copy_mem(spdm_context->connection_info.peer_used_cert_chain[0].buffer,
                     sizeof(spdm_context->connection_info.peer_used_cert_chain[0].buffer),
                     data, data_size);
#else
    libspdm_hash_all(
        spdm_context->connection_info.algorithm.base_hash_algo,
        data, data_size,
        spdm_context->connection_info.peer_used_cert_chain[0].buffer_hash);
    spdm_context->connection_info.peer_used_cert_chain[0].buffer_hash_size =
        libspdm_get_hash_size(spdm_context->connection_info.algorithm.base_hash_algo);
    libspdm_get_leaf_cert_public_key_from_cert_chain(
        spdm_context->connection_info.algorithm.base_hash_algo,
        spdm_context->connection_info.algorithm.base_asym_algo,
        data, data_size,
        &spdm_context->connection_info.peer_used_cert_chain[0].leaf_cert_public_key);
#endif

    libspdm_zero_mem (measurement_hash, sizeof(measurement_hash));
    status = libspdm_challenge (spdm_context, NULL, 0,
                                SPDM_CHALLENGE_REQUEST_ALL_MEASUREMENTS_HASH,
                                measurement_hash, NULL);
    assert_int_equal(status, LIBSPDM_STATUS_SUCCESS);
}

/**
 * Test 20: receiving an unexpected ERROR message from the responder.
 * There are tests for all named codes, including some reserved ones
 * (namely, 0x00, 0x0b, 0x0c, 0x3f, 0xfd, 0xfe).
 * However, for having specific test cases, it is excluded from this case:
 * Busy (0x03), ResponseNotReady (0x42), and RequestResync (0x43).
 * Expected behavior: client returns a status of RETURN_DEVICE_ERROR.
 **/
void libspdm_test_requester_challenge_case20(void **state) {
    libspdm_return_t status;
    libspdm_test_context_t    *spdm_test_context;
    libspdm_context_t  *spdm_context;
    uint8_t measurement_hash[LIBSPDM_MAX_HASH_SIZE];
    void                 *data;
    size_t data_size;
    void                 *hash;
    size_t hash_size;
    uint16_t error_code;

    spdm_test_context = *state;
    spdm_context = spdm_test_context->spdm_context;
    spdm_test_context->case_id = 0x14;
    spdm_context->connection_info.capability.flags = 0;
    spdm_context->connection_info.capability.flags |= SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_CHAL_CAP;
    libspdm_read_responder_public_certificate_chain (m_libspdm_use_hash_algo,
                                                     m_libspdm_use_asym_algo,
                                                     &data, &data_size,
                                                     &hash, &hash_size);
    spdm_context->connection_info.algorithm.base_hash_algo = m_libspdm_use_hash_algo;
    spdm_context->connection_info.algorithm.base_asym_algo = m_libspdm_use_asym_algo;

    spdm_context->connection_info.version = SPDM_MESSAGE_VERSION_11 <<
                                            SPDM_VERSION_NUMBER_SHIFT_BIT;"|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\challenge.c|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\challenge.c|3145141a0f0c43af8beeb996ccbc7129
"#if LIBSPDM_RECORD_TRANSCRIPT_DATA_SUPPORT
    spdm_context->connection_info.peer_used_cert_chain[0].buffer_size =
        data_size;
    libspdm_copy_mem(spdm_context->connection_info.peer_used_cert_chain[0].buffer,
                     sizeof(spdm_context->connection_info.peer_used_cert_chain[0].buffer),
                     data, data_size);
#else
    libspdm_hash_all(
        spdm_context->connection_info.algorithm.base_hash_algo,
        data, data_size,
        spdm_context->connection_info.peer_used_cert_chain[0].buffer_hash);
    spdm_context->connection_info.peer_used_cert_chain[0].buffer_hash_size =
        libspdm_get_hash_size(spdm_context->connection_info.algorithm.base_hash_algo);
    libspdm_get_leaf_cert_public_key_from_cert_chain(
        spdm_context->connection_info.algorithm.base_hash_algo,
        spdm_context->connection_info.algorithm.base_asym_algo,
        data, data_size,
        &spdm_context->connection_info.peer_used_cert_chain[0].leaf_cert_public_key);
#endif

    error_code = LIBSPDM_ERROR_CODE_RESERVED_00;
    while(error_code <= 0xff) {
        spdm_context->connection_info.connection_state = LIBSPDM_CONNECTION_STATE_NEGOTIATED;
        libspdm_reset_message_a(spdm_context);
        libspdm_reset_message_b(spdm_context);
        libspdm_reset_message_c(spdm_context);

        libspdm_zero_mem (measurement_hash, sizeof(measurement_hash));
        status = libspdm_challenge (spdm_context, NULL, 0,
                                    SPDM_CHALLENGE_REQUEST_NO_MEASUREMENT_SUMMARY_HASH,
                                    measurement_hash, NULL);
        LIBSPDM_ASSERT_INT_EQUAL_CASE (status, LIBSPDM_STATUS_ERROR_PEER, error_code);
#if LIBSPDM_RECORD_TRANSCRIPT_DATA_SUPPORT
        /* assert_int_equal (spdm_context->transcript.message_c.buffer_size, 0);*/
        LIBSPDM_ASSERT_INT_EQUAL_CASE (spdm_context->transcript.message_c.buffer_size, 0,
                                       error_code);
#endif

        error_code++;
        if(error_code == SPDM_ERROR_CODE_BUSY) { /*busy is treated in cases 5 and 6*/
            error_code = SPDM_ERROR_CODE_UNEXPECTED_REQUEST;
        }
        if(error_code == LIBSPDM_ERROR_CODE_RESERVED_0D) { /*skip some reserved error codes (0d to 3e)*/
            error_code = LIBSPDM_ERROR_CODE_RESERVED_3F;
        }
        if(error_code == SPDM_ERROR_CODE_RESPONSE_NOT_READY) { /*skip response not ready, request resync, and some reserved codes (44 to fc)*/
            error_code = LIBSPDM_ERROR_CODE_RESERVED_FD;
        }
    }

    free(data);
}

/**
 * Test 21: test correct CHALLENGE_AUTH message with multiple slot numbers
 * Expected behavior: success and slot_id is included in slot_mask.
 **/
void libspdm_test_requester_challenge_case21(void **state) {
    libspdm_return_t status;
    libspdm_test_context_t    *spdm_test_context;
    libspdm_context_t  *spdm_context;
    uint8_t measurement_hash[LIBSPDM_MAX_HASH_SIZE];
    void                 *data;
    size_t data_size;
    void                 *hash;
    size_t hash_size;
    uint8_t slot_id;
    uint8_t slot_mask;"|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\challenge.c|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\challenge.c|1a52dc12b8164862ab750a982e9baf5c
"spdm_test_context = *state;
    spdm_context = spdm_test_context->spdm_context;
    spdm_test_context->case_id = 0x15;
    spdm_context->connection_info.connection_state = LIBSPDM_CONNECTION_STATE_NEGOTIATED;
    spdm_context->connection_info.capability.flags = 0;
    spdm_context->connection_info.capability.flags |= SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_CHAL_CAP;
    libspdm_read_responder_public_certificate_chain (m_libspdm_use_hash_algo,
                                                     m_libspdm_use_asym_algo,
                                                     &data, &data_size,
                                                     &hash, &hash_size);
    libspdm_reset_message_a(spdm_context);
    libspdm_reset_message_b(spdm_context);
    libspdm_reset_message_c(spdm_context);
    spdm_context->connection_info.algorithm.base_hash_algo = m_libspdm_use_hash_algo;
    spdm_context->connection_info.algorithm.base_asym_algo = m_libspdm_use_asym_algo;
    spdm_context->connection_info.version = SPDM_MESSAGE_VERSION_11 <<
                                            SPDM_VERSION_NUMBER_SHIFT_BIT;
#if LIBSPDM_RECORD_TRANSCRIPT_DATA_SUPPORT
    spdm_context->connection_info.peer_used_cert_chain[0].buffer_size =
        data_size;
    libspdm_copy_mem(spdm_context->connection_info.peer_used_cert_chain[0].buffer,
                     sizeof(spdm_context->connection_info.peer_used_cert_chain[0].buffer),
                     data, data_size);
#else
    libspdm_hash_all(
        spdm_context->connection_info.algorithm.base_hash_algo,
        data, data_size,
        spdm_context->connection_info.peer_used_cert_chain[0].buffer_hash);
    spdm_context->connection_info.peer_used_cert_chain[0].buffer_hash_size =
        libspdm_get_hash_size(spdm_context->connection_info.algorithm.base_hash_algo);
    libspdm_get_leaf_cert_public_key_from_cert_chain(
        spdm_context->connection_info.algorithm.base_hash_algo,
        spdm_context->connection_info.algorithm.base_asym_algo,
        data, data_size,
        &spdm_context->connection_info.peer_used_cert_chain[0].leaf_cert_public_key);
#endif

    libspdm_zero_mem (measurement_hash, sizeof(measurement_hash));

    slot_id = 0;
    status = libspdm_challenge (spdm_context, NULL, slot_id,
                                SPDM_CHALLENGE_REQUEST_NO_MEASUREMENT_SUMMARY_HASH,
                                measurement_hash, &slot_mask);
    assert_int_equal(status, LIBSPDM_STATUS_SUCCESS);
    assert_int_equal(1<<slot_id, slot_mask & (1<<slot_id));
    free(data);
}

/**
 * Test 22: a request message is successfully sent and a response message is successfully received.
 * Buffer C already has arbitrary data.
 * Expected Behavior: requester returns the status RETURN_SUCCESS and a CHALLENGE_AUTH message is
 * received, buffer C appends the exchanged CHALLENGE and CHALLENGE_AUTH messages.
 **/
void libspdm_test_requester_challenge_case22(void **state)
{
    libspdm_return_t status;
    libspdm_test_context_t *spdm_test_context;
    libspdm_context_t *spdm_context;
    uint8_t measurement_hash[LIBSPDM_MAX_HASH_SIZE];
    void *data;
    size_t data_size;
    void *hash;
    size_t hash_size;

    spdm_test_context = *state;
    spdm_context = spdm_test_context->spdm_context;
    spdm_test_context->case_id = 0x16;
    spdm_context->connection_info.connection_state =
        LIBSPDM_CONNECTION_STATE_NEGOTIATED;
    spdm_context->connection_info.capability.flags = 0;
    spdm_context->connection_info.capability.flags |=
        SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_CHAL_CAP;
    libspdm_read_responder_public_certificate_chain(m_libspdm_use_hash_algo,
                                                    m_libspdm_use_asym_algo, &data,
                                                    &data_size, &hash, &hash_size);
    libspdm_reset_message_a(spdm_context);
    libspdm_reset_message_b(spdm_context);
    libspdm_reset_message_c(spdm_context);
    spdm_context->connection_info.algorithm.base_hash_algo =
        m_libspdm_use_hash_algo;
    spdm_context->connection_info.algorithm.base_asym_algo =
        m_libspdm_use_asym_algo;

#if LIBSPDM_RECORD_TRANSCRIPT_DATA_SUPPORT
    /*filling all buffers with arbitrary data*/
    libspdm_set_mem(spdm_context->transcript.message_a.buffer, 10, (uint8_t) 0xFF);
    spdm_context->transcript.message_a.buffer_size = 10;
    libspdm_set_mem(spdm_context->transcript.message_b.buffer, 8, (uint8_t) 0xEE);
    spdm_context->transcript.message_b.buffer_size = 8;
    libspdm_set_mem(spdm_context->transcript.message_c.buffer, 12, (uint8_t) 0xDD);
    spdm_context->transcript.message_c.buffer_size = 12;
#endif

    spdm_context->connection_info.version = SPDM_MESSAGE_VERSION_11 <<
                                            SPDM_VERSION_NUMBER_SHIFT_BIT;"|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\challenge.c|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\challenge.c|9dfc1c599d5442c1b612d744a945c81f
"#if LIBSPDM_RECORD_TRANSCRIPT_DATA_SUPPORT
    spdm_context->connection_info.peer_used_cert_chain[0].buffer_size =
        data_size;
    libspdm_copy_mem(spdm_context->connection_info.peer_used_cert_chain[0].buffer,
                     sizeof(spdm_context->connection_info.peer_used_cert_chain[0].buffer),
                     data, data_size);
#else
    libspdm_hash_all(
        spdm_context->connection_info.algorithm.base_hash_algo,
        data, data_size,
        spdm_context->connection_info.peer_used_cert_chain[0].buffer_hash);
    spdm_context->connection_info.peer_used_cert_chain[0].buffer_hash_size =
        libspdm_get_hash_size(spdm_context->connection_info.algorithm.base_hash_algo);
    libspdm_get_leaf_cert_public_key_from_cert_chain(
        spdm_context->connection_info.algorithm.base_hash_algo,
        spdm_context->connection_info.algorithm.base_asym_algo,
        data, data_size,
        &spdm_context->connection_info.peer_used_cert_chain[0].leaf_cert_public_key);
#endif

    libspdm_zero_mem(measurement_hash, sizeof(measurement_hash));
    status = libspdm_challenge(
        spdm_context, NULL, 0,
        SPDM_CHALLENGE_REQUEST_NO_MEASUREMENT_SUMMARY_HASH,
        measurement_hash, NULL);
    assert_int_equal(status, LIBSPDM_STATUS_SUCCESS);
#if LIBSPDM_RECORD_TRANSCRIPT_DATA_SUPPORT
    LIBSPDM_DEBUG((LIBSPDM_DEBUG_INFO, ""m_libspdm_local_buffer (0x%x):\n"",
                   m_libspdm_local_buffer_size));
    libspdm_dump_hex(m_libspdm_local_buffer, m_libspdm_local_buffer_size);
#endif
    free(data);
}

/**
 * Test 23: GetCert (Slot 0), GetCert (Slot 1), then Challenge (Slot 0), (Slot1):
 * - it has flags indicating that the previous messages were sent
 * (GET_CAPABILITIES, NEGOTIATE_ALGORITHMS, and GET_DIGESTS).
 * - it received the CAPABILITIES message, allowing the use of hash and digital
 * signature algorithms, and the use of challenges.
 * - it has the responder's certificate chain.
 * The CHALLENGE message requests usage of the first certificate in the chain
 * (param1=0) and do not request measurements (param2=0).
 * The received CHALLENGE_AUTH message correctly responds to the challenge, with
 * no opaque data and a signature on the sent nonce.
 * Expected behavior: client returns a status of RETURN_SUCCESS.
 **/
void libspdm_test_requester_challenge_case23(void **state)
{
    libspdm_return_t status;
    libspdm_test_context_t *spdm_test_context;
    libspdm_context_t *spdm_context;
    uint8_t measurement_hash[LIBSPDM_MAX_HASH_SIZE];
    void *data;
    void *data1;
    size_t data_size;
    size_t data1_size;
    void *hash;
    void *hash1;
    size_t hash_size;
    size_t hash1_size;
    uint8_t slot_id;

    spdm_test_context = *state;
    spdm_context = spdm_test_context->spdm_context;
    spdm_test_context->case_id = 0x17;
    spdm_context->connection_info.connection_state =
        LIBSPDM_CONNECTION_STATE_NEGOTIATED;
    spdm_context->connection_info.capability.flags = 0;
    spdm_context->connection_info.capability.flags |=
        SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_CHAL_CAP;

    libspdm_reset_message_a(spdm_context);
    libspdm_reset_message_b(spdm_context);
    libspdm_reset_message_c(spdm_context);
    spdm_context->connection_info.algorithm.base_hash_algo =
        m_libspdm_use_hash_algo;
    spdm_context->connection_info.algorithm.base_asym_algo =
        m_libspdm_use_asym_algo;

    spdm_context->connection_info.version = SPDM_MESSAGE_VERSION_11 <<
                                            SPDM_VERSION_NUMBER_SHIFT_BIT;

    libspdm_read_responder_public_certificate_chain(m_libspdm_use_hash_algo,
                                                    m_libspdm_use_asym_algo, &data,
                                                    &data_size, &hash, &hash_size);
#if LIBSPDM_RECORD_TRANSCRIPT_DATA_SUPPORT
    spdm_context->connection_info.peer_used_cert_chain[0].buffer_size =
        data_size;
    libspdm_copy_mem(spdm_context->connection_info.peer_used_cert_chain[0].buffer,
                     sizeof(spdm_context->connection_info.peer_used_cert_chain[0].buffer),
                     data, data_size);
#else
    libspdm_hash_all(
        spdm_context->connection_info.algorithm.base_hash_algo,
        data, data_size,
        spdm_context->connection_info.peer_used_cert_chain[0].buffer_hash);
    spdm_context->connection_info.peer_used_cert_chain[0].buffer_hash_size =
        libspdm_get_hash_size(spdm_context->connection_info.algorithm.base_hash_algo);
    libspdm_get_leaf_cert_public_key_from_cert_chain(
        spdm_context->connection_info.algorithm.base_hash_algo,
        spdm_context->connection_info.algorithm.base_asym_algo,
        data, data_size,
        &spdm_context->connection_info.peer_used_cert_chain[0].leaf_cert_public_key);
#endif"|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\challenge.c|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\challenge.c|859b1a1c74f941ec9775c7365223286d
"libspdm_read_responder_public_certificate_chain_per_slot(
        1,
        m_libspdm_use_hash_algo,
        m_libspdm_use_asym_algo, &data1,
        &data1_size, &hash1, &hash1_size);
#if LIBSPDM_RECORD_TRANSCRIPT_DATA_SUPPORT
    spdm_context->connection_info.peer_used_cert_chain[1].buffer_size =
        data1_size;
    libspdm_copy_mem(spdm_context->connection_info.peer_used_cert_chain[1].buffer,
                     sizeof(spdm_context->connection_info.peer_used_cert_chain[1].buffer),
                     data1, data1_size);
#else
    libspdm_hash_all(
        spdm_context->connection_info.algorithm.base_hash_algo,
        data1, data1_size,
        spdm_context->connection_info.peer_used_cert_chain[1].buffer_hash);
    spdm_context->connection_info.peer_used_cert_chain[1].buffer_hash_size =
        libspdm_get_hash_size(spdm_context->connection_info.algorithm.base_hash_algo);
    libspdm_get_leaf_cert_public_key_from_cert_chain(
        spdm_context->connection_info.algorithm.base_hash_algo,
        spdm_context->connection_info.algorithm.base_asym_algo,
        data1, data1_size,
        &spdm_context->connection_info.peer_used_cert_chain[1].leaf_cert_public_key);
#endif

    for (slot_id = 0; slot_id < 2; slot_id++) {
        libspdm_zero_mem(measurement_hash, sizeof(measurement_hash));
        status = libspdm_challenge(
            spdm_context, NULL, slot_id,
            SPDM_CHALLENGE_REQUEST_NO_MEASUREMENT_SUMMARY_HASH,
            measurement_hash, NULL);
        assert_int_equal(status, LIBSPDM_STATUS_SUCCESS);
    }
    free(data);
    free(data1);
}

/**
 * Test 24: Challenge using provisioned public key (slot_id 0xFF)
 * Expected behavior: client returns a status of RETURN_SUCCESS.
 **/
void libspdm_test_requester_challenge_case24(void **state)
{
    libspdm_return_t status;
    libspdm_test_context_t *spdm_test_context;
    libspdm_context_t *spdm_context;
    uint8_t measurement_hash[LIBSPDM_MAX_HASH_SIZE];
    void *data;
    size_t data_size;

    spdm_test_context = *state;
    spdm_context = spdm_test_context->spdm_context;
    spdm_test_context->case_id = 0x18;
    spdm_context->connection_info.connection_state =
        LIBSPDM_CONNECTION_STATE_NEGOTIATED;
    spdm_context->connection_info.capability.flags = 0;
    spdm_context->connection_info.capability.flags |=
        SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_CHAL_CAP;
    spdm_context->connection_info.capability.flags |=
        SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_PUB_KEY_ID_CAP;
    libspdm_read_responder_public_key(m_libspdm_use_asym_algo, &data, &data_size);
    spdm_context->local_context.peer_public_key_provision = data;
    spdm_context->local_context.peer_public_key_provision_size = data_size;

    libspdm_reset_message_a(spdm_context);
    libspdm_reset_message_b(spdm_context);
    libspdm_reset_message_c(spdm_context);
    spdm_context->connection_info.algorithm.base_hash_algo =
        m_libspdm_use_hash_algo;
    spdm_context->connection_info.algorithm.base_asym_algo =
        m_libspdm_use_asym_algo;

    spdm_context->connection_info.version = SPDM_MESSAGE_VERSION_11 <<
                                            SPDM_VERSION_NUMBER_SHIFT_BIT;

    libspdm_zero_mem(measurement_hash, sizeof(measurement_hash));
    status = libspdm_challenge(
        spdm_context, NULL, 0xFF,
        SPDM_CHALLENGE_REQUEST_NO_MEASUREMENT_SUMMARY_HASH,
        measurement_hash, NULL);
    assert_int_equal(status, LIBSPDM_STATUS_SUCCESS);
    free(data);
}

/**
 * Test 25: Error case, CHALLENGE_AUTH message contains opaque_length greater than the maximum allowed.
 * Expected Behavior: get a LIBSPDM_STATUS_INVALID_MSG_FIELD return code.
 **/
void libspdm_test_requester_challenge_case25(void **state) {
    libspdm_return_t status;
    libspdm_test_context_t    *spdm_test_context;
    libspdm_context_t  *spdm_context;
    uint8_t measurement_hash[LIBSPDM_MAX_HASH_SIZE];
    void                 *data;
    size_t data_size;
    void                 *hash;
    size_t hash_size;

    spdm_test_context = *state;
    spdm_context = spdm_test_context->spdm_context;
    spdm_test_context->case_id = 0x19;
    spdm_context->connection_info.connection_state = LIBSPDM_CONNECTION_STATE_NEGOTIATED;
    spdm_context->connection_info.capability.flags = 0;
    spdm_context->connection_info.capability.flags |= SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_CHAL_CAP;
    libspdm_read_responder_public_certificate_chain (m_libspdm_use_hash_algo,
                                                     m_libspdm_use_asym_algo,
                                                     &data, &data_size,
                                                     &hash, &hash_size);
    libspdm_reset_message_a(spdm_context);
    libspdm_reset_message_b(spdm_context);
    libspdm_reset_message_c(spdm_context);
    spdm_context->connection_info.algorithm.base_hash_algo = m_libspdm_use_hash_algo;
    spdm_context->connection_info.algorithm.base_asym_algo = m_libspdm_use_asym_algo;"|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\challenge.c|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\challenge.c|39a4942ecdd648699ea70d51459fd834
"spdm_context->connection_info.version = SPDM_MESSAGE_VERSION_11 <<
                                            SPDM_VERSION_NUMBER_SHIFT_BIT;

#if LIBSPDM_RECORD_TRANSCRIPT_DATA_SUPPORT
    spdm_context->connection_info.peer_used_cert_chain[0].buffer_size =
        data_size;
    libspdm_copy_mem(spdm_context->connection_info.peer_used_cert_chain[0].buffer,
                     sizeof(spdm_context->connection_info.peer_used_cert_chain[0].buffer),
                     data, data_size);
#else
    libspdm_hash_all(
        spdm_context->connection_info.algorithm.base_hash_algo,
        data, data_size,
        spdm_context->connection_info.peer_used_cert_chain[0].buffer_hash);
    spdm_context->connection_info.peer_used_cert_chain[0].buffer_hash_size =
        libspdm_get_hash_size(spdm_context->connection_info.algorithm.base_hash_algo);
    libspdm_get_leaf_cert_public_key_from_cert_chain(
        spdm_context->connection_info.algorithm.base_hash_algo,
        spdm_context->connection_info.algorithm.base_asym_algo,
        data, data_size,
        &spdm_context->connection_info.peer_used_cert_chain[0].leaf_cert_public_key);
#endif

    libspdm_zero_mem (measurement_hash, sizeof(measurement_hash));
    status = libspdm_challenge (spdm_context, NULL, 0,
                                SPDM_CHALLENGE_REQUEST_NO_MEASUREMENT_SUMMARY_HASH,
                                measurement_hash, NULL);
    assert_int_equal(status, LIBSPDM_STATUS_INVALID_MSG_FIELD);
    free(data);
}

/**
 * Test 26: the requester is setup correctly to send a CHALLENGE message:
 * - it has flags indicating that the previous messages were sent
 * The received CHALLENGE_AUTH message correctly responds to the challenge, opaque
 * data with bytes from the string ""libspdm"", and a signature on the sent nonce.
 * Expected behavior: client returns a status of RETURN_SUCCESS.
 **/
void libspdm_test_requester_challenge_case26(void **state) {
    libspdm_return_t status;
    libspdm_test_context_t    *spdm_test_context;
    libspdm_context_t  *spdm_context;
    uint8_t measurement_hash[LIBSPDM_MAX_HASH_SIZE];
    void                 *data;
    size_t data_size;
    void                 *hash;
    size_t hash_size;
    uint8_t opaque_data[SPDM_MAX_OPAQUE_DATA_SIZE];
    size_t opaque_data_size;

    spdm_test_context = *state;
    spdm_context = spdm_test_context->spdm_context;
    spdm_test_context->case_id = 0x1A;
    spdm_context->connection_info.connection_state = LIBSPDM_CONNECTION_STATE_NEGOTIATED;
    spdm_context->connection_info.capability.flags = 0;
    spdm_context->connection_info.capability.flags |= SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_CHAL_CAP;
    libspdm_read_responder_public_certificate_chain (m_libspdm_use_hash_algo,
                                                     m_libspdm_use_asym_algo,
                                                     &data, &data_size,
                                                     &hash, &hash_size);
    libspdm_reset_message_a(spdm_context);
    libspdm_reset_message_b(spdm_context);
    libspdm_reset_message_c(spdm_context);
    spdm_context->connection_info.algorithm.base_hash_algo = m_libspdm_use_hash_algo;
    spdm_context->connection_info.algorithm.base_asym_algo = m_libspdm_use_asym_algo;

    spdm_context->connection_info.version = SPDM_MESSAGE_VERSION_12 <<
                                            SPDM_VERSION_NUMBER_SHIFT_BIT;

#if LIBSPDM_RECORD_TRANSCRIPT_DATA_SUPPORT
    spdm_context->connection_info.peer_used_cert_chain[0].buffer_size =
        data_size;
    libspdm_copy_mem(spdm_context->connection_info.peer_used_cert_chain[0].buffer,
                     sizeof(spdm_context->connection_info.peer_used_cert_chain[0].buffer),
                     data, data_size);
#else
    libspdm_hash_all(
        spdm_context->connection_info.algorithm.base_hash_algo,
        data, data_size,
        spdm_context->connection_info.peer_used_cert_chain[0].buffer_hash);
    spdm_context->connection_info.peer_used_cert_chain[0].buffer_hash_size =
        libspdm_get_hash_size(spdm_context->connection_info.algorithm.base_hash_algo);
    libspdm_get_leaf_cert_public_key_from_cert_chain(
        spdm_context->connection_info.algorithm.base_hash_algo,
        spdm_context->connection_info.algorithm.base_asym_algo,
        data, data_size,
        &spdm_context->connection_info.peer_used_cert_chain[0].leaf_cert_public_key);
#endif
    spdm_context->connection_info.algorithm.other_params_support =
        SPDM_ALGORITHMS_OPAQUE_DATA_FORMAT_1;
    opaque_data_size = sizeof(opaque_data);"|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\challenge.c|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\challenge.c|9895a881b10f4289873ce4e275ae3e96
"libspdm_zero_mem (measurement_hash, sizeof(measurement_hash));
    status = libspdm_challenge_ex (spdm_context, NULL, 0,
                                   SPDM_CHALLENGE_REQUEST_NO_MEASUREMENT_SUMMARY_HASH,
                                   measurement_hash, NULL, NULL, NULL, NULL,
                                   opaque_data, &opaque_data_size);
    assert_int_equal(status, LIBSPDM_STATUS_SUCCESS);
    assert_int_equal(opaque_data_size, m_libspdm_opaque_data_size);
    assert_memory_equal(opaque_data, m_libspdm_opaque_data, opaque_data_size);
    free(data);
}

/**
 * Test 27: Successful case , With the correct challenge context field
 * Expected Behavior: client returns a status of RETURN_SUCCESS.
 **/
void libspdm_test_requester_challenge_case27(void **state)
{
    libspdm_return_t status;
    libspdm_test_context_t *spdm_test_context;
    libspdm_context_t *spdm_context;
    uint8_t measurement_hash[LIBSPDM_MAX_HASH_SIZE];
    void *data;
    size_t data_size;
    void *hash;
    size_t hash_size;

    spdm_test_context = *state;
    spdm_context = spdm_test_context->spdm_context;
    spdm_test_context->case_id = 0x1B;
    spdm_context->connection_info.connection_state =
        LIBSPDM_CONNECTION_STATE_NEGOTIATED;
    spdm_context->connection_info.capability.flags = 0;
    spdm_context->connection_info.capability.flags |=
        SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_CHAL_CAP;
    libspdm_read_responder_public_certificate_chain(m_libspdm_use_hash_algo,
                                                    m_libspdm_use_asym_algo, &data,
                                                    &data_size, &hash, &hash_size);
    libspdm_reset_message_a(spdm_context);
    libspdm_reset_message_b(spdm_context);
    libspdm_reset_message_c(spdm_context);
    spdm_context->connection_info.algorithm.base_hash_algo =
        m_libspdm_use_hash_algo;
    spdm_context->connection_info.algorithm.base_asym_algo =
        m_libspdm_use_asym_algo;

    spdm_context->connection_info.version = SPDM_MESSAGE_VERSION_13 <<
                                            SPDM_VERSION_NUMBER_SHIFT_BIT;

#if LIBSPDM_RECORD_TRANSCRIPT_DATA_SUPPORT
    spdm_context->connection_info.peer_used_cert_chain[0].buffer_size =
        data_size;
    libspdm_copy_mem(spdm_context->connection_info.peer_used_cert_chain[0].buffer,
                     sizeof(spdm_context->connection_info.peer_used_cert_chain[0].buffer),
                     data, data_size);
#else
    libspdm_hash_all(
        spdm_context->connection_info.algorithm.base_hash_algo,
        data, data_size,
        spdm_context->connection_info.peer_used_cert_chain[0].buffer_hash);
    spdm_context->connection_info.peer_used_cert_chain[0].buffer_hash_size =
        libspdm_get_hash_size(spdm_context->connection_info.algorithm.base_hash_algo);
    libspdm_get_leaf_cert_public_key_from_cert_chain(
        spdm_context->connection_info.algorithm.base_hash_algo,
        spdm_context->connection_info.algorithm.base_asym_algo,
        data, data_size,
        &spdm_context->connection_info.peer_used_cert_chain[0].leaf_cert_public_key);
#endif

    libspdm_set_mem(m_requester_context, SPDM_REQ_CONTEXT_SIZE, 0xAA);

    libspdm_zero_mem(measurement_hash, sizeof(measurement_hash));

    status = libspdm_challenge_ex2(
        spdm_context, NULL, 0, m_requester_context,
        SPDM_CHALLENGE_REQUEST_NO_MEASUREMENT_SUMMARY_HASH,
        measurement_hash, NULL, NULL, NULL, NULL, NULL, NULL);
    assert_int_equal(status, LIBSPDM_STATUS_SUCCESS);

#if LIBSPDM_RECORD_TRANSCRIPT_DATA_SUPPORT
    assert_int_equal(spdm_context->transcript.message_c.buffer_size, 0);
#else
    assert_null(spdm_context->transcript.digest_context_m1m2);
#endif
    free(data);
}

/**
 * Test 28: Error case , challenge context fields are inconsistent
 * Expected Behavior: get a LIBSPDM_STATUS_INVALID_MSG_FIELD return code
 **/
void libspdm_test_requester_challenge_case28(void **state)
{
    libspdm_return_t status;
    libspdm_test_context_t *spdm_test_context;
    libspdm_context_t *spdm_context;
    uint8_t measurement_hash[LIBSPDM_MAX_HASH_SIZE];
    void *data;
    size_t data_size;
    void *hash;
    size_t hash_size;"|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\challenge.c|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\challenge.c|e1726794f1d344dd87899941b7f3c18e
"spdm_test_context = *state;
    spdm_context = spdm_test_context->spdm_context;
    spdm_test_context->case_id = 0x1C;
    spdm_context->connection_info.connection_state =
        LIBSPDM_CONNECTION_STATE_NEGOTIATED;
    spdm_context->connection_info.capability.flags = 0;
    spdm_context->connection_info.capability.flags |=
        SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_CHAL_CAP;
    libspdm_read_responder_public_certificate_chain(m_libspdm_use_hash_algo,
                                                    m_libspdm_use_asym_algo, &data,
                                                    &data_size, &hash, &hash_size);
    libspdm_reset_message_a(spdm_context);
    libspdm_reset_message_b(spdm_context);
    libspdm_reset_message_c(spdm_context);
    spdm_context->connection_info.algorithm.base_hash_algo =
        m_libspdm_use_hash_algo;
    spdm_context->connection_info.algorithm.base_asym_algo =
        m_libspdm_use_asym_algo;

    spdm_context->connection_info.version = SPDM_MESSAGE_VERSION_13 <<
                                            SPDM_VERSION_NUMBER_SHIFT_BIT;

#if LIBSPDM_RECORD_TRANSCRIPT_DATA_SUPPORT
    spdm_context->connection_info.peer_used_cert_chain[0].buffer_size =
        data_size;
    libspdm_copy_mem(spdm_context->connection_info.peer_used_cert_chain[0].buffer,
                     sizeof(spdm_context->connection_info.peer_used_cert_chain[0].buffer),
                     data, data_size);
#else
    libspdm_hash_all(
        spdm_context->connection_info.algorithm.base_hash_algo,
        data, data_size,
        spdm_context->connection_info.peer_used_cert_chain[0].buffer_hash);
    spdm_context->connection_info.peer_used_cert_chain[0].buffer_hash_size =
        libspdm_get_hash_size(spdm_context->connection_info.algorithm.base_hash_algo);
    libspdm_get_leaf_cert_public_key_from_cert_chain(
        spdm_context->connection_info.algorithm.base_hash_algo,
        spdm_context->connection_info.algorithm.base_asym_algo,
        data, data_size,
        &spdm_context->connection_info.peer_used_cert_chain[0].leaf_cert_public_key);
#endif

    libspdm_set_mem(m_requester_context, SPDM_REQ_CONTEXT_SIZE, 0xAA);

    libspdm_zero_mem(measurement_hash, sizeof(measurement_hash));

    status = libspdm_challenge_ex2(
        spdm_context, NULL, 0, m_requester_context,
        SPDM_CHALLENGE_REQUEST_NO_MEASUREMENT_SUMMARY_HASH,
        measurement_hash, NULL, NULL, NULL, NULL, NULL, NULL);
    assert_int_equal(status, LIBSPDM_STATUS_INVALID_MSG_FIELD);

    free(data);
}

libspdm_test_context_t m_libspdm_requester_challenge_test_context = {
    LIBSPDM_TEST_CONTEXT_VERSION,
    true,
    libspdm_requester_challenge_test_send_message,
    libspdm_requester_challenge_test_receive_message,
};"|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\challenge.c|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\challenge.c|648bd883b70a465987ad09916c88ffdd
"int libspdm_requester_challenge_test_main(void)
{
    const struct CMUnitTest spdm_requester_challenge_tests[] = {
        /* SendRequest failed*/
        cmocka_unit_test(libspdm_test_requester_challenge_case1),
        /* Successful response*/
        cmocka_unit_test(libspdm_test_requester_challenge_case2),
        /* connection_state check failed*/
        cmocka_unit_test(libspdm_test_requester_challenge_case3),
        /* Error response: SPDM_ERROR_CODE_INVALID_REQUEST*/
        cmocka_unit_test(libspdm_test_requester_challenge_case4),
        /* Always SPDM_ERROR_CODE_BUSY*/
        cmocka_unit_test(libspdm_test_requester_challenge_case5),
        /* SPDM_ERROR_CODE_BUSY + Successful response*/
        cmocka_unit_test(libspdm_test_requester_challenge_case6),
        /* Error response: SPDM_ERROR_CODE_REQUEST_RESYNCH*/
        cmocka_unit_test(libspdm_test_requester_challenge_case7),
        /* Always SPDM_ERROR_CODE_RESPONSE_NOT_READY*/
        cmocka_unit_test(libspdm_test_requester_challenge_case8),
        /* SPDM_ERROR_CODE_RESPONSE_NOT_READY + Successful response*/
        cmocka_unit_test(libspdm_test_requester_challenge_case9),
        /* SpdmCmdReceiveState check failed*/
        cmocka_unit_test(libspdm_test_requester_challenge_case10),
        /* Successful response + device error*/
        cmocka_unit_test(libspdm_test_requester_challenge_case11),
        cmocka_unit_test(libspdm_test_requester_challenge_case12),
        cmocka_unit_test(libspdm_test_requester_challenge_case13),
        cmocka_unit_test(libspdm_test_requester_challenge_case14),
        /* Invalid parameter*/
        cmocka_unit_test(libspdm_test_requester_challenge_case15),
        /* Successful response*/
        cmocka_unit_test(libspdm_test_requester_challenge_case16),
        /* Signature check failed*/
        cmocka_unit_test(libspdm_test_requester_challenge_case17),
        /* Successful response*/
        cmocka_unit_test(libspdm_test_requester_challenge_case18),
        cmocka_unit_test(libspdm_test_requester_challenge_case19),
        /* Unexpected errors*/
        cmocka_unit_test(libspdm_test_requester_challenge_case20),
        /* Buffer verification*/
        cmocka_unit_test(libspdm_test_requester_challenge_case22),
        /* Challeng differenr slot with GetCert*/
        cmocka_unit_test(libspdm_test_requester_challenge_case23),
        /* Challeng using provisioned public key (slot_id 0xFF) */
        cmocka_unit_test(libspdm_test_requester_challenge_case24),
        /* opaque_length greater than the maximum allowed */
        cmocka_unit_test(libspdm_test_requester_challenge_case25),
        /* the OpaqueDataFmt1 bit is selected in OtherParamsSelection of ALGORITHMS*/
        cmocka_unit_test(libspdm_test_requester_challenge_case26),
        /* Successful response, With the correct challenge context field*/
        cmocka_unit_test(libspdm_test_requester_challenge_case27),
        /* Error response: challenge context fields are inconsistent*/
        cmocka_unit_test(libspdm_test_requester_challenge_case28),
    };

    libspdm_setup_test_context(&m_libspdm_requester_challenge_test_context);

    return cmocka_run_group_tests(spdm_requester_challenge_tests,
                                  libspdm_unit_test_group_setup,
                                  libspdm_unit_test_group_teardown);
}

#endif /* SPDM_ENABLE_CHALLEGE*/"|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\challenge.c|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\challenge.c|261f4b5d35a04c36983ae7370bcc7dfb
"/**
 *  Copyright Notice:
 *  Copyright 2021-2022 DMTF. All rights reserved.
 *  License: BSD 3-Clause License. For full text see link: https://github.com/DMTF/libspdm/blob/main/LICENSE.md
 **/

#include ""spdm_unit_test.h""
#include ""internal/libspdm_requester_lib.h""

#if (LIBSPDM_ENABLE_CAPABILITY_MUT_AUTH_CAP) && (LIBSPDM_ENABLE_CAPABILITY_ENCAP_CAP) && \
    (LIBSPDM_ENABLE_CAPABILITY_CHAL_CAP)

spdm_challenge_request_t m_spdm_challenge_request1 = {
    {SPDM_MESSAGE_VERSION_11, SPDM_CHALLENGE, 0,
     SPDM_CHALLENGE_REQUEST_NO_MEASUREMENT_SUMMARY_HASH},
};
size_t m_spdm_challenge_request1_size = sizeof(m_spdm_challenge_request1);

spdm_challenge_request_t m_spdm_challenge_request3 = {
    {SPDM_MESSAGE_VERSION_11, SPDM_CHALLENGE, SPDM_MAX_SLOT_COUNT,
     SPDM_CHALLENGE_REQUEST_NO_MEASUREMENT_SUMMARY_HASH},
};
size_t m_spdm_challenge_request3_size = sizeof(m_spdm_challenge_request3);

spdm_challenge_request_t m_spdm_challenge_request4 = {
    {SPDM_MESSAGE_VERSION_11, SPDM_CHALLENGE, 0xFF,
     SPDM_CHALLENGE_REQUEST_NO_MEASUREMENT_SUMMARY_HASH},
};
size_t m_spdm_challenge_request4_size = sizeof(m_spdm_challenge_request4);

spdm_challenge_request_t m_spdm_challenge_request5 = {
    {SPDM_MESSAGE_VERSION_13, SPDM_CHALLENGE, 0,
     SPDM_CHALLENGE_REQUEST_NO_MEASUREMENT_SUMMARY_HASH},
};
size_t m_spdm_challenge_request5_size = sizeof(m_spdm_challenge_request5);

extern size_t libspdm_secret_lib_challenge_opaque_data_size;

/**
 * Test 1: receiving a correct CHALLENGE message from the requester with
 * no opaque data, no measurements, and slot number 0.
 * Expected behavior: the requester accepts the request and produces a valid
 * CHALLENGE_AUTH response message and Completion of CHALLENGE sets M1/M2 to null.
 **/
void test_libspdm_requester_encap_challenge_auth_case1(void **state)
{
    libspdm_return_t status;
    libspdm_test_context_t *spdm_test_context;
    libspdm_context_t *spdm_context;
    size_t response_size;
    uint8_t response[LIBSPDM_MAX_SPDM_MSG_SIZE];
    spdm_challenge_auth_response_t *spdm_response;
    void *data;
    size_t data_size;

    spdm_test_context = *state;
    spdm_context = spdm_test_context->spdm_context;
    spdm_test_context->case_id = 0x1;

    spdm_context->local_context.capability.flags = 0;
    spdm_context->local_context.capability.flags |= SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_CHAL_CAP;
    spdm_context->local_context.capability.flags |= SPDM_GET_CAPABILITIES_REQUEST_FLAGS_CHAL_CAP;
    spdm_context->connection_info.capability.flags = 0;

    spdm_context->connection_info.algorithm.base_hash_algo = m_libspdm_use_hash_algo;
    spdm_context->connection_info.algorithm.base_asym_algo = m_libspdm_use_asym_algo;
    spdm_context->connection_info.algorithm.measurement_spec = m_libspdm_use_measurement_spec;
    spdm_context->connection_info.algorithm.measurement_hash_algo =
        m_libspdm_use_measurement_hash_algo;

    spdm_context->connection_info.connection_state =
        LIBSPDM_CONNECTION_STATE_NEGOTIATED;
    spdm_context->connection_info.algorithm.base_hash_algo =
        m_libspdm_use_hash_algo;
    spdm_context->connection_info.algorithm.base_asym_algo =
        m_libspdm_use_asym_algo;
    spdm_context->connection_info.algorithm.measurement_spec =
        m_libspdm_use_measurement_spec;
    spdm_context->connection_info.algorithm.measurement_hash_algo =
        m_libspdm_use_measurement_hash_algo;

    spdm_context->connection_info.algorithm.req_base_asym_alg =
        SPDM_ALGORITHMS_BASE_ASYM_ALGO_TPM_ALG_RSASSA_2048;

    spdm_context->connection_info.version = SPDM_MESSAGE_VERSION_11
                                            << SPDM_VERSION_NUMBER_SHIFT_BIT;
    libspdm_read_responder_public_certificate_chain(m_libspdm_use_hash_algo,
                                                    m_libspdm_use_asym_algo, &data,
                                                    &data_size, NULL, NULL);
    spdm_context->local_context.local_cert_chain_provision[0] = data;
    spdm_context->local_context.local_cert_chain_provision_size[0] =
        data_size;

    libspdm_secret_lib_challenge_opaque_data_size = 0;
    libspdm_reset_message_mut_c(spdm_context);
#if LIBSPDM_RECORD_TRANSCRIPT_DATA_SUPPORT
    spdm_context->transcript.message_m.buffer_size =
        spdm_context->transcript.message_m.max_buffer_size;
#endif"|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\encap_challenge_auth.c|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\encap_challenge_auth.c|3823a1d7c2844c598c01d2c75b7e312e
"response_size = sizeof(response);
    libspdm_get_random_number(SPDM_NONCE_SIZE,
                              m_spdm_challenge_request1.nonce);
    status = libspdm_get_encap_response_challenge_auth(
        spdm_context, m_spdm_challenge_request1_size,
        &m_spdm_challenge_request1, &response_size, response);
    assert_int_equal(status, LIBSPDM_STATUS_SUCCESS);
    assert_int_equal(response_size, sizeof(spdm_challenge_auth_response_t) +
                     libspdm_get_hash_size(spdm_context->connection_info.algorithm.base_hash_algo) +
                     SPDM_NONCE_SIZE + 0 +
                     sizeof(uint16_t) +
                     libspdm_secret_lib_challenge_opaque_data_size +
                     libspdm_get_req_asym_signature_size(
                         spdm_context->connection_info.algorithm.req_base_asym_alg));
    spdm_response = (void *)response;
    assert_int_equal(spdm_response->header.request_response_code,
                     SPDM_CHALLENGE_AUTH);
    assert_int_equal(spdm_response->header.param1, 0);
    assert_int_equal(spdm_response->header.param2, 1 << 0);
#if LIBSPDM_RECORD_TRANSCRIPT_DATA_SUPPORT
    assert_int_equal(spdm_context->transcript.message_m.buffer_size,
                     0);
    assert_int_equal(spdm_context->transcript.message_mut_c.buffer_size, 0);
#else
    assert_null(spdm_context->transcript.digest_context_mut_m1m2);
#endif
    free(data);
}

/**
 * Test 2:
 * Expected behavior:
 **/
void test_libspdm_requester_encap_challenge_auth_case2(void **state)
{
}

/**
 * Test 3: receiving a correct CHALLENGE from the requester, but the requester does not
 * have the challenge capability set.
 * Expected behavior: the requester accepts the request and produces a valid
 * CHALLENGE_AUTH response message.
 **/
void test_libspdm_requester_encap_challenge_auth_case3(void **state)
{
    libspdm_return_t status;
    libspdm_test_context_t *spdm_test_context;
    libspdm_context_t *spdm_context;
    size_t response_size;
    uint8_t response[LIBSPDM_MAX_SPDM_MSG_SIZE];
    spdm_challenge_auth_response_t *spdm_response;
    void *data;
    size_t data_size;

    spdm_test_context = *state;
    spdm_context = spdm_test_context->spdm_context;
    spdm_test_context->case_id = 0x3;
    spdm_context->connection_info.connection_state = LIBSPDM_CONNECTION_STATE_NEGOTIATED;
    spdm_context->local_context.capability.flags = 0;
    /* spdm_context->local_context.capability.flags |= SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_CHAL_CAP;*/
    spdm_context->connection_info.algorithm.base_hash_algo = m_libspdm_use_hash_algo;
    spdm_context->connection_info.algorithm.base_asym_algo = m_libspdm_use_asym_algo;
    spdm_context->connection_info.algorithm.measurement_spec = m_libspdm_use_measurement_spec;
    spdm_context->connection_info.algorithm.measurement_hash_algo =
        m_libspdm_use_measurement_hash_algo;

    spdm_context->connection_info.version = SPDM_MESSAGE_VERSION_11
                                            << SPDM_VERSION_NUMBER_SHIFT_BIT;
    libspdm_read_responder_public_certificate_chain(m_libspdm_use_hash_algo,
                                                    m_libspdm_use_asym_algo, &data, &data_size,
                                                    NULL, NULL);
    spdm_context->local_context.local_cert_chain_provision[0] = data;
    spdm_context->local_context.local_cert_chain_provision_size[0] = data_size;

    libspdm_secret_lib_challenge_opaque_data_size = 0;
    libspdm_reset_message_c(spdm_context);

    response_size = sizeof(response);
    libspdm_get_random_number(SPDM_NONCE_SIZE, m_spdm_challenge_request1.nonce);
    status = libspdm_get_encap_response_challenge_auth(spdm_context, m_spdm_challenge_request1_size,
                                                       &m_spdm_challenge_request1, &response_size,
                                                       response);
    assert_int_equal(status, LIBSPDM_STATUS_SUCCESS);
    assert_int_equal(response_size, sizeof(spdm_error_response_t));
    spdm_response = (void *)response;
    assert_int_equal(spdm_response->header.request_response_code, SPDM_ERROR);
    assert_int_equal(spdm_response->header.param1, SPDM_ERROR_CODE_UNSUPPORTED_REQUEST);
    assert_int_equal(spdm_response->header.param2, SPDM_CHALLENGE);
    free(data);
}

/**
 * Test 4: receiving an incorrect CHALLENGE from the requester, with the slot number
 * larger than the specification limit.
 * Expected behavior: the requester rejects the request, and produces an ERROR message
 * indicating the UnexpectedRequest.
 **/
void test_libspdm_requester_encap_challenge_auth_case4(void **state)
{
    libspdm_return_t status;
    libspdm_test_context_t *spdm_test_context;
    libspdm_context_t *spdm_context;
    size_t response_size;
    uint8_t response[LIBSPDM_MAX_SPDM_MSG_SIZE];
    spdm_challenge_auth_response_t *spdm_response;
    void *data;
    size_t data_size;"|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\encap_challenge_auth.c|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\encap_challenge_auth.c|c284bbb5beb14237adfa42f4624ac1c9
"spdm_test_context = *state;
    spdm_context = spdm_test_context->spdm_context;
    spdm_test_context->case_id = 0x4;
    spdm_context->connection_info.connection_state = LIBSPDM_CONNECTION_STATE_NEGOTIATED;
    spdm_context->local_context.capability.flags = 0;
    spdm_context->local_context.capability.flags |= SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_CHAL_CAP;
    spdm_context->connection_info.algorithm.base_hash_algo = m_libspdm_use_hash_algo;
    spdm_context->connection_info.algorithm.base_asym_algo = m_libspdm_use_asym_algo;
    spdm_context->connection_info.algorithm.measurement_spec = m_libspdm_use_measurement_spec;
    spdm_context->connection_info.algorithm.measurement_hash_algo =
        m_libspdm_use_measurement_hash_algo;

    spdm_context->connection_info.version = SPDM_MESSAGE_VERSION_11
                                            << SPDM_VERSION_NUMBER_SHIFT_BIT;
    libspdm_read_responder_public_certificate_chain(m_libspdm_use_hash_algo,
                                                    m_libspdm_use_asym_algo, &data, &data_size,
                                                    NULL, NULL);
    spdm_context->local_context.local_cert_chain_provision[0] = data;
    spdm_context->local_context.local_cert_chain_provision_size[0] = data_size;

    libspdm_secret_lib_challenge_opaque_data_size = 0;
    libspdm_reset_message_c(spdm_context);

    response_size = sizeof(response);
    libspdm_get_random_number(SPDM_NONCE_SIZE, m_spdm_challenge_request1.nonce);
    status = libspdm_get_encap_response_challenge_auth(spdm_context, m_spdm_challenge_request3_size,
                                                       &m_spdm_challenge_request3, &response_size,
                                                       response);
    assert_int_equal(status, LIBSPDM_STATUS_SUCCESS);
    assert_int_equal(response_size, sizeof(spdm_error_response_t));
    spdm_response = (void *)response;
    assert_int_equal(spdm_response->header.request_response_code, SPDM_ERROR);
    assert_int_equal(spdm_response->header.param1, SPDM_ERROR_CODE_INVALID_REQUEST);
    assert_int_equal(spdm_response->header.param2, 0);
    free(data);
}

/**
 * Test 5: receiving a correct CHALLENGE from the requester, but with certificate
 * unavailable at the requested slot number (1).
 * Expected behavior: the requester rejects the request, and produces an ERROR message
 * indicating the UnexpectedRequest.
 **/
void test_libspdm_requester_encap_challenge_auth_case5(void **state)
{
    libspdm_return_t status;
    libspdm_test_context_t *spdm_test_context;
    libspdm_context_t *spdm_context;
    size_t response_size;
    uint8_t response[LIBSPDM_MAX_SPDM_MSG_SIZE];
    spdm_challenge_auth_response_t *spdm_response;
    void *data;
    size_t data_size;

    spdm_test_context = *state;
    spdm_context = spdm_test_context->spdm_context;
    spdm_test_context->case_id = 0x05;
    spdm_context->connection_info.connection_state = LIBSPDM_CONNECTION_STATE_NEGOTIATED;
    spdm_context->local_context.capability.flags = 0;
    spdm_context->local_context.capability.flags |= SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_CHAL_CAP;
    spdm_context->connection_info.algorithm.base_hash_algo = m_libspdm_use_hash_algo;
    spdm_context->connection_info.algorithm.base_asym_algo = m_libspdm_use_asym_algo;
    spdm_context->connection_info.algorithm.measurement_spec = m_libspdm_use_measurement_spec;
    spdm_context->connection_info.algorithm.measurement_hash_algo =
        m_libspdm_use_measurement_hash_algo;

    spdm_context->connection_info.version = SPDM_MESSAGE_VERSION_11
                                            << SPDM_VERSION_NUMBER_SHIFT_BIT;
    libspdm_read_responder_public_certificate_chain(m_libspdm_use_hash_algo,
                                                    m_libspdm_use_asym_algo, &data, &data_size,
                                                    NULL, NULL);
    spdm_context->local_context.local_cert_chain_provision[0] = data;
    spdm_context->local_context.local_cert_chain_provision_size[0] = data_size;

    libspdm_secret_lib_challenge_opaque_data_size = 0;
    libspdm_reset_message_c(spdm_context);

    response_size = sizeof(response);
    libspdm_get_random_number(SPDM_NONCE_SIZE, m_spdm_challenge_request1.nonce);
    status = libspdm_get_encap_response_challenge_auth(spdm_context, m_spdm_challenge_request3_size,
                                                       &m_spdm_challenge_request3, &response_size,
                                                       response);
    assert_int_equal(status, LIBSPDM_STATUS_SUCCESS);
    assert_int_equal(response_size, sizeof(spdm_error_response_t));
    spdm_response = (void *)response;
    assert_int_equal(spdm_response->header.request_response_code, SPDM_ERROR);
    assert_int_equal(spdm_response->header.param1, SPDM_ERROR_CODE_INVALID_REQUEST);
    assert_int_equal(spdm_response->header.param2, 0);
    free(data);
}"|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\encap_challenge_auth.c|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\encap_challenge_auth.c|7103a9d9b7d54ba4bb95398a44ac0bcb
"/**
 * Test 6: receiving a correct CHALLENGE message from the requester with
 * no opaque data, no measurements, and slot number 0xFF.
 * Expected behavior: the requester accepts the request and produces a valid
 * CHALLENGE_AUTH response message using provisioned public key (slot number 0xFF).
 **/
void test_libspdm_requester_encap_challenge_auth_case6(void **state)
{
    libspdm_return_t status;
    libspdm_test_context_t *spdm_test_context;
    libspdm_context_t *spdm_context;
    size_t response_size;
    uint8_t response[LIBSPDM_MAX_SPDM_MSG_SIZE];
    spdm_challenge_auth_response_t *spdm_response;
    void *data;
    size_t data_size;

    spdm_test_context = *state;
    spdm_context = spdm_test_context->spdm_context;
    spdm_test_context->case_id = 0x6;

    spdm_context->local_context.capability.flags = 0;
    spdm_context->local_context.capability.flags |= SPDM_GET_CAPABILITIES_REQUEST_FLAGS_CHAL_CAP;

    spdm_context->connection_info.connection_state = LIBSPDM_CONNECTION_STATE_NEGOTIATED;
    spdm_context->connection_info.algorithm.base_hash_algo = m_libspdm_use_hash_algo;
    spdm_context->connection_info.algorithm.req_base_asym_alg = m_libspdm_use_req_asym_algo;
    spdm_context->connection_info.version = SPDM_MESSAGE_VERSION_11
                                            << SPDM_VERSION_NUMBER_SHIFT_BIT;

    libspdm_read_requester_public_key(m_libspdm_use_req_asym_algo, &data, &data_size);
    spdm_context->local_context.local_public_key_provision = data;
    spdm_context->local_context.local_public_key_provision_size = data_size;

    libspdm_secret_lib_challenge_opaque_data_size = 0;
    libspdm_reset_message_c(spdm_context);

#if LIBSPDM_RECORD_TRANSCRIPT_DATA_SUPPORT
    spdm_context->transcript.message_m.buffer_size =
        spdm_context->transcript.message_m.max_buffer_size;
#endif

    response_size = sizeof(response);
    libspdm_get_random_number(SPDM_NONCE_SIZE, m_spdm_challenge_request4.nonce);
    status = libspdm_get_encap_response_challenge_auth(
        spdm_context,
        m_spdm_challenge_request4_size, &m_spdm_challenge_request4,
        &response_size, response);
    assert_int_equal(status, LIBSPDM_STATUS_SUCCESS);
    assert_int_equal(
        response_size,
        sizeof(spdm_challenge_auth_response_t) +
        libspdm_get_hash_size(spdm_context->connection_info.algorithm.base_hash_algo) +
        SPDM_NONCE_SIZE + 0 +
        sizeof(uint16_t) + 0 +
        libspdm_get_req_asym_signature_size(
            spdm_context->connection_info.algorithm.req_base_asym_alg));
    spdm_response = (void *)response;
    assert_int_equal(spdm_response->header.request_response_code, SPDM_CHALLENGE_AUTH);
    assert_int_equal(spdm_response->header.param1, 0xF);
    assert_int_equal(spdm_response->header.param2, 0);
#if LIBSPDM_RECORD_TRANSCRIPT_DATA_SUPPORT
    assert_int_equal(spdm_context->transcript.message_m.buffer_size, 0);
#endif
    free(data);
}

/**
 * Test 7: receiving a correct CHALLENGE message from the requester with context field
 * no opaque data, no measurements, and slot number 0.
 * Expected behavior:  get a RETURN_SUCCESS return code, correct context field
 **/
void test_libspdm_requester_encap_challenge_auth_case7(void **state)
{
    libspdm_return_t status;
    libspdm_test_context_t *spdm_test_context;
    libspdm_context_t *spdm_context;
    size_t response_size;
    uint8_t request[LIBSPDM_MAX_SPDM_MSG_SIZE];
    uint8_t response[LIBSPDM_MAX_SPDM_MSG_SIZE];
    spdm_challenge_auth_response_t *spdm_response;
    void *data;
    size_t data_size;
    uint8_t *requester_context;
    uint8_t *responder_context;

    spdm_test_context = *state;
    spdm_context = spdm_test_context->spdm_context;
    spdm_test_context->case_id = 0x7;

    spdm_context->local_context.capability.flags = 0;
    spdm_context->local_context.capability.flags |= SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_CHAL_CAP;
    spdm_context->local_context.capability.flags |= SPDM_GET_CAPABILITIES_REQUEST_FLAGS_CHAL_CAP;
    spdm_context->connection_info.capability.flags = 0;

    spdm_context->connection_info.algorithm.base_hash_algo = m_libspdm_use_hash_algo;
    spdm_context->connection_info.algorithm.base_asym_algo = m_libspdm_use_asym_algo;
    spdm_context->connection_info.algorithm.measurement_spec = m_libspdm_use_measurement_spec;
    spdm_context->connection_info.algorithm.measurement_hash_algo =
        m_libspdm_use_measurement_hash_algo;"|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\encap_challenge_auth.c|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\encap_challenge_auth.c|37a7343a40764adba9ebd567f3374a09
"spdm_context->connection_info.connection_state =
        LIBSPDM_CONNECTION_STATE_NEGOTIATED;
    spdm_context->connection_info.algorithm.base_hash_algo =
        m_libspdm_use_hash_algo;
    spdm_context->connection_info.algorithm.base_asym_algo =
        m_libspdm_use_asym_algo;
    spdm_context->connection_info.algorithm.measurement_spec =
        m_libspdm_use_measurement_spec;
    spdm_context->connection_info.algorithm.measurement_hash_algo =
        m_libspdm_use_measurement_hash_algo;
    spdm_context->connection_info.algorithm.req_base_asym_alg =
        m_libspdm_use_req_asym_algo;

    spdm_context->connection_info.version = SPDM_MESSAGE_VERSION_13
                                            << SPDM_VERSION_NUMBER_SHIFT_BIT;
    libspdm_read_responder_public_certificate_chain(m_libspdm_use_hash_algo,
                                                    m_libspdm_use_asym_algo, &data,
                                                    &data_size, NULL, NULL);
    spdm_context->local_context.local_cert_chain_provision[0] = data;
    spdm_context->local_context.local_cert_chain_provision_size[0] =
        data_size;

    libspdm_reset_message_mut_c(spdm_context);
#if LIBSPDM_RECORD_TRANSCRIPT_DATA_SUPPORT
    spdm_context->transcript.message_m.buffer_size =
        spdm_context->transcript.message_m.max_buffer_size;
#endif

    response_size = sizeof(response);
    libspdm_get_random_number(SPDM_NONCE_SIZE,
                              m_spdm_challenge_request5.nonce);

    libspdm_zero_mem(request, sizeof(request));
    libspdm_copy_mem(request, sizeof(spdm_challenge_request_t),
                     &m_spdm_challenge_request5, m_spdm_challenge_request5_size);
    requester_context = request + m_spdm_challenge_request5_size;
    libspdm_set_mem(requester_context, SPDM_REQ_CONTEXT_SIZE, 0xAA);
    m_spdm_challenge_request5_size += SPDM_REQ_CONTEXT_SIZE;

    status = libspdm_get_encap_response_challenge_auth(
        spdm_context, m_spdm_challenge_request5_size,
        request, &response_size, response);
    assert_int_equal(status, LIBSPDM_STATUS_SUCCESS);
    assert_int_equal(response_size, sizeof(spdm_challenge_auth_response_t) +
                     libspdm_get_hash_size(m_libspdm_use_hash_algo) +
                     SPDM_NONCE_SIZE + 0 + sizeof(uint16_t) +
                     libspdm_get_asym_signature_size(m_libspdm_use_req_asym_algo) +
                     SPDM_REQ_CONTEXT_SIZE);
    spdm_response = (void *)response;
    assert_int_equal(spdm_response->header.request_response_code,
                     SPDM_CHALLENGE_AUTH);
    assert_int_equal(spdm_response->header.param1, 0);
    assert_int_equal(spdm_response->header.param2, 1 << 0);

    responder_context = (void *)response;
    responder_context += sizeof(spdm_challenge_auth_response_t) +
                         libspdm_get_hash_size(m_libspdm_use_hash_algo) +
                         SPDM_NONCE_SIZE + 0 + sizeof(uint16_t);
    assert_memory_equal(requester_context, responder_context, SPDM_REQ_CONTEXT_SIZE);

#if LIBSPDM_RECORD_TRANSCRIPT_DATA_SUPPORT
    assert_int_equal(spdm_context->transcript.message_m.buffer_size,
                     0);
    assert_int_equal(spdm_context->transcript.message_mut_c.buffer_size, 0);
#else
    assert_null(spdm_context->transcript.digest_context_mut_m1m2);
#endif
    free(data);
}

/**
 * Test 8: The key usage bit mask is not set, the SlotID fields in CHALLENGE and CHALLENGE_AUTH shall not specify this certificate slot
 * Expected behavior: the responder accepts the request, but produces an ERROR message
 * indicating the invalid state.
 **/
void test_libspdm_requester_encap_challenge_auth_case8(void **state)
{
    libspdm_return_t status;
    libspdm_test_context_t *spdm_test_context;
    libspdm_context_t *spdm_context;
    size_t response_size;
    uint8_t request[LIBSPDM_MAX_SPDM_MSG_SIZE];
    uint8_t response[LIBSPDM_MAX_SPDM_MSG_SIZE];
    spdm_challenge_auth_response_t *spdm_response;
    void *data;
    size_t data_size;
    uint8_t *requester_context;
    uint8_t slot_id;

    spdm_test_context = *state;
    spdm_context = spdm_test_context->spdm_context;
    spdm_test_context->case_id = 0x8;

    spdm_context->local_context.capability.flags = 0;
    spdm_context->local_context.capability.flags |= SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_CHAL_CAP;
    spdm_context->local_context.capability.flags |= SPDM_GET_CAPABILITIES_REQUEST_FLAGS_CHAL_CAP;
    spdm_context->connection_info.capability.flags = 0;

    spdm_context->connection_info.algorithm.base_hash_algo = m_libspdm_use_hash_algo;
    spdm_context->connection_info.algorithm.base_asym_algo = m_libspdm_use_asym_algo;
    spdm_context->connection_info.algorithm.measurement_spec = m_libspdm_use_measurement_spec;
    spdm_context->connection_info.algorithm.measurement_hash_algo =
        m_libspdm_use_measurement_hash_algo;"|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\encap_challenge_auth.c|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\encap_challenge_auth.c|573cbc92b9ce41aeadf8080c50645875
"spdm_context->connection_info.connection_state =
        LIBSPDM_CONNECTION_STATE_NEGOTIATED;
    spdm_context->connection_info.algorithm.base_hash_algo =
        m_libspdm_use_hash_algo;
    spdm_context->connection_info.algorithm.base_asym_algo =
        m_libspdm_use_asym_algo;
    spdm_context->connection_info.algorithm.measurement_spec =
        m_libspdm_use_measurement_spec;
    spdm_context->connection_info.algorithm.measurement_hash_algo =
        m_libspdm_use_measurement_hash_algo;
    spdm_context->connection_info.algorithm.req_base_asym_alg =
        m_libspdm_use_req_asym_algo;
    spdm_context->connection_info.multi_key_conn_req = true;

    spdm_context->connection_info.version = SPDM_MESSAGE_VERSION_13
                                            << SPDM_VERSION_NUMBER_SHIFT_BIT;
    libspdm_read_responder_public_certificate_chain(m_libspdm_use_hash_algo,
                                                    m_libspdm_use_asym_algo, &data,
                                                    &data_size, NULL, NULL);
    spdm_context->local_context.local_cert_chain_provision[0] = data;
    spdm_context->local_context.local_cert_chain_provision_size[0] =
        data_size;

    libspdm_reset_message_mut_c(spdm_context);
#if LIBSPDM_RECORD_TRANSCRIPT_DATA_SUPPORT
    spdm_context->transcript.message_m.buffer_size =
        spdm_context->transcript.message_m.max_buffer_size;
#endif

    /* If set, the SlotID fields in CHALLENGE and CHALLENGE_AUTH can specify this certificate slot. If not set, the
     * SlotID fields in CHALLENGE and CHALLENGE_AUTH shall not specify this certificate slot. */
    slot_id = 0;
    m_spdm_challenge_request5.header.param1 = slot_id;
    spdm_context->local_context.local_key_usage_bit_mask[slot_id] =
        SPDM_KEY_USAGE_BIT_MASK_KEY_EX_USE |
        SPDM_KEY_USAGE_BIT_MASK_MEASUREMENT_USE;

    response_size = sizeof(response);
    libspdm_get_random_number(SPDM_NONCE_SIZE,
                              m_spdm_challenge_request5.nonce);

    libspdm_zero_mem(request, sizeof(request));
    libspdm_copy_mem(request, sizeof(spdm_challenge_request_t),
                     &m_spdm_challenge_request5, sizeof(m_spdm_challenge_request5));
    requester_context = request + sizeof(m_spdm_challenge_request5);
    libspdm_set_mem(requester_context, SPDM_REQ_CONTEXT_SIZE, 0xAA);
    m_spdm_challenge_request5_size = sizeof(m_spdm_challenge_request5) + SPDM_REQ_CONTEXT_SIZE;

    status = libspdm_get_encap_response_challenge_auth(
        spdm_context, m_spdm_challenge_request5_size,
        request, &response_size, response);
    assert_int_equal(status, LIBSPDM_STATUS_SUCCESS);
    assert_int_equal (response_size, sizeof(spdm_error_response_t));
    spdm_response = (void *)response;
    assert_int_equal (spdm_response->header.request_response_code, SPDM_ERROR);
    assert_int_equal (spdm_response->header.param1, SPDM_ERROR_CODE_INVALID_REQUEST);
    assert_int_equal (spdm_response->header.param2, 0);

    free(data);
}

libspdm_test_context_t m_spdm_requester_challenge_auth_test_context = {
    LIBSPDM_TEST_CONTEXT_VERSION,
    false,
};

int libspdm_requester_encap_challenge_auth_test_main(void)
{
    const struct CMUnitTest spdm_requester_challenge_auth_tests[] = {
        /* Success Case*/
        cmocka_unit_test(test_libspdm_requester_encap_challenge_auth_case1),
        /* Can be populated with new test.*/
        cmocka_unit_test(test_libspdm_requester_encap_challenge_auth_case2),
        /* connection_state Check*/
        cmocka_unit_test(test_libspdm_requester_encap_challenge_auth_case3),
        cmocka_unit_test(test_libspdm_requester_encap_challenge_auth_case4),
        cmocka_unit_test(test_libspdm_requester_encap_challenge_auth_case5),
        /* Success Case, use provisioned public key (slot 0xFF) */
        cmocka_unit_test(test_libspdm_requester_encap_challenge_auth_case6),
        /* Success Case: V1.3 get a correct context field */
        cmocka_unit_test(test_libspdm_requester_encap_challenge_auth_case7),
        /* The key usage bit mask is not set, failed Case*/
        cmocka_unit_test(test_libspdm_requester_encap_challenge_auth_case8),
    };

    libspdm_setup_test_context(&m_spdm_requester_challenge_auth_test_context);

    return cmocka_run_group_tests(spdm_requester_challenge_auth_tests,
                                  libspdm_unit_test_group_setup,
                                  libspdm_unit_test_group_teardown);
}

#endif /* (LIBSPDM_ENABLE_CAPABILITY_MUT_AUTH_CAP) && (..) */"|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\encap_challenge_auth.c|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\encap_challenge_auth.c|96b82be3ecba4a8a86969454f11246f9
"/**
 *  Copyright Notice:
 *  Copyright 2021-2024 DMTF. All rights reserved.
 *  License: BSD 3-Clause License. For full text see link: https://github.com/DMTF/libspdm/blob/main/LICENSE.md
 **/

#include ""spdm_unit_test.h""
#include ""internal/libspdm_requester_lib.h""
#include ""internal/libspdm_secured_message_lib.h""

#if LIBSPDM_ENABLE_CAPABILITY_CHUNK_CAP

static void *m_libspdm_local_certificate_chain_test_case_1;
static size_t m_libspdm_local_certificate_chain_size_test_case_1;

static uint8_t m_libspdm_local_large_response_buffer[LIBSPDM_MAX_SPDM_MSG_SIZE];

static size_t m_libspdm_local_buffer_size;
static uint8_t m_libspdm_local_buffer[LIBSPDM_MAX_MESSAGE_M1M2_BUFFER_SIZE];

static uint8_t m_libspdm_local_certificate_chain_test_case_4[LIBSPDM_MAX_CERT_CHAIN_SIZE];

/* Override the LIBSPDM_DATA_TRANSFER_SIZE just for the unit tests in this file.
 * All other unit tests have the default data transfer size due to the specific
 * unit tests requests and responses hardcode for each test case. */
#define CHUNK_GET_REQUESTER_UNIT_TEST_DATA_TRANSFER_SIZE (42)

/* Loading the target expiration certificate chain and saving root certificate hash
 * ""rsa3072_Expiration/bundle_responder.certchain.der""*/
bool libspdm_libspdm_read_responder_public_certificate_chain_expiration(
    void** data, size_t* size, void** hash, size_t* hash_size);

#define CHUNK_GET_UNIT_TEST_CHUNK_HANDLE (10)

void libspdm_requester_chunk_get_test_case1_build_certificates_response(
    void *context, void *response, size_t *response_size,
    size_t sub_cert_index, size_t *sub_cert_count)
{
    spdm_certificate_response_t *cert_rsp;
    uint16_t sub_cert_portion_length;
    uint16_t sub_cert_remainder_length;

    if (m_libspdm_local_certificate_chain_test_case_1 == NULL) {
        libspdm_read_responder_public_certificate_chain(
            m_libspdm_use_hash_algo, m_libspdm_use_asym_algo,
            &m_libspdm_local_certificate_chain_test_case_1,
            &m_libspdm_local_certificate_chain_size_test_case_1, NULL, NULL);
    }
    LIBSPDM_ASSERT(m_libspdm_local_certificate_chain_test_case_1 != NULL);

    *sub_cert_count = (m_libspdm_local_certificate_chain_size_test_case_1 +
                       LIBSPDM_MAX_CERT_CHAIN_BLOCK_LEN - 1) /
                      LIBSPDM_MAX_CERT_CHAIN_BLOCK_LEN;

    if (sub_cert_index != *sub_cert_count - 1) {
        sub_cert_portion_length = LIBSPDM_MAX_CERT_CHAIN_BLOCK_LEN;
        sub_cert_remainder_length =
            (uint16_t) (m_libspdm_local_certificate_chain_size_test_case_1 -
                        LIBSPDM_MAX_CERT_CHAIN_BLOCK_LEN *
                        (sub_cert_index + 1));
    } else {
        sub_cert_portion_length = (uint16_t) (
            m_libspdm_local_certificate_chain_size_test_case_1 -
            LIBSPDM_MAX_CERT_CHAIN_BLOCK_LEN * (*sub_cert_count - 1));
        sub_cert_remainder_length = 0;
    }

    cert_rsp = (spdm_certificate_response_t*) ((uint8_t*) response);

    cert_rsp->header.spdm_version = SPDM_MESSAGE_VERSION_12;
    cert_rsp->header.request_response_code = SPDM_CERTIFICATE;
    cert_rsp->header.param1 = 0;
    cert_rsp->header.param2 = 0;
    cert_rsp->portion_length = sub_cert_portion_length;
    cert_rsp->remainder_length = sub_cert_remainder_length;

    libspdm_copy_mem(
        cert_rsp + 1, sub_cert_portion_length,
        (uint8_t*) m_libspdm_local_certificate_chain_test_case_1 +
        LIBSPDM_MAX_CERT_CHAIN_BLOCK_LEN * sub_cert_index,
        sub_cert_portion_length);

    *response_size = sizeof(spdm_certificate_response_t) + sub_cert_portion_length;
}

void libspdm_requester_chunk_get_test_case2_build_measurements_response(
    void* context, void* response, size_t* response_size)
{
    libspdm_context_t* spdm_context;
    spdm_measurements_response_t* meas_rsp = NULL;
    spdm_measurement_block_dmtf_t* measurment_block;

    spdm_context = (libspdm_context_t*) context;
    /* This is get measurements test case 20, but changed to SPDM version 1.2
     * which includes opaque data */

    uint8_t* ptr;
    spdm_context->connection_info.algorithm.measurement_hash_algo =
        m_libspdm_use_measurement_hash_algo;

    *response_size = sizeof(spdm_measurements_response_t) +
                     2 * (sizeof(spdm_measurement_block_dmtf_t) +
                          libspdm_get_measurement_hash_size(
                              m_libspdm_use_measurement_hash_algo)) +
                     SPDM_NONCE_SIZE + sizeof(uint16_t);"|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\chunk_get.c|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\chunk_get.c|bb0c27b61d71446e8a845d85dc50e125
"meas_rsp = (spdm_measurements_response_t*)((uint8_t*) response);
    meas_rsp->header.spdm_version = SPDM_MESSAGE_VERSION_12;
    meas_rsp->header.request_response_code = SPDM_MEASUREMENTS;
    meas_rsp->header.param1 = 0;
    meas_rsp->header.param2 = 0;
    meas_rsp->number_of_blocks = 2;
    *(uint32_t*) meas_rsp->measurement_record_length =
        2 * ((uint32_t) (sizeof(spdm_measurement_block_dmtf_t) +
                         libspdm_get_measurement_hash_size(
                             m_libspdm_use_measurement_hash_algo)));
    measurment_block = (void*) (meas_rsp + 1);
    libspdm_set_mem(
        measurment_block,
        2 * (sizeof(spdm_measurement_block_dmtf_t) +
             libspdm_get_measurement_hash_size(
                 m_libspdm_use_measurement_hash_algo)),
        1);
    measurment_block->measurement_block_common_header.index = 1;
    measurment_block->measurement_block_common_header.measurement_specification =
        SPDM_MEASUREMENT_SPECIFICATION_DMTF;
    measurment_block->measurement_block_common_header.measurement_size =
        (uint16_t) (sizeof(spdm_measurement_block_dmtf_header_t) +
                    libspdm_get_measurement_hash_size(
                        m_libspdm_use_measurement_hash_algo));
    measurment_block =
        (void*) (((uint8_t*) measurment_block) +
                 (sizeof(spdm_measurement_block_dmtf_t) +
                  libspdm_get_measurement_hash_size(
                      m_libspdm_use_measurement_hash_algo)));
    measurment_block->measurement_block_common_header.index = 2;
    measurment_block->measurement_block_common_header.measurement_specification =
        SPDM_MEASUREMENT_SPECIFICATION_DMTF;
    measurment_block->measurement_block_common_header.measurement_size =
        (uint16_t) (sizeof(spdm_measurement_block_dmtf_header_t) +
                    libspdm_get_measurement_hash_size(
                        m_libspdm_use_measurement_hash_algo));
    ptr = (uint8_t*) meas_rsp + *response_size - SPDM_NONCE_SIZE - sizeof(uint16_t);
    libspdm_get_random_number(SPDM_NONCE_SIZE, ptr);
    ptr += SPDM_NONCE_SIZE;
    /* Set opaque data length to 0 */
    *ptr = 0;
    ptr++;
    *ptr = 0;
}

void libspdm_requester_chunk_get_test_case3_build_challenge_response(
    void* context, void* response, size_t* response_size)
{
    libspdm_context_t* spdm_context;
    spdm_challenge_auth_response_t* spdm_response;
    void* data;
    size_t data_size;
    uint8_t* ptr;
    uint8_t hash_data[LIBSPDM_MAX_HASH_SIZE];
    size_t sig_size;

    spdm_context = (libspdm_context_t*) context;
    libspdm_read_responder_public_certificate_chain(
        m_libspdm_use_hash_algo,
        m_libspdm_use_asym_algo, &data,
        &data_size, NULL, NULL);
    spdm_context->local_context.local_cert_chain_provision_size[0] = data_size;
    spdm_context->local_context.local_cert_chain_provision[0] = data;
    spdm_context->connection_info.algorithm.base_asym_algo = m_libspdm_use_asym_algo;
    spdm_context->connection_info.algorithm.base_hash_algo = m_libspdm_use_hash_algo;
    *response_size = sizeof(spdm_challenge_auth_response_t) +
                     libspdm_get_hash_size(m_libspdm_use_hash_algo) +
                     SPDM_NONCE_SIZE + 0 + sizeof(uint16_t) + 0 +
                     libspdm_get_asym_signature_size(m_libspdm_use_asym_algo);
    spdm_response = response;

    spdm_response->header.spdm_version = SPDM_MESSAGE_VERSION_12;
    spdm_response->header.request_response_code = SPDM_CHALLENGE_AUTH;
    spdm_response->header.param1 = 0;
    spdm_response->header.param2 = (1 << 0);
    ptr = (void*) (spdm_response + 1);
    libspdm_hash_all(
        m_libspdm_use_hash_algo,
        spdm_context->local_context.local_cert_chain_provision[0],
        spdm_context->local_context.local_cert_chain_provision_size[0],
        ptr);
    free(data);
    data = NULL;

    ptr += libspdm_get_hash_size(m_libspdm_use_hash_algo);
    libspdm_get_random_number(SPDM_NONCE_SIZE, ptr);
    ptr += SPDM_NONCE_SIZE;
    /* libspdm_zero_mem (ptr, libspdm_get_hash_size (m_libspdm_use_hash_algo));
     * ptr += libspdm_get_hash_size (m_libspdm_use_hash_algo);*/
    *(uint16_t*) ptr = 0;
    ptr += sizeof(uint16_t);"|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\chunk_get.c|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\chunk_get.c|0447f29adc304534b7335a8eaf43bd6f
"libspdm_copy_mem(
        &m_libspdm_local_buffer[m_libspdm_local_buffer_size],
        sizeof(m_libspdm_local_buffer) -
        (&m_libspdm_local_buffer[m_libspdm_local_buffer_size] - m_libspdm_local_buffer),
        spdm_response, (size_t) ptr - (size_t) spdm_response);
    m_libspdm_local_buffer_size += ((size_t) ptr - (size_t) spdm_response);
    LIBSPDM_DEBUG((LIBSPDM_DEBUG_INFO, ""m_libspdm_local_buffer_size (0x%zx):\n"",
                   m_libspdm_local_buffer_size));
    libspdm_dump_hex(m_libspdm_local_buffer, m_libspdm_local_buffer_size);
    libspdm_hash_all(m_libspdm_use_hash_algo, m_libspdm_local_buffer,
                     m_libspdm_local_buffer_size, hash_data);
    LIBSPDM_DEBUG((LIBSPDM_DEBUG_INFO, ""HashDataSize (0x%x):\n"",
                   libspdm_get_hash_size(m_libspdm_use_hash_algo)));
    libspdm_dump_hex(m_libspdm_local_buffer, m_libspdm_local_buffer_size);
    sig_size = libspdm_get_asym_signature_size(m_libspdm_use_asym_algo);
    libspdm_responder_data_sign(
#if LIBSPDM_HAL_PASS_SPDM_CONTEXT
        spdm_context,
#endif
        spdm_response->header.spdm_version << SPDM_VERSION_NUMBER_SHIFT_BIT,
            SPDM_CHALLENGE_AUTH,
            m_libspdm_use_asym_algo, m_libspdm_use_hash_algo,
            false, m_libspdm_local_buffer, m_libspdm_local_buffer_size,
            ptr, &sig_size);
    ptr += sig_size;
}

void libspdm_requester_chunk_get_test_case4_build_digest_response(
    void* context, void* response, size_t* response_size)
{
    libspdm_context_t *spdm_context;
    spdm_digest_response_t* spdm_response;
    uint8_t* digest;
    uint8_t slot_id;

    spdm_context = (libspdm_context_t*)context;
    spdm_context->connection_info.algorithm.base_hash_algo =
        m_libspdm_use_hash_algo;
    *response_size = sizeof(spdm_digest_response_t) +
                     libspdm_get_hash_size(m_libspdm_use_hash_algo) * SPDM_MAX_SLOT_COUNT;
    spdm_response = response;

    spdm_response->header.spdm_version = SPDM_MESSAGE_VERSION_12;
    spdm_response->header.param1 = 0;
    spdm_response->header.request_response_code = SPDM_DIGESTS;
    spdm_response->header.param2 = 0;
    libspdm_set_mem(m_libspdm_local_certificate_chain_test_case_4,
                    sizeof(m_libspdm_local_certificate_chain_test_case_4),
                    (uint8_t) (0xFF));

    digest = (void*) (spdm_response + 1);
    libspdm_zero_mem(digest,
                     libspdm_get_hash_size(m_libspdm_use_hash_algo) * SPDM_MAX_SLOT_COUNT);
    for (slot_id = 0; slot_id < SPDM_MAX_SLOT_COUNT; slot_id++) {
        libspdm_hash_all(
            m_libspdm_use_hash_algo,
            m_libspdm_local_certificate_chain_test_case_4,
            sizeof(m_libspdm_local_certificate_chain_test_case_4), &digest[0]);
        digest += libspdm_get_hash_size(m_libspdm_use_hash_algo);
    }
    spdm_response->header.param2 |= (0xFF << 0);
}

libspdm_return_t libspdm_requester_chunk_get_test_send_message(
    void* spdm_context, size_t request_size, const void* request,
    uint64_t timeout)
{
    libspdm_test_context_t* spdm_test_context;

    spdm_test_context = libspdm_get_test_context();
    if (spdm_test_context->case_id == 0x1) {
        return LIBSPDM_STATUS_SUCCESS;
    } else if (spdm_test_context->case_id == 0x2) {
        return LIBSPDM_STATUS_SUCCESS;
    } else if (spdm_test_context->case_id == 0x3) {
        const uint8_t* ptr;
        ptr = (const uint8_t*) request;

        if (ptr[2] == SPDM_CHALLENGE) {
            m_libspdm_local_buffer_size = 0;
            libspdm_copy_mem(m_libspdm_local_buffer, sizeof(m_libspdm_local_buffer),
                             &ptr[1], request_size - 1);
            m_libspdm_local_buffer_size += (request_size - 1);
        }
        return LIBSPDM_STATUS_SUCCESS;
    } else if (spdm_test_context->case_id == 0x4) {
        return LIBSPDM_STATUS_SUCCESS;
    } else if (spdm_test_context->case_id == 0x5) {
        return LIBSPDM_STATUS_SUCCESS;
    } else {
        return LIBSPDM_STATUS_SEND_FAIL;
    }
}

libspdm_return_t libspdm_requester_chunk_get_test_receive_message(
    void* spdm_context, size_t* response_size,
    void** response, uint64_t timeout)
{
    libspdm_test_context_t* spdm_test_context;
    uint8_t chunk_handle = CHUNK_GET_UNIT_TEST_CHUNK_HANDLE;
    static bool error_large_response_sent = false;

    static spdm_message_header_t* sub_rsp = NULL;
    static size_t sub_rsp_size = 0;
    static size_t sub_rsp_copied = 0;
    static size_t sub_rsp_remaining = 0;
    static uint16_t chunk_seq_no = 0;

    spdm_chunk_response_response_t* chunk_rsp;
    size_t chunk_rsp_size;
    uint8_t* chunk_copy_to;
    size_t chunk_copy_size;
    size_t transport_header_size;
    void (*build_response_func)(void*, void*, size_t *);

    build_response_func = NULL;

    spdm_test_context = libspdm_get_test_context();"|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\chunk_get.c|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\chunk_get.c|7417e9f68dd545369e3407012d1138c0
"build_response_func = NULL;

    spdm_test_context = libspdm_get_test_context();

    /* First response to these tests should always be error large response */
    if (error_large_response_sent == false) {
        error_large_response_sent = true;

        spdm_error_response_t* error_rsp;
        size_t error_rsp_size;

        transport_header_size = LIBSPDM_TEST_TRANSPORT_HEADER_SIZE;
        error_rsp = (void*) ((uint8_t*) *response + transport_header_size);
        error_rsp_size = sizeof(spdm_error_response_t) + sizeof(uint8_t);

        error_rsp->header.spdm_version = SPDM_MESSAGE_VERSION_12;
        error_rsp->header.request_response_code = SPDM_ERROR;
        error_rsp->header.param1 = SPDM_ERROR_CODE_LARGE_RESPONSE;
        error_rsp->header.param2 = 0;
        *((uint16_t*) (error_rsp + 1)) = chunk_handle;

        libspdm_transport_test_encode_message(
            spdm_context, NULL, false, false,
            error_rsp_size, error_rsp,
            response_size, response);

        return LIBSPDM_STATUS_SUCCESS;
    }

    if (spdm_test_context->case_id == 0x1) {

        /* Refers to just the certificate portion in the cert response */
        static size_t sub_cert_index = 0;
        static size_t sub_cert_count = 0;

        transport_header_size = LIBSPDM_TEST_TRANSPORT_HEADER_SIZE;
        chunk_rsp = (void*) ((uint8_t*) *response + transport_header_size);

        chunk_rsp->header.spdm_version = SPDM_MESSAGE_VERSION_12;
        chunk_rsp->header.request_response_code = SPDM_CHUNK_RESPONSE;
        chunk_rsp->header.param1 = 0;
        chunk_rsp->header.param2 = chunk_handle;

        chunk_copy_to = (uint8_t*) (chunk_rsp + 1);
        chunk_copy_size = CHUNK_GET_REQUESTER_UNIT_TEST_DATA_TRANSFER_SIZE
                          - sizeof(spdm_chunk_response_response_t);

        if (sub_rsp_copied == 0) {
            sub_rsp = (spdm_message_header_t*) m_libspdm_local_large_response_buffer;
            sub_rsp_size = sizeof(m_libspdm_local_large_response_buffer);
            libspdm_zero_mem(sub_rsp, sub_rsp_size);

            libspdm_requester_chunk_get_test_case1_build_certificates_response(
                spdm_context, sub_rsp, &sub_rsp_size, sub_cert_index, &sub_cert_count);

            sub_rsp_remaining = sub_rsp_size;
            sub_rsp_copied = 0;

            /* first chunk has size of large response */
            chunk_seq_no = 0;
            *((uint32_t*) (chunk_rsp + 1)) = (uint32_t) sub_rsp_size;

            chunk_copy_to += sizeof(uint32_t);
            chunk_copy_size -= sizeof(uint32_t);
            chunk_copy_size = LIBSPDM_MIN(sub_rsp_remaining, chunk_copy_size);
            chunk_rsp_size = sizeof(spdm_chunk_response_response_t)
                             + sizeof(uint32_t) + chunk_copy_size;
        } else {
            chunk_copy_size = LIBSPDM_MIN(sub_rsp_remaining, chunk_copy_size);
            chunk_rsp_size = sizeof(spdm_chunk_response_response_t) + chunk_copy_size;
        }

        if (chunk_copy_size == sub_rsp_remaining) {
            chunk_rsp->header.param1 = SPDM_CHUNK_GET_RESPONSE_ATTRIBUTE_LAST_CHUNK;
        }

        libspdm_copy_mem(chunk_copy_to,
                         *response_size - (chunk_copy_to - (uint8_t*)*response),
                         (uint8_t*) sub_rsp + sub_rsp_copied,
                         chunk_copy_size);

        sub_rsp_copied += chunk_copy_size;
        sub_rsp_remaining -= chunk_copy_size;
        chunk_rsp->chunk_size = (uint32_t) chunk_copy_size;
        chunk_rsp->chunk_seq_no = chunk_seq_no;
        chunk_seq_no++;

        libspdm_transport_test_encode_message(
            spdm_context, NULL, false, false,
            chunk_rsp_size, chunk_rsp,
            response_size, response);

        if (sub_rsp_copied >= sub_rsp_size) {
            sub_cert_index++;
            sub_rsp = NULL;
            sub_rsp_size = 0;
            sub_rsp_copied = 0;
            sub_rsp_remaining = 0;
            chunk_seq_no = 0;
            error_large_response_sent = false;

            if (sub_cert_index == sub_cert_count) {
                sub_cert_index = 0;

                free(m_libspdm_local_certificate_chain_test_case_1);
                m_libspdm_local_certificate_chain_test_case_1 = NULL;
                m_libspdm_local_certificate_chain_size_test_case_1 = 0;
            }
        }

        return LIBSPDM_STATUS_SUCCESS;
    } else if (spdm_test_context->case_id == 0x2) {
        build_response_func =
            libspdm_requester_chunk_get_test_case2_build_measurements_response;
    } else if (spdm_test_context->case_id == 0x3) {
        build_response_func =
            libspdm_requester_chunk_get_test_case3_build_challenge_response;
    } else if (spdm_test_context->case_id == 0x4) {
        build_response_func =
            libspdm_requester_chunk_get_test_case4_build_digest_response;
    } else {
        LIBSPDM_ASSERT(0);
        return LIBSPDM_STATUS_RECEIVE_FAIL;
    }"|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\chunk_get.c|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\chunk_get.c|5e0f6ff1e8cc49cb96769bbe490abb4c
"if (build_response_func) {
        transport_header_size = LIBSPDM_TEST_TRANSPORT_HEADER_SIZE;
        chunk_rsp = (void*) ((uint8_t*) *response + transport_header_size);

        chunk_rsp->header.spdm_version = SPDM_MESSAGE_VERSION_12;
        chunk_rsp->header.request_response_code = SPDM_CHUNK_RESPONSE;
        chunk_rsp->header.param1 = 0;
        chunk_rsp->header.param2 = chunk_handle;

        chunk_copy_to = (uint8_t*) (chunk_rsp + 1);
        chunk_copy_size = CHUNK_GET_REQUESTER_UNIT_TEST_DATA_TRANSFER_SIZE
                          - sizeof(spdm_chunk_response_response_t);

        if (sub_rsp_copied == 0) {

            sub_rsp = (spdm_message_header_t*) m_libspdm_local_large_response_buffer;
            sub_rsp_size = sizeof(m_libspdm_local_large_response_buffer);
            libspdm_zero_mem(sub_rsp, sub_rsp_size);

            build_response_func(spdm_context, sub_rsp, &sub_rsp_size);

            sub_rsp_remaining = sub_rsp_size;
            sub_rsp_copied = 0;

            /* first chunk has size of large response */
            chunk_seq_no = 0;
            *((uint32_t*) (chunk_rsp + 1)) = (uint32_t) sub_rsp_size;

            chunk_copy_to += sizeof(uint32_t);
            chunk_copy_size -= sizeof(uint32_t);
            chunk_copy_size = LIBSPDM_MIN(sub_rsp_remaining, chunk_copy_size);
            chunk_rsp_size = sizeof(spdm_chunk_response_response_t)
                             + sizeof(uint32_t) + chunk_copy_size;
        } else {
            chunk_copy_size = LIBSPDM_MIN(sub_rsp_remaining, chunk_copy_size);
            chunk_rsp_size = sizeof(spdm_chunk_response_response_t) + chunk_copy_size;
        }

        if (chunk_copy_size == sub_rsp_remaining) {
            chunk_rsp->header.param1 = SPDM_CHUNK_GET_RESPONSE_ATTRIBUTE_LAST_CHUNK;
        }

        libspdm_copy_mem(chunk_copy_to,
                         *response_size - (chunk_copy_to - (uint8_t*) *response),
                         (uint8_t*) sub_rsp + sub_rsp_copied,
                         chunk_copy_size);

        sub_rsp_copied += chunk_copy_size;
        sub_rsp_remaining -= chunk_copy_size;
        chunk_rsp->chunk_size = (uint32_t) chunk_copy_size;
        chunk_rsp->chunk_seq_no = chunk_seq_no++;

        libspdm_transport_test_encode_message(
            spdm_context, NULL, false, false,
            chunk_rsp_size, chunk_rsp,
            response_size, response);

        if (sub_rsp_copied >= sub_rsp_size) {
            sub_rsp = NULL;
            sub_rsp_size = 0;
            sub_rsp_copied = 0;
            sub_rsp_remaining = 0;
            chunk_seq_no = 0;
            error_large_response_sent = false;
        }
        return LIBSPDM_STATUS_SUCCESS;
    }
    return LIBSPDM_STATUS_SEND_FAIL;

}
#if LIBSPDM_SEND_GET_CERTIFICATE_SUPPORT
void libspdm_test_requester_chunk_get_case1(void** state)
{
    libspdm_return_t status;
    libspdm_test_context_t* spdm_test_context;
    libspdm_context_t* spdm_context;
    size_t cert_chain_size;
    uint8_t cert_chain[LIBSPDM_MAX_CERT_CHAIN_SIZE];
    void* data;
    size_t data_size;
    void* hash;
    size_t hash_size;
    const uint8_t* root_cert;
    size_t root_cert_size;
    #if LIBSPDM_RECORD_TRANSCRIPT_DATA_SUPPORT
    size_t count;
    #endif

    spdm_test_context = *state;
    spdm_context = spdm_test_context->spdm_context;
    spdm_test_context->case_id = 0x1;
    spdm_context->connection_info.version = SPDM_MESSAGE_VERSION_12 <<
                                            SPDM_VERSION_NUMBER_SHIFT_BIT;
    spdm_context->connection_info.connection_state = LIBSPDM_CONNECTION_STATE_AFTER_DIGESTS;
    spdm_context->connection_info.capability.flags |=
        (SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_CERT_CAP
         | SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_CHAL_CAP
         | SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_CHUNK_CAP);

    spdm_context->local_context.capability.flags |=  SPDM_GET_CAPABILITIES_REQUEST_FLAGS_CHUNK_CAP;
    spdm_context->local_context.capability.data_transfer_size
        = CHUNK_GET_REQUESTER_UNIT_TEST_DATA_TRANSFER_SIZE;
    spdm_context->local_context.is_requester = true;

    libspdm_read_responder_public_certificate_chain(
        m_libspdm_use_hash_algo,
        m_libspdm_use_asym_algo, &data,
        &data_size, &hash, &hash_size);
    libspdm_x509_get_cert_from_cert_chain(
        (uint8_t*) data + sizeof(spdm_cert_chain_t) + hash_size,
        data_size - sizeof(spdm_cert_chain_t) - hash_size, 0,
        &root_cert, &root_cert_size);
    LIBSPDM_DEBUG((LIBSPDM_DEBUG_INFO, ""root cert data :\n""));
    libspdm_dump_hex(root_cert, root_cert_size);
    spdm_context->local_context.peer_root_cert_provision_size[0] = root_cert_size;"|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\chunk_get.c|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\chunk_get.c|2b61f037c70543359d96fd422d1776b4
"spdm_context->local_context.peer_root_cert_provision[0] = root_cert;
    libspdm_reset_message_b(spdm_context);
    spdm_context->connection_info.algorithm.base_hash_algo = m_libspdm_use_hash_algo;
    spdm_context->connection_info.algorithm.base_asym_algo = m_libspdm_use_asym_algo;
    spdm_context->connection_info.algorithm.req_base_asym_alg = m_libspdm_use_req_asym_algo;

    #if LIBSPDM_RECORD_TRANSCRIPT_DATA_SUPPORT
    spdm_context->transcript.message_m.buffer_size =
        spdm_context->transcript.message_m.max_buffer_size;
    #endif
    cert_chain_size = sizeof(cert_chain);
    libspdm_zero_mem(cert_chain, sizeof(cert_chain));
    status = libspdm_get_certificate(spdm_context, NULL, 0, &cert_chain_size, cert_chain);
    assert_int_equal(status, LIBSPDM_STATUS_SUCCESS);
    #if LIBSPDM_RECORD_TRANSCRIPT_DATA_SUPPORT
    count = (data_size + LIBSPDM_MAX_CERT_CHAIN_BLOCK_LEN - 1) / LIBSPDM_MAX_CERT_CHAIN_BLOCK_LEN;
    assert_int_equal(spdm_context->transcript.message_b.buffer_size,
                     sizeof(spdm_get_certificate_request_t) * count +
                     sizeof(spdm_certificate_response_t) * count +
                     data_size);
    assert_int_equal(spdm_context->transcript.message_m.buffer_size, 0);
    spdm_context->connection_info.peer_used_cert_chain[0].buffer_size = 0;
    #else
    spdm_context->connection_info.peer_used_cert_chain[0].buffer_hash_size = 0;
    #endif
    free(data);
}
#endif
#if LIBSPDM_ENABLE_CAPABILITY_MEAS_CAP
void libspdm_test_requester_chunk_get_case2(void** state)
{
    /* Copied from Get Measurements Test Case 0x20 */
    libspdm_return_t status;
    libspdm_test_context_t* spdm_test_context;
    libspdm_context_t* spdm_context;
    uint8_t number_of_block;
    uint32_t measurement_record_length;
    uint8_t measurement_record[LIBSPDM_MAX_MEASUREMENT_RECORD_SIZE];
    uint8_t request_attribute;
    void* data;
    size_t data_size;
    void* hash;
    size_t hash_size;

    spdm_test_context = *state;
    spdm_context = spdm_test_context->spdm_context;
    spdm_test_context->case_id = 0x02;
    spdm_context->connection_info.version = SPDM_MESSAGE_VERSION_12 <<
                                            SPDM_VERSION_NUMBER_SHIFT_BIT;
    spdm_context->connection_info.connection_state =
        LIBSPDM_CONNECTION_STATE_AUTHENTICATED;
    spdm_context->connection_info.capability.flags |=
        (SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_MEAS_CAP_SIG
         | SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_CHUNK_CAP);

    spdm_context->local_context.capability.flags |=
        SPDM_GET_CAPABILITIES_REQUEST_FLAGS_CHUNK_CAP;
    spdm_context->local_context.capability.data_transfer_size
        = CHUNK_GET_REQUESTER_UNIT_TEST_DATA_TRANSFER_SIZE;

    libspdm_read_responder_public_certificate_chain(
        m_libspdm_use_hash_algo, m_libspdm_use_asym_algo,
        &data, &data_size, &hash, &hash_size);
    libspdm_reset_message_m(spdm_context, NULL);
    spdm_context->connection_info.algorithm.measurement_spec =
        m_libspdm_use_measurement_spec;
    spdm_context->connection_info.algorithm.measurement_hash_algo =
        m_libspdm_use_measurement_hash_algo;
    spdm_context->connection_info.algorithm.base_hash_algo =
        m_libspdm_use_hash_algo;
    spdm_context->connection_info.algorithm.base_asym_algo =
        m_libspdm_use_asym_algo;
    spdm_context->local_context.algorithm.measurement_spec =
        SPDM_MEASUREMENT_SPECIFICATION_DMTF;
    #if LIBSPDM_RECORD_TRANSCRIPT_DATA_SUPPORT
    spdm_context->connection_info.peer_used_cert_chain[0].buffer_size = data_size;
    libspdm_copy_mem(
        spdm_context->connection_info.peer_used_cert_chain[0].buffer,
        sizeof(spdm_context->connection_info.peer_used_cert_chain[0].buffer),
        data, data_size);
    #else
    libspdm_hash_all(
        spdm_context->connection_info.algorithm.base_hash_algo,
        data, data_size,
        spdm_context->connection_info.peer_used_cert_chain[0].buffer_hash);
    spdm_context->connection_info.peer_used_cert_chain[0].buffer_hash_size =
        libspdm_get_hash_size(spdm_context->connection_info.algorithm.base_hash_algo);
    libspdm_get_leaf_cert_public_key_from_cert_chain(
        spdm_context->connection_info.algorithm.base_hash_algo,
        spdm_context->connection_info.algorithm.base_asym_algo,
        data, data_size,
        &spdm_context->connection_info.peer_used_cert_chain[0].leaf_cert_public_key);
    #endif
    request_attribute = 0;"|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\chunk_get.c|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\chunk_get.c|1d3f8d72e9de4871a9d79b5f301894eb
"measurement_record_length = sizeof(measurement_record);
    status = libspdm_get_measurement(
        spdm_context, NULL, request_attribute,
        SPDM_GET_MEASUREMENTS_REQUEST_MEASUREMENT_OPERATION_ALL_MEASUREMENTS,
        0, NULL, &number_of_block, &measurement_record_length,
        measurement_record);
    assert_int_equal(status, LIBSPDM_STATUS_SUCCESS);
    #if LIBSPDM_RECORD_TRANSCRIPT_DATA_SUPPORT
    assert_int_equal(spdm_context->transcript.message_m.buffer_size,
                     sizeof(spdm_message_header_t) +
                     sizeof(spdm_measurements_response_t) +
                     2 * (sizeof(spdm_measurement_block_dmtf_t) +
                          libspdm_get_measurement_hash_size(
                              m_libspdm_use_measurement_hash_algo)) +
                     sizeof(uint16_t) + SPDM_NONCE_SIZE);
    spdm_context->connection_info.peer_used_cert_chain[0].buffer_size = 0;
    #else
    spdm_context->connection_info.peer_used_cert_chain[0].buffer_hash_size = 0;
    #endif
    free(data);
}
#endif
#if LIBSPDM_ENABLE_CAPABILITY_CHAL_CAP
void libspdm_test_requester_chunk_get_case3(void** state)
{
    /* Copied from Challenge Test Case 2*/
    libspdm_return_t status;
    libspdm_test_context_t* spdm_test_context;
    libspdm_context_t* spdm_context;
    uint8_t measurement_hash[LIBSPDM_MAX_HASH_SIZE];
    void* data;
    size_t data_size;
    void* hash;
    size_t hash_size;

    spdm_test_context = *state;
    spdm_context = spdm_test_context->spdm_context;
    spdm_test_context->case_id = 0x3;
    spdm_context->connection_info.connection_state =
        LIBSPDM_CONNECTION_STATE_NEGOTIATED;
    spdm_context->connection_info.capability.flags = 0;
    spdm_context->connection_info.capability.flags |=
        (SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_CHAL_CAP
         | SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_CHUNK_CAP);

    spdm_context->local_context.capability.flags |=
        SPDM_GET_CAPABILITIES_REQUEST_FLAGS_CHUNK_CAP;
    spdm_context->local_context.capability.data_transfer_size
        = CHUNK_GET_REQUESTER_UNIT_TEST_DATA_TRANSFER_SIZE;

    libspdm_read_responder_public_certificate_chain(
        m_libspdm_use_hash_algo, m_libspdm_use_asym_algo,
        &data, &data_size, &hash, &hash_size);
    libspdm_reset_message_a(spdm_context);
    libspdm_reset_message_b(spdm_context);
    libspdm_reset_message_c(spdm_context);
    spdm_context->connection_info.algorithm.base_hash_algo =
        m_libspdm_use_hash_algo;
    spdm_context->connection_info.algorithm.base_asym_algo =
        m_libspdm_use_asym_algo;

    spdm_context->connection_info.version = SPDM_MESSAGE_VERSION_12 <<
                                            SPDM_VERSION_NUMBER_SHIFT_BIT;

    #if LIBSPDM_RECORD_TRANSCRIPT_DATA_SUPPORT
    spdm_context->connection_info.peer_used_cert_chain[0].buffer_size = data_size;
    libspdm_copy_mem(
        spdm_context->connection_info.peer_used_cert_chain[0].buffer,
        sizeof(spdm_context->connection_info.peer_used_cert_chain[0].buffer),
        data, data_size);
    #else
    libspdm_hash_all(
        spdm_context->connection_info.algorithm.base_hash_algo,
        data, data_size,
        spdm_context->connection_info.peer_used_cert_chain[0].buffer_hash);
    spdm_context->connection_info.peer_used_cert_chain[0].buffer_hash_size =
        libspdm_get_hash_size(spdm_context->connection_info.algorithm.base_hash_algo);
    libspdm_get_leaf_cert_public_key_from_cert_chain(
        spdm_context->connection_info.algorithm.base_hash_algo,
        spdm_context->connection_info.algorithm.base_asym_algo,
        data, data_size,
        &spdm_context->connection_info.peer_used_cert_chain[0].leaf_cert_public_key);
    #endif

    libspdm_zero_mem(measurement_hash, sizeof(measurement_hash));
    status = libspdm_challenge(
        spdm_context, NULL, 0,
        SPDM_CHALLENGE_REQUEST_NO_MEASUREMENT_SUMMARY_HASH,
        measurement_hash, NULL);
    assert_int_equal(status, LIBSPDM_STATUS_SUCCESS);
    free(data);
    #if LIBSPDM_RECORD_TRANSCRIPT_DATA_SUPPORT
    spdm_context->connection_info.peer_used_cert_chain[0].buffer_size = 0;
    #else
    spdm_context->connection_info.peer_used_cert_chain[0].buffer_hash_size = 0;
    #endif
}
#endif
#if LIBSPDM_SEND_GET_CERTIFICATE_SUPPORT
void libspdm_test_requester_chunk_get_case4(void** state)
{
    /* Copied from Get Digests Test Case 2*/
    libspdm_return_t status;
    libspdm_test_context_t* spdm_test_context;
    libspdm_context_t* spdm_context;
    libspdm_data_parameter_t parameter;
    uint8_t slot_mask;
    uint8_t slot_id;
    uint8_t total_digest_buffer[LIBSPDM_MAX_HASH_SIZE * SPDM_MAX_SLOT_COUNT];
    uint8_t my_total_digest_buffer[LIBSPDM_MAX_HASH_SIZE * SPDM_MAX_SLOT_COUNT];
    uint8_t* digest;
    size_t data_return_size;"|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\chunk_get.c|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\chunk_get.c|4d7f8aefcb3d4a08a8cbced77932ae9a
"spdm_test_context = *state;
    spdm_context = spdm_test_context->spdm_context;
    spdm_test_context->case_id = 0x4;
    spdm_context->connection_info.version = SPDM_MESSAGE_VERSION_12 <<
                                            SPDM_VERSION_NUMBER_SHIFT_BIT;
    spdm_context->connection_info.connection_state = LIBSPDM_CONNECTION_STATE_NEGOTIATED;
    spdm_context->connection_info.capability.flags |=
        (SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_CERT_CAP
         | SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_CHUNK_CAP);

    spdm_context->local_context.capability.flags |=
        SPDM_GET_CAPABILITIES_REQUEST_FLAGS_CHUNK_CAP;
    spdm_context->local_context.capability.data_transfer_size
        = CHUNK_GET_REQUESTER_UNIT_TEST_DATA_TRANSFER_SIZE;

    spdm_context->connection_info.algorithm.base_hash_algo = m_libspdm_use_hash_algo;

    libspdm_set_mem(
        m_libspdm_local_certificate_chain_test_case_4,
        sizeof(m_libspdm_local_certificate_chain_test_case_4),
        (uint8_t) (0xFF));
    libspdm_reset_message_b(spdm_context);

    #if LIBSPDM_RECORD_TRANSCRIPT_DATA_SUPPORT
    spdm_context->transcript.message_m.buffer_size =
        spdm_context->transcript.message_m.max_buffer_size;
    #endif
    libspdm_zero_mem(total_digest_buffer, sizeof(total_digest_buffer));
    status = libspdm_get_digest(spdm_context, NULL, &slot_mask, &total_digest_buffer);
    assert_int_equal(status, LIBSPDM_STATUS_SUCCESS);

    assert_int_equal(slot_mask, 0xFF);
    libspdm_zero_mem(my_total_digest_buffer, sizeof(my_total_digest_buffer));
    digest = my_total_digest_buffer;
    for (slot_id = 0; slot_id < SPDM_MAX_SLOT_COUNT; slot_id++) {
        libspdm_hash_all(m_libspdm_use_hash_algo,
                         m_libspdm_local_certificate_chain_test_case_4,
                         sizeof(m_libspdm_local_certificate_chain_test_case_4), digest);
        digest += libspdm_get_hash_size(m_libspdm_use_hash_algo);
    }
    assert_memory_equal(total_digest_buffer, my_total_digest_buffer,
                        sizeof(my_total_digest_buffer));

    parameter.location = LIBSPDM_DATA_LOCATION_CONNECTION;
    data_return_size = sizeof(uint8_t);
    status = libspdm_get_data(spdm_context, LIBSPDM_DATA_PEER_SLOT_MASK,
                              &parameter, &slot_mask, &data_return_size);
    assert_int_equal(status, LIBSPDM_STATUS_SUCCESS);
    assert_int_equal(data_return_size, sizeof(uint8_t));
    assert_int_equal(slot_mask, 0xFF);

    data_return_size = sizeof(total_digest_buffer);
    status = libspdm_get_data(spdm_context, LIBSPDM_DATA_PEER_TOTAL_DIGEST_BUFFER,
                              &parameter, total_digest_buffer, &data_return_size);
    assert_int_equal(status, LIBSPDM_STATUS_SUCCESS);
    assert_int_equal(data_return_size, libspdm_get_hash_size(
                         m_libspdm_use_hash_algo) * SPDM_MAX_SLOT_COUNT);
    assert_memory_equal(total_digest_buffer, my_total_digest_buffer,
                        sizeof(my_total_digest_buffer));

    #if LIBSPDM_RECORD_TRANSCRIPT_DATA_SUPPORT
    assert_int_equal(
        spdm_context->transcript.message_b.buffer_size,
        sizeof(spdm_get_digest_request_t) +
        sizeof(spdm_digest_response_t) +
        libspdm_get_hash_size(spdm_context->connection_info
                              .algorithm.base_hash_algo) * SPDM_MAX_SLOT_COUNT);
    assert_int_equal(spdm_context->transcript.message_m.buffer_size, 0);
    #endif
}
#endif

libspdm_test_context_t m_libspdm_requester_chunk_get_test_context = {
    LIBSPDM_TEST_CONTEXT_VERSION,
    true,
    libspdm_requester_chunk_get_test_send_message,
    libspdm_requester_chunk_get_test_receive_message,
};

int libspdm_requester_chunk_get_test_main(void)
{
    /* Test the CHUNK_GET handlers in various requester handlers */
    const struct CMUnitTest spdm_requester_chunk_get_tests[] = {
#if LIBSPDM_SEND_GET_CERTIFICATE_SUPPORT
        /* Request a certificate in portions */
        cmocka_unit_test(libspdm_test_requester_chunk_get_case1),
#endif
#if LIBSPDM_ENABLE_CAPABILITY_MEAS_CAP
        /* Request all measurements */
        cmocka_unit_test(libspdm_test_requester_chunk_get_case2),
#endif
#if LIBSPDM_ENABLE_CAPABILITY_CHAL_CAP
        /* Request Challenge */
        cmocka_unit_test(libspdm_test_requester_chunk_get_case3),
#endif
#if LIBSPDM_SEND_GET_CERTIFICATE_SUPPORT
        /* Request Digests */
        cmocka_unit_test(libspdm_test_requester_chunk_get_case4),
#endif
    };

    libspdm_setup_test_context(
        &m_libspdm_requester_chunk_get_test_context);

    return cmocka_run_group_tests(spdm_requester_chunk_get_tests,
                                  libspdm_unit_test_group_setup,
                                  libspdm_unit_test_group_teardown);
}

#endif /* LIBSPDM_ENABLE_CAPABILITY_CHUNK_CAP*/"|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\chunk_get.c|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\chunk_get.c|1236f462ae2847eebeed52a94afd7b7e
"/**
 *  Copyright Notice:
 *  Copyright 2021-2022 DMTF. All rights reserved.
 *  License: BSD 3-Clause License. For full text see link: https://github.com/DMTF/libspdm/blob/main/LICENSE.md
 **/

#include ""spdm_unit_test.h""
#include ""internal/libspdm_requester_lib.h""

#if LIBSPDM_ENABLE_CAPABILITY_ENCAP_CAP

static uint8_t m_libspdm_local_certificate_chain[LIBSPDM_MAX_CERT_CHAIN_SIZE];
static uint8_t temp_buf[LIBSPDM_RECEIVER_BUFFER_SIZE];
static uint8_t temp_buff[LIBSPDM_MAX_SPDM_MSG_SIZE];

libspdm_return_t libspdm_requester_encap_request_test_send_message(void *spdm_context,
                                                                   size_t request_size,
                                                                   const void *request,
                                                                   uint64_t timeout)
{
    libspdm_test_context_t *spdm_test_context;

    spdm_test_context = libspdm_get_test_context();
    static uint8_t sub_index = 0;
    spdm_deliver_encapsulated_response_request_t *spdm_deliver_encapsulated_response_request;
    uint8_t send_temp_buf[LIBSPDM_SENDER_BUFFER_SIZE];
    size_t decode_message_size;
    spdm_error_response_t *spdm_response;
    libspdm_return_t status;
    uint32_t *message_session_id;
    bool is_message_app_message;
    uint8_t message_buffer[LIBSPDM_SENDER_BUFFER_SIZE];

    memcpy(message_buffer, request, request_size);

    switch (spdm_test_context->case_id)
    {
    case 0x1:
        return LIBSPDM_STATUS_SEND_FAIL;
    case 0x2:
        return LIBSPDM_STATUS_SUCCESS;
    case 0x3:
        return LIBSPDM_STATUS_SUCCESS;
    case 0x4:
        return LIBSPDM_STATUS_SUCCESS;
    case 0x5:
        return LIBSPDM_STATUS_SUCCESS;
    case 0x6:
        return LIBSPDM_STATUS_SUCCESS;
    case 0x7:
        return LIBSPDM_STATUS_SUCCESS;
    case 0x8:
        return LIBSPDM_STATUS_SUCCESS;
    case 0x9:
        return LIBSPDM_STATUS_SUCCESS;
    case 0xA:
    {
        if (sub_index == 0) {
            sub_index++;
        } else if (sub_index == 1) {
            sub_index = 0;
            message_session_id = NULL;
            is_message_app_message = false;
            spdm_deliver_encapsulated_response_request = (void*) send_temp_buf;
            decode_message_size = sizeof(spdm_deliver_encapsulated_response_request_t) +
                                  sizeof(spdm_error_response_t);
            status = libspdm_transport_test_decode_message(spdm_context, &message_session_id,
                                                           &is_message_app_message, true,
                                                           request_size, message_buffer,
                                                           &decode_message_size,
                                                           (void **)&spdm_deliver_encapsulated_response_request);
            if (LIBSPDM_STATUS_IS_ERROR(status)) {
                LIBSPDM_DEBUG((LIBSPDM_DEBUG_ERROR, ""transport_decode_message - %xu\n"",
                               status));
            }
            spdm_response = (void*) (spdm_deliver_encapsulated_response_request + 1);
            if (spdm_response->header.request_response_code != SPDM_ERROR) {
                return LIBSPDM_STATUS_SEND_FAIL;
            }
            if (spdm_response->header.param1 != SPDM_ERROR_CODE_UNEXPECTED_REQUEST) { /* Here check ErrorCode should be UnexpectedRequestd */
                return LIBSPDM_STATUS_SEND_FAIL;
            }
            if (spdm_response->header.param2 != 0) {
                return LIBSPDM_STATUS_SEND_FAIL;
            }
        }
        return LIBSPDM_STATUS_SUCCESS;
    }
    default:
        return LIBSPDM_STATUS_SEND_FAIL;
    }
}

libspdm_return_t libspdm_requester_encap_request_test_receive_message(
    void *spdm_context, size_t *response_size,
    void **response, uint64_t timeout)
{

    libspdm_test_context_t *spdm_test_context;
    spdm_encapsulated_request_response_t *libspdm_encapsulated_request_response;
    uint8_t *digest;
    size_t temp_buf_size;
    uint8_t *temp_buf_ptr;

    spdm_test_context = libspdm_get_test_context();
    static uint8_t sub_index = 0;
    switch (spdm_test_context->case_id)
    {
    case 0x1:
        return LIBSPDM_STATUS_RECEIVE_FAIL;

    case 0x2:
    {
        spdm_digest_response_t *spdm_response;"|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\encap_request.c|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\encap_request.c|3919d87b5fdf4561a850a9d64376da93
"case 0x2:
    {
        spdm_digest_response_t *spdm_response;

        ((libspdm_context_t *)spdm_context)
        ->connection_info.algorithm.base_hash_algo =
            m_libspdm_use_hash_algo;
        if (sub_index == 0) {
            temp_buf_size = sizeof(spdm_digest_response_t) +
                            libspdm_get_hash_size(m_libspdm_use_hash_algo) +
                            sizeof(spdm_encapsulated_request_response_t);
            libspdm_zero_mem(temp_buf, LIBSPDM_RECEIVER_BUFFER_SIZE);
            temp_buf_ptr = temp_buf + sizeof(libspdm_test_message_header_t);
            libspdm_encapsulated_request_response = (void*) temp_buf_ptr;
            libspdm_encapsulated_request_response->header.spdm_version = SPDM_MESSAGE_VERSION_11;
            libspdm_encapsulated_request_response->header.request_response_code =
                SPDM_ENCAPSULATED_REQUEST;
            libspdm_encapsulated_request_response->header.param1 = 0;
            libspdm_encapsulated_request_response->header.param2 = 0;

            spdm_response = (void *)(temp_buf_ptr
                                     + sizeof(spdm_encapsulated_request_response_t));
            spdm_response->header.spdm_version = SPDM_MESSAGE_VERSION_11;
            spdm_response->header.request_response_code = SPDM_GET_DIGESTS;
            spdm_response->header.param1 = 0;
            spdm_response->header.param2 = 0;
            libspdm_set_mem(m_libspdm_local_certificate_chain,
                            sizeof(m_libspdm_local_certificate_chain),
                            (uint8_t)(0xFF));

            digest = (void *)(spdm_response + 1);
            libspdm_hash_all(m_libspdm_use_hash_algo, m_libspdm_local_certificate_chain,
                             sizeof(m_libspdm_local_certificate_chain), &digest[0]);
            spdm_response->header.param2 |= (0x01 << 0);
            sub_index++;
        } else if (sub_index == 1) {
            /*When the version is SPDM_MESSAGE_VERSION_12, use the following code*/
            spdm_message_header_t *spdm_encapsulated_response_ack_response;
            temp_buf_size = sizeof(spdm_message_header_t);
            libspdm_zero_mem(temp_buf, LIBSPDM_RECEIVER_BUFFER_SIZE);
            temp_buf_ptr = temp_buf + sizeof(libspdm_test_message_header_t);
            spdm_encapsulated_response_ack_response = (void*) temp_buf_ptr;
            spdm_encapsulated_response_ack_response->spdm_version = SPDM_MESSAGE_VERSION_11;
            spdm_encapsulated_response_ack_response->request_response_code =
                SPDM_ENCAPSULATED_RESPONSE_ACK;
            spdm_encapsulated_response_ack_response->param1 = 0;
            spdm_encapsulated_response_ack_response->param2 =
                SPDM_ENCAPSULATED_RESPONSE_ACK_RESPONSE_PAYLOAD_TYPE_ABSENT;
            sub_index = 0;
        } else {
            temp_buf_size = 0;
            temp_buf_ptr = NULL;
        }
        libspdm_transport_test_encode_message(spdm_context, NULL, false, false,
                                              temp_buf_size, temp_buf_ptr,
                                              response_size, response);
    }
        return LIBSPDM_STATUS_SUCCESS;
    case 0x3:
    {
        spdm_digest_response_t *spdm_response;

        ((libspdm_context_t *)spdm_context)
        ->connection_info.algorithm.base_hash_algo =
            m_libspdm_use_hash_algo;
        if (sub_index == 0) {
            temp_buf_size = sizeof(spdm_digest_response_t) +
                            libspdm_get_hash_size(m_libspdm_use_hash_algo) +
                            sizeof(spdm_encapsulated_request_response_t);
            libspdm_zero_mem(temp_buf, LIBSPDM_RECEIVER_BUFFER_SIZE);
            temp_buf_ptr = temp_buf + sizeof(libspdm_test_message_header_t);
            libspdm_encapsulated_request_response = (void *) temp_buf_ptr;
            libspdm_encapsulated_request_response->header.spdm_version = SPDM_MESSAGE_VERSION_11;
            libspdm_encapsulated_request_response->header.request_response_code =
                SPDM_ENCAPSULATED_REQUEST;
            libspdm_encapsulated_request_response->header.param1 = 0;
            libspdm_encapsulated_request_response->header.param2 = 0;

            spdm_response =
                (void *)(temp_buf_ptr + sizeof(spdm_encapsulated_request_response_t));
            spdm_response->header.spdm_version = SPDM_MESSAGE_VERSION_11;
            spdm_response->header.request_response_code = SPDM_GET_DIGESTS;
            spdm_response->header.param1 = 0;
            spdm_response->header.param2 = 0;
            libspdm_set_mem(m_libspdm_local_certificate_chain,
                            sizeof(m_libspdm_local_certificate_chain),
                            (uint8_t)(0xFF));"|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\encap_request.c|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\encap_request.c|bd8642deda60449ba8527b0d65a9639e
"digest = (void *)(spdm_response + 1);
            libspdm_hash_all(m_libspdm_use_hash_algo, m_libspdm_local_certificate_chain,
                             sizeof(m_libspdm_local_certificate_chain), &digest[0]);
            spdm_response->header.param2 |= (0x01 << 0);
            sub_index++;
        } else if (sub_index == 1) {
            /*When the version is SPDM_MESSAGE_VERSION_12, use the following code*/
            spdm_encapsulated_response_ack_response_t *spdm_encapsulated_response_ack_response;
            temp_buf_size = sizeof(spdm_encapsulated_response_ack_response_t);
            libspdm_zero_mem(temp_buf, LIBSPDM_RECEIVER_BUFFER_SIZE);
            temp_buf_ptr = temp_buf + sizeof(libspdm_test_message_header_t);
            spdm_encapsulated_response_ack_response = (void *) temp_buf_ptr;
            spdm_encapsulated_response_ack_response->header.spdm_version = SPDM_MESSAGE_VERSION_11;
            spdm_encapsulated_response_ack_response->header.request_response_code =
                SPDM_ENCAPSULATED_RESPONSE_ACK;
            spdm_encapsulated_response_ack_response->header.param1 = 0;
            spdm_encapsulated_response_ack_response->header.param2 =
                SPDM_ENCAPSULATED_RESPONSE_ACK_RESPONSE_PAYLOAD_TYPE_ABSENT;
            sub_index = 0;
        } else {
            temp_buf_size = 0;
            temp_buf_ptr = NULL;
        }
        libspdm_transport_test_encode_message(spdm_context, NULL, false, false,
                                              temp_buf_size, temp_buf_ptr,
                                              response_size, response);
    }
        return LIBSPDM_STATUS_SUCCESS;
    case 0x4:
    {
        spdm_digest_response_t *spdm_response;

        ((libspdm_context_t *)spdm_context)
        ->connection_info.algorithm.base_hash_algo =
            m_libspdm_use_hash_algo;
        temp_buf_size = sizeof(spdm_encapsulated_request_response_t);
        libspdm_zero_mem(temp_buf, LIBSPDM_RECEIVER_BUFFER_SIZE);
        temp_buf_ptr = temp_buf + sizeof(libspdm_test_message_header_t);
        spdm_response = (void *) temp_buf_ptr;
        spdm_response->header.spdm_version = SPDM_MESSAGE_VERSION_11;
        spdm_response->header.request_response_code = SPDM_ENCAPSULATED_REQUEST;
        spdm_response->header.param1 = 0;
        spdm_response->header.param2 = 0;

        libspdm_transport_test_encode_message(spdm_context, NULL, false, false,
                                              temp_buf_size, temp_buf_ptr,
                                              response_size, response);
    }
        return LIBSPDM_STATUS_SUCCESS;
    case 0x5:
    {
        spdm_digest_response_t *spdm_response;

        ((libspdm_context_t *)spdm_context)
        ->connection_info.algorithm.base_hash_algo =
            m_libspdm_use_hash_algo;
        if (sub_index == 0) {
            temp_buf_size = sizeof(spdm_digest_response_t) +
                            libspdm_get_hash_size(m_libspdm_use_hash_algo) +
                            sizeof(spdm_encapsulated_request_response_t);
            libspdm_zero_mem(temp_buf, LIBSPDM_RECEIVER_BUFFER_SIZE);
            temp_buf_ptr = temp_buf + sizeof(libspdm_test_message_header_t);
            libspdm_encapsulated_request_response = (void *)temp_buf_ptr;
            libspdm_encapsulated_request_response->header.spdm_version = SPDM_MESSAGE_VERSION_11;
            libspdm_encapsulated_request_response->header.request_response_code =
                SPDM_ENCAPSULATED_REQUEST;
            libspdm_encapsulated_request_response->header.param1 = 0;
            libspdm_encapsulated_request_response->header.param2 = 0;

            spdm_response =
                (void *)(temp_buf_ptr + sizeof(spdm_encapsulated_request_response_t));
            spdm_response->header.spdm_version = SPDM_MESSAGE_VERSION_11;
            spdm_response->header.request_response_code = SPDM_GET_DIGESTS;
            spdm_response->header.param1 = 0;
            spdm_response->header.param2 = 0;
            libspdm_set_mem(m_libspdm_local_certificate_chain,
                            sizeof(m_libspdm_local_certificate_chain),
                            (uint8_t)(0xFF));

            digest = (void *)(spdm_response + 1);
            libspdm_hash_all(m_libspdm_use_hash_algo, m_libspdm_local_certificate_chain,
                             sizeof(m_libspdm_local_certificate_chain), &digest[0]);
            spdm_response->header.param2 |= (0x01 << 0);

            libspdm_transport_test_encode_message(spdm_context, NULL, false, false,
                                                  temp_buf_size, temp_buf_ptr,
                                                  response_size, response);
            sub_index++;
        } else if (sub_index == 1) {
            size_t temp_buff_size;
            uint8_t *temp_buff_ptr;"|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\encap_request.c|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\encap_request.c|6cdb9b7922674bd38fef4b2b21d13c5c
"temp_buff_size = sizeof(spdm_message_header_t);
            libspdm_zero_mem(temp_buff, LIBSPDM_MAX_SPDM_MSG_SIZE);
            temp_buff_ptr = temp_buff + sizeof(libspdm_test_message_header_t);

            sub_index = 0;
            libspdm_transport_test_encode_message(spdm_context, NULL, false, false,
                                                  temp_buff_size, temp_buff_ptr,
                                                  response_size, response);
        }
    }
        return LIBSPDM_STATUS_SUCCESS;
    case 0x6:
    {
        spdm_digest_response_t *spdm_response;

        ((libspdm_context_t *)spdm_context)
        ->connection_info.algorithm.base_hash_algo =
            m_libspdm_use_hash_algo;
        if (sub_index == 0) {
            temp_buf_size =
                sizeof(spdm_digest_response_t) +
                libspdm_get_hash_size(m_libspdm_use_hash_algo) +
                sizeof(spdm_encapsulated_request_response_t);
            libspdm_zero_mem(temp_buf, LIBSPDM_RECEIVER_BUFFER_SIZE);
            temp_buf_ptr = temp_buf + sizeof(libspdm_test_message_header_t);

            libspdm_encapsulated_request_response = (void*) temp_buf_ptr;
            libspdm_encapsulated_request_response->header.spdm_version = SPDM_MESSAGE_VERSION_11;
            libspdm_encapsulated_request_response->header.request_response_code =
                SPDM_ENCAPSULATED_REQUEST;
            libspdm_encapsulated_request_response->header.param1 = 0;
            libspdm_encapsulated_request_response->header.param2 = 0;

            spdm_response =
                (void*) (temp_buf_ptr + sizeof(spdm_encapsulated_request_response_t));
            spdm_response->header.spdm_version = SPDM_MESSAGE_VERSION_11;
            spdm_response->header.request_response_code = SPDM_GET_DIGESTS;
            spdm_response->header.param1 = 0;
            spdm_response->header.param2 = 0;
            libspdm_set_mem(m_libspdm_local_certificate_chain,
                            sizeof(m_libspdm_local_certificate_chain),
                            (uint8_t) (0xFF));

            digest = (void*) (spdm_response + 1);
            libspdm_hash_all(m_libspdm_use_hash_algo, m_libspdm_local_certificate_chain,
                             sizeof(m_libspdm_local_certificate_chain), &digest[0]);
            spdm_response->header.param2 |= (0x01 << 0);
            sub_index++;
        } else if (sub_index == 1) {
            spdm_encapsulated_response_ack_response_t* spdm_encapsulated_response_ack_response;
            temp_buf_size = sizeof(spdm_encapsulated_response_ack_response_t);
            libspdm_zero_mem(temp_buf, LIBSPDM_RECEIVER_BUFFER_SIZE);
            temp_buf_ptr = temp_buf + sizeof(libspdm_test_message_header_t);
            spdm_encapsulated_response_ack_response = (void*) temp_buf_ptr;
            spdm_encapsulated_response_ack_response->header.spdm_version = SPDM_MESSAGE_VERSION_11;
            spdm_encapsulated_response_ack_response->header.request_response_code =
                SPDM_ENCAPSULATED_RESPONSE_ACK;
            spdm_encapsulated_response_ack_response->header.param1 = 0;
            spdm_encapsulated_response_ack_response->header.param2 = 0;
            sub_index = 0;
        } else {
            temp_buf_size = 0;
            temp_buf_ptr = NULL;
        }
        libspdm_transport_test_encode_message(spdm_context, NULL, false, false,
                                              temp_buf_size, temp_buf_ptr,
                                              response_size, response);
    }
        return LIBSPDM_STATUS_SUCCESS;
    case 0x7:
    {
        spdm_digest_response_t *spdm_response;

        ((libspdm_context_t *)spdm_context)
        ->connection_info.algorithm.base_hash_algo =
            m_libspdm_use_hash_algo;
        if (sub_index == 0) {
            temp_buf_size = sizeof(spdm_digest_response_t) +
                            libspdm_get_hash_size(m_libspdm_use_hash_algo) +
                            sizeof(spdm_encapsulated_request_response_t);
            libspdm_zero_mem(temp_buf, LIBSPDM_RECEIVER_BUFFER_SIZE);
            temp_buf_ptr = temp_buf + sizeof(libspdm_test_message_header_t);
            libspdm_encapsulated_request_response = (void *)temp_buf_ptr;
            libspdm_encapsulated_request_response->header.spdm_version = SPDM_MESSAGE_VERSION_11;
            libspdm_encapsulated_request_response->header.request_response_code =
                SPDM_ENCAPSULATED_REQUEST;
            libspdm_encapsulated_request_response->header.param1 = 0;
            libspdm_encapsulated_request_response->header.param2 = 0;"|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\encap_request.c|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\encap_request.c|565140b50c7e4ba884868e21ef8ce808
"spdm_response =
                (void *)(temp_buf_ptr + sizeof(spdm_encapsulated_request_response_t));
            spdm_response->header.spdm_version = SPDM_MESSAGE_VERSION_11;
            spdm_response->header.request_response_code = SPDM_GET_DIGESTS;
            spdm_response->header.param1 = 0;
            spdm_response->header.param2 = 0;
            libspdm_set_mem(m_libspdm_local_certificate_chain,
                            sizeof(m_libspdm_local_certificate_chain),
                            (uint8_t)(0xFF));

            digest = (void *)(spdm_response + 1);
            libspdm_hash_all(m_libspdm_use_hash_algo, m_libspdm_local_certificate_chain,
                             sizeof(m_libspdm_local_certificate_chain), &digest[0]);
            spdm_response->header.param2 |= (0x01 << 0);
            sub_index++;
        } else if (sub_index == 1) {
            spdm_encapsulated_response_ack_response_t *spdm_encapsulated_response_ack_response;
            temp_buf_size = sizeof(spdm_encapsulated_response_ack_response_t);
            libspdm_zero_mem(temp_buf, LIBSPDM_RECEIVER_BUFFER_SIZE);
            temp_buf_ptr = temp_buf + sizeof(libspdm_test_message_header_t);
            spdm_encapsulated_response_ack_response = (void *) temp_buf_ptr;
            spdm_encapsulated_response_ack_response->header.spdm_version = SPDM_MESSAGE_VERSION_11;
            spdm_encapsulated_response_ack_response->header.request_response_code =
                SPDM_ENCAPSULATED_RESPONSE_ACK;
            spdm_encapsulated_response_ack_response->header.param1 = 0;
            spdm_encapsulated_response_ack_response->header.param2 =
                SPDM_ENCAPSULATED_RESPONSE_ACK_RESPONSE_PAYLOAD_TYPE_REQ_SLOT_NUMBER;
            sub_index = 0;
        } else {
            temp_buf_size = 0;
            temp_buf_ptr = NULL;
        }
        libspdm_transport_test_encode_message(spdm_context, NULL, false, false,
                                              temp_buf_size, temp_buf_ptr,
                                              response_size, response);
    }
        return LIBSPDM_STATUS_SUCCESS;
    case 0x8:
    {
        spdm_get_certificate_request_t *spdm_response;

        ((libspdm_context_t *)spdm_context)
        ->connection_info.algorithm.base_hash_algo =
            m_libspdm_use_hash_algo;
        if (sub_index == 0) {
            temp_buf_size = sizeof(spdm_get_certificate_request_t) +
                            sizeof(spdm_encapsulated_request_response_t);
            libspdm_zero_mem(temp_buf, LIBSPDM_RECEIVER_BUFFER_SIZE);
            temp_buf_ptr = temp_buf + sizeof(libspdm_test_message_header_t);
            libspdm_encapsulated_request_response = (void *)temp_buf_ptr;
            libspdm_encapsulated_request_response->header.spdm_version = SPDM_MESSAGE_VERSION_11;
            libspdm_encapsulated_request_response->header.request_response_code =
                SPDM_ENCAPSULATED_REQUEST;
            libspdm_encapsulated_request_response->header.param1 = 0;
            libspdm_encapsulated_request_response->header.param2 = 0;

            spdm_response =
                (void *)(temp_buf_ptr + sizeof(spdm_encapsulated_request_response_t));
            spdm_response->header.spdm_version = SPDM_MESSAGE_VERSION_11;
            spdm_response->header.request_response_code = SPDM_GET_CERTIFICATE;
            spdm_response->header.param1 = 0;
            spdm_response->header.param2 = 0;
            spdm_response->offset = 0;
            spdm_response->length = LIBSPDM_MAX_CERT_CHAIN_BLOCK_LEN;
            sub_index++;
        } else if (sub_index == 1) {
            /*When the version is SPDM_MESSAGE_VERSION_12, use the following code*/
            spdm_message_header_t *spdm_encapsulated_response_ack_response;
            temp_buf_size = sizeof(spdm_message_header_t);
            libspdm_zero_mem(temp_buf, LIBSPDM_RECEIVER_BUFFER_SIZE);
            temp_buf_ptr = temp_buf + sizeof(libspdm_test_message_header_t);
            spdm_encapsulated_response_ack_response = (void *)temp_buf_ptr;
            spdm_encapsulated_response_ack_response->spdm_version = SPDM_MESSAGE_VERSION_11;
            spdm_encapsulated_response_ack_response->request_response_code =
                SPDM_ENCAPSULATED_RESPONSE_ACK;
            spdm_encapsulated_response_ack_response->param1 = 0;
            spdm_encapsulated_response_ack_response->param2 =
                SPDM_ENCAPSULATED_RESPONSE_ACK_RESPONSE_PAYLOAD_TYPE_ABSENT;
            sub_index = 0;
        } else {
            temp_buf_size = 0;
            temp_buf_ptr = NULL;
        }
        libspdm_transport_test_encode_message(spdm_context, NULL, false, false,
                                              temp_buf_size, temp_buf_ptr,
                                              response_size, response);
    }
        return LIBSPDM_STATUS_SUCCESS;

    case 0x9:
    {
        spdm_key_update_request_t *spdm_response;"|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\encap_request.c|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\encap_request.c|8f9388a589964cc4b43beac7b15294cc
"case 0x9:
    {
        spdm_key_update_request_t *spdm_response;

        ((libspdm_context_t *)spdm_context)
        ->connection_info.algorithm.base_hash_algo =
            m_libspdm_use_hash_algo;
        if (sub_index == 0) {
            temp_buf_size = sizeof(spdm_key_update_request_t) +
                            sizeof(spdm_encapsulated_request_response_t);
            libspdm_zero_mem(temp_buf, LIBSPDM_RECEIVER_BUFFER_SIZE);
            temp_buf_ptr = temp_buf + sizeof(libspdm_test_message_header_t);
            libspdm_encapsulated_request_response = (void *)temp_buf_ptr;
            libspdm_encapsulated_request_response->header.spdm_version = SPDM_MESSAGE_VERSION_11;
            libspdm_encapsulated_request_response->header.request_response_code =
                SPDM_ENCAPSULATED_REQUEST;
            libspdm_encapsulated_request_response->header.param1 = 0;
            libspdm_encapsulated_request_response->header.param2 = 0;

            spdm_response =
                (void *)(temp_buf_ptr + sizeof(spdm_encapsulated_request_response_t));
            spdm_response->header.spdm_version = SPDM_MESSAGE_VERSION_11;
            spdm_response->header.request_response_code = SPDM_KEY_UPDATE;
            spdm_response->header.param1 = SPDM_KEY_UPDATE_OPERATIONS_TABLE_UPDATE_KEY;
            spdm_response->header.param2 = 0x3;

            sub_index++;
        } else if (sub_index == 1) {
            /*When the version is SPDM_MESSAGE_VERSION_12, use the following code*/
            spdm_message_header_t *spdm_encapsulated_response_ack_response;
            temp_buf_size = sizeof(spdm_message_header_t);
            libspdm_zero_mem(temp_buf, LIBSPDM_RECEIVER_BUFFER_SIZE);
            temp_buf_ptr = temp_buf + sizeof(libspdm_test_message_header_t);
            spdm_encapsulated_response_ack_response = (void *)temp_buf_ptr;
            spdm_encapsulated_response_ack_response->spdm_version = SPDM_MESSAGE_VERSION_11;
            spdm_encapsulated_response_ack_response->request_response_code =
                SPDM_ENCAPSULATED_RESPONSE_ACK;
            spdm_encapsulated_response_ack_response->param1 = 0;
            spdm_encapsulated_response_ack_response->param2 =
                SPDM_ENCAPSULATED_RESPONSE_ACK_RESPONSE_PAYLOAD_TYPE_ABSENT;
            sub_index = 0;
        } else {
            temp_buf_size = 0;
            temp_buf_ptr = NULL;
        }
        libspdm_transport_test_encode_message(spdm_context, NULL, false, false,
                                              temp_buf_size, temp_buf_ptr,
                                              response_size, response);
    }
        return LIBSPDM_STATUS_SUCCESS;

    case 0xA:
    {
        spdm_get_encapsulated_request_request_t *spdm_response;

        if (sub_index == 0) {
            temp_buf_size = sizeof(spdm_encapsulated_request_response_t) +
                            sizeof(spdm_get_encapsulated_request_request_t);
            libspdm_zero_mem(temp_buf, LIBSPDM_RECEIVER_BUFFER_SIZE);
            temp_buf_ptr = temp_buf + sizeof(libspdm_test_message_header_t);

            /* The following is ENCAPSULATED_REQUEST response message */
            libspdm_encapsulated_request_response = (void *) temp_buf_ptr;
            libspdm_encapsulated_request_response->header.spdm_version = SPDM_MESSAGE_VERSION_11;
            libspdm_encapsulated_request_response->header.request_response_code =
                SPDM_ENCAPSULATED_REQUEST;
            libspdm_encapsulated_request_response->header.param1 = 0;
            libspdm_encapsulated_request_response->header.param2 = 0;

            /* The following is EncapsulatedRequest Field of the above ENCAPSULATED_REQUEST response message*/
            spdm_response =
                (void *)(temp_buf_ptr + sizeof(spdm_get_encapsulated_request_request_t));
            spdm_response->header.spdm_version = SPDM_MESSAGE_VERSION_11;
            spdm_response->header.request_response_code = SPDM_GET_ENCAPSULATED_REQUEST;  /* Here invalid: GET_ENCAPSULATED_REQUEST is encapsulated */
            spdm_response->header.param1 = 0;
            spdm_response->header.param2 = 0;"|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\encap_request.c|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\encap_request.c|0e888b9aee7c4e2ca9ef5aef32e6f09e
"sub_index++;
        } else if (sub_index == 1) {
            spdm_message_header_t *spdm_encapsulated_response_ack_response;
            temp_buf_size = sizeof(spdm_message_header_t);
            libspdm_zero_mem(temp_buf, LIBSPDM_RECEIVER_BUFFER_SIZE);
            temp_buf_ptr = temp_buf + sizeof(libspdm_test_message_header_t);
            spdm_encapsulated_response_ack_response = (void *)temp_buf_ptr;
            spdm_encapsulated_response_ack_response->spdm_version = SPDM_MESSAGE_VERSION_11;
            spdm_encapsulated_response_ack_response->request_response_code =
                SPDM_ENCAPSULATED_RESPONSE_ACK;
            spdm_encapsulated_response_ack_response->param1 = 0;
            spdm_encapsulated_response_ack_response->param2 =
                SPDM_ENCAPSULATED_RESPONSE_ACK_RESPONSE_PAYLOAD_TYPE_ABSENT;
            sub_index = 0;
        } else {
            temp_buf_size = 0;
            temp_buf_ptr = NULL;
        }
        libspdm_transport_test_encode_message(spdm_context, NULL, false, false,
                                              temp_buf_size, temp_buf_ptr,
                                              response_size, response);
    }
        return LIBSPDM_STATUS_SUCCESS;

    default:
        return LIBSPDM_STATUS_RECEIVE_FAIL;
    }
}

#if (LIBSPDM_ENABLE_CAPABILITY_MUT_AUTH_CAP) && (LIBSPDM_ENABLE_CAPABILITY_CERT_CAP)
void libspdm_test_requester_encap_request_case1(void **State)
{
    libspdm_return_t status;
    libspdm_test_context_t *spdm_test_context;
    libspdm_context_t *spdm_context;
    void *data;
    size_t data_size;
    void *hash;
    size_t hash_size;

    spdm_test_context = *State;
    spdm_context = spdm_test_context->spdm_context;
    spdm_test_context->case_id = 0x1;

    spdm_context->connection_info.version = SPDM_MESSAGE_VERSION_11 <<
                                            SPDM_VERSION_NUMBER_SHIFT_BIT;
    spdm_context->connection_info.connection_state = LIBSPDM_CONNECTION_STATE_NEGOTIATED;
    spdm_context->connection_info.capability.flags |= SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_PSK_CAP;
    spdm_context->connection_info.capability.flags |=
        SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_ENCRYPT_CAP;
    spdm_context->connection_info.capability.flags |= SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_MAC_CAP;
    spdm_context->local_context.capability.flags |= SPDM_GET_CAPABILITIES_REQUEST_FLAGS_PSK_CAP;
    spdm_context->local_context.capability.flags |= SPDM_GET_CAPABILITIES_REQUEST_FLAGS_ENCRYPT_CAP;
    spdm_context->local_context.capability.flags |= SPDM_GET_CAPABILITIES_REQUEST_FLAGS_MAC_CAP;
    spdm_context->local_context.capability.flags |= SPDM_GET_CAPABILITIES_REQUEST_FLAGS_ENCAP_CAP;
    spdm_context->local_context.capability.flags |= SPDM_GET_CAPABILITIES_REQUEST_FLAGS_CERT_CAP;

    spdm_context->connection_info.capability.flags |=
        SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_ENCAP_CAP;
    libspdm_read_responder_public_certificate_chain(m_libspdm_use_hash_algo,
                                                    m_libspdm_use_asym_algo, &data,
                                                    &data_size,
                                                    &hash, &hash_size);
    libspdm_reset_message_a(spdm_context);
    spdm_context->connection_info.algorithm.base_hash_algo = m_libspdm_use_hash_algo;
    spdm_context->connection_info.algorithm.base_asym_algo = m_libspdm_use_asym_algo;
    spdm_context->connection_info.algorithm.dhe_named_group = m_libspdm_use_dhe_algo;
    spdm_context->connection_info.algorithm.aead_cipher_suite = m_libspdm_use_aead_algo;
#if LIBSPDM_RECORD_TRANSCRIPT_DATA_SUPPORT
    spdm_context->connection_info.peer_used_cert_chain[0].buffer_size =
        data_size;
    libspdm_copy_mem(spdm_context->connection_info.peer_used_cert_chain[0].buffer,
                     sizeof(spdm_context->connection_info.peer_used_cert_chain[0].buffer),
                     data, data_size);
#endif

    libspdm_register_get_encap_response_func(spdm_context, libspdm_get_encap_response_digest);
    status = libspdm_encapsulated_request(spdm_context, NULL, 0, NULL);
    assert_int_equal(status, LIBSPDM_STATUS_SEND_FAIL);
    free(data);
}

void libspdm_test_requester_encap_request_case2(void **State)
{
    libspdm_return_t status;
    libspdm_test_context_t *spdm_test_context;
    libspdm_context_t *spdm_context;
    void *data;
    size_t data_size;
    void *hash;
    size_t hash_size;

    spdm_test_context = *State;
    spdm_context = spdm_test_context->spdm_context;
    spdm_test_context->case_id = 0x2;"|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\encap_request.c|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\encap_request.c|fe4d33d221eb4938a4a786d6fc691a69
"spdm_context->connection_info.version = SPDM_MESSAGE_VERSION_11 <<
                                            SPDM_VERSION_NUMBER_SHIFT_BIT;
    spdm_context->connection_info.connection_state = LIBSPDM_CONNECTION_STATE_NEGOTIATED;
    spdm_context->connection_info.capability.flags |= SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_PSK_CAP;
    spdm_context->connection_info.capability.flags |=
        SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_ENCRYPT_CAP;
    spdm_context->connection_info.capability.flags |= SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_MAC_CAP;
    spdm_context->local_context.capability.flags |= SPDM_GET_CAPABILITIES_REQUEST_FLAGS_PSK_CAP;
    spdm_context->local_context.capability.flags |= SPDM_GET_CAPABILITIES_REQUEST_FLAGS_ENCRYPT_CAP;
    spdm_context->local_context.capability.flags |= SPDM_GET_CAPABILITIES_REQUEST_FLAGS_MAC_CAP;
    spdm_context->local_context.capability.flags |= SPDM_GET_CAPABILITIES_REQUEST_FLAGS_ENCAP_CAP;
    spdm_context->local_context.capability.flags |= SPDM_GET_CAPABILITIES_REQUEST_FLAGS_CERT_CAP;
    spdm_context->connection_info.capability.flags |=
        SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_ENCAP_CAP;
    libspdm_read_responder_public_certificate_chain(m_libspdm_use_hash_algo,
                                                    m_libspdm_use_asym_algo, &data,
                                                    &data_size,
                                                    &hash, &hash_size);
    libspdm_reset_message_a(spdm_context);
    spdm_context->connection_info.algorithm.base_hash_algo = m_libspdm_use_hash_algo;
    spdm_context->connection_info.algorithm.base_asym_algo = m_libspdm_use_asym_algo;
    spdm_context->connection_info.algorithm.dhe_named_group = m_libspdm_use_dhe_algo;
    spdm_context->connection_info.algorithm.aead_cipher_suite = m_libspdm_use_aead_algo;
#if LIBSPDM_RECORD_TRANSCRIPT_DATA_SUPPORT
    spdm_context->connection_info.peer_used_cert_chain[0].buffer_size =
        data_size;
    libspdm_copy_mem(spdm_context->connection_info.peer_used_cert_chain[0].buffer,
                     sizeof(spdm_context->connection_info.peer_used_cert_chain[0].buffer),
                     data, data_size);
#endif

    libspdm_register_get_encap_response_func(spdm_context, libspdm_get_encap_response_digest);
    status = libspdm_encapsulated_request(spdm_context, NULL, 0, NULL);
    assert_int_equal(status, LIBSPDM_STATUS_SUCCESS);
    free(data);
}

void libspdm_test_requester_encap_request_case3(void **State)
{
    libspdm_return_t status;
    libspdm_test_context_t *spdm_test_context;
    libspdm_context_t *spdm_context;
    void *data;
    size_t data_size;
    void *hash;
    size_t hash_size;

    spdm_test_context = *State;
    spdm_context = spdm_test_context->spdm_context;
    spdm_test_context->case_id = 0x3;"|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\encap_request.c|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\encap_request.c|c662fa068b6c4144977e971fa5c8824e
"spdm_context->connection_info.version = SPDM_MESSAGE_VERSION_11 <<
                                            SPDM_VERSION_NUMBER_SHIFT_BIT;
    spdm_context->connection_info.connection_state = LIBSPDM_CONNECTION_STATE_NEGOTIATED;
    spdm_context->connection_info.capability.flags |= SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_PSK_CAP;
    spdm_context->connection_info.capability.flags |=
        SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_ENCRYPT_CAP;
    spdm_context->connection_info.capability.flags |= SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_MAC_CAP;
    spdm_context->local_context.capability.flags |= SPDM_GET_CAPABILITIES_REQUEST_FLAGS_PSK_CAP;
    spdm_context->local_context.capability.flags |= SPDM_GET_CAPABILITIES_REQUEST_FLAGS_ENCRYPT_CAP;
    spdm_context->local_context.capability.flags |= SPDM_GET_CAPABILITIES_REQUEST_FLAGS_MAC_CAP;
    spdm_context->local_context.capability.flags |= SPDM_GET_CAPABILITIES_REQUEST_FLAGS_ENCAP_CAP;
    spdm_context->local_context.capability.flags |= SPDM_GET_CAPABILITIES_REQUEST_FLAGS_CERT_CAP;
    spdm_context->connection_info.capability.flags |=
        SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_ENCAP_CAP;
    libspdm_read_responder_public_certificate_chain(m_libspdm_use_hash_algo,
                                                    m_libspdm_use_asym_algo, &data,
                                                    &data_size,
                                                    &hash, &hash_size);
    libspdm_reset_message_a(spdm_context);
    spdm_context->connection_info.algorithm.base_hash_algo = m_libspdm_use_hash_algo;
    spdm_context->connection_info.algorithm.base_asym_algo = m_libspdm_use_asym_algo;
    spdm_context->connection_info.algorithm.dhe_named_group = m_libspdm_use_dhe_algo;
    spdm_context->connection_info.algorithm.aead_cipher_suite = m_libspdm_use_aead_algo;
#if LIBSPDM_RECORD_TRANSCRIPT_DATA_SUPPORT
    spdm_context->connection_info.peer_used_cert_chain[0].buffer_size =
        data_size;
    libspdm_copy_mem(spdm_context->connection_info.peer_used_cert_chain[0].buffer,
                     sizeof(spdm_context->connection_info.peer_used_cert_chain[0].buffer),
                     data, data_size);
#endif

    libspdm_register_get_encap_response_func(spdm_context, libspdm_get_encap_response_digest);
    status = libspdm_encapsulated_request(spdm_context, NULL, 0, NULL);
    assert_int_equal(status, LIBSPDM_STATUS_INVALID_MSG_SIZE);
    free(data);
}

void libspdm_test_requester_encap_request_case4(void **State)
{
    libspdm_return_t status;
    libspdm_test_context_t *spdm_test_context;
    libspdm_context_t *spdm_context;
    void *data;
    size_t data_size;
    void *hash;
    size_t hash_size;

    spdm_test_context = *State;
    spdm_context = spdm_test_context->spdm_context;
    spdm_test_context->case_id = 0x4;"|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\encap_request.c|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\encap_request.c|206c208e59944924aa61009dc12bcd6a
"spdm_context->connection_info.version = SPDM_MESSAGE_VERSION_11 <<
                                            SPDM_VERSION_NUMBER_SHIFT_BIT;
    spdm_context->connection_info.connection_state = LIBSPDM_CONNECTION_STATE_NEGOTIATED;
    spdm_context->connection_info.capability.flags |= SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_PSK_CAP;
    spdm_context->connection_info.capability.flags |=
        SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_ENCRYPT_CAP;
    spdm_context->connection_info.capability.flags |= SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_MAC_CAP;
    spdm_context->local_context.capability.flags |= SPDM_GET_CAPABILITIES_REQUEST_FLAGS_PSK_CAP;
    spdm_context->local_context.capability.flags |= SPDM_GET_CAPABILITIES_REQUEST_FLAGS_ENCRYPT_CAP;
    spdm_context->local_context.capability.flags |= SPDM_GET_CAPABILITIES_REQUEST_FLAGS_MAC_CAP;
    spdm_context->local_context.capability.flags |= SPDM_GET_CAPABILITIES_REQUEST_FLAGS_ENCAP_CAP;
    spdm_context->local_context.capability.flags |= SPDM_GET_CAPABILITIES_REQUEST_FLAGS_CERT_CAP;
    spdm_context->connection_info.capability.flags |=
        SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_ENCAP_CAP;
    libspdm_read_responder_public_certificate_chain(m_libspdm_use_hash_algo,
                                                    m_libspdm_use_asym_algo, &data,
                                                    &data_size,
                                                    &hash, &hash_size);
    libspdm_reset_message_a(spdm_context);
    spdm_context->connection_info.algorithm.base_hash_algo = m_libspdm_use_hash_algo;
    spdm_context->connection_info.algorithm.base_asym_algo = m_libspdm_use_asym_algo;
    spdm_context->connection_info.algorithm.dhe_named_group = m_libspdm_use_dhe_algo;
    spdm_context->connection_info.algorithm.aead_cipher_suite = m_libspdm_use_aead_algo;
#if LIBSPDM_RECORD_TRANSCRIPT_DATA_SUPPORT
    spdm_context->connection_info.peer_used_cert_chain[0].buffer_size =
        data_size;
    libspdm_copy_mem(spdm_context->connection_info.peer_used_cert_chain[0].buffer,
                     sizeof(spdm_context->connection_info.peer_used_cert_chain[0].buffer),
                     data, data_size);
#endif

    libspdm_register_get_encap_response_func(spdm_context, libspdm_get_encap_response_digest);
    status = libspdm_encapsulated_request(spdm_context, NULL, 0, NULL);
    assert_int_equal(status, LIBSPDM_STATUS_SUCCESS);
    free(data);
}

void libspdm_test_requester_encap_request_case5(void **State)
{
    libspdm_return_t status;
    libspdm_test_context_t *spdm_test_context;
    libspdm_context_t *spdm_context;
    void *data;
    size_t data_size;
    void *hash;
    size_t hash_size;

    spdm_test_context = *State;
    spdm_context = spdm_test_context->spdm_context;
    spdm_test_context->case_id = 0x5;"|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\encap_request.c|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\encap_request.c|52f064ea126d4d1ea6c8f016b08c2911
"spdm_context->connection_info.version = SPDM_MESSAGE_VERSION_11 <<
                                            SPDM_VERSION_NUMBER_SHIFT_BIT;
    spdm_context->connection_info.connection_state = LIBSPDM_CONNECTION_STATE_NEGOTIATED;
    spdm_context->connection_info.capability.flags |= SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_PSK_CAP;
    spdm_context->connection_info.capability.flags |=
        SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_ENCRYPT_CAP;
    spdm_context->connection_info.capability.flags |= SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_MAC_CAP;
    spdm_context->local_context.capability.flags |= SPDM_GET_CAPABILITIES_REQUEST_FLAGS_PSK_CAP;
    spdm_context->local_context.capability.flags |= SPDM_GET_CAPABILITIES_REQUEST_FLAGS_ENCRYPT_CAP;
    spdm_context->local_context.capability.flags |= SPDM_GET_CAPABILITIES_REQUEST_FLAGS_MAC_CAP;
    spdm_context->local_context.capability.flags |= SPDM_GET_CAPABILITIES_REQUEST_FLAGS_ENCAP_CAP;
    spdm_context->local_context.capability.flags |= SPDM_GET_CAPABILITIES_REQUEST_FLAGS_CERT_CAP;
    spdm_context->connection_info.capability.flags |=
        SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_ENCAP_CAP;
    libspdm_read_responder_public_certificate_chain(m_libspdm_use_hash_algo,
                                                    m_libspdm_use_asym_algo, &data,
                                                    &data_size,
                                                    &hash, &hash_size);
    libspdm_reset_message_a(spdm_context);
    spdm_context->connection_info.algorithm.base_hash_algo = m_libspdm_use_hash_algo;
    spdm_context->connection_info.algorithm.base_asym_algo = m_libspdm_use_asym_algo;
    spdm_context->connection_info.algorithm.dhe_named_group = m_libspdm_use_dhe_algo;
    spdm_context->connection_info.algorithm.aead_cipher_suite = m_libspdm_use_aead_algo;
#if LIBSPDM_RECORD_TRANSCRIPT_DATA_SUPPORT
    spdm_context->connection_info.peer_used_cert_chain[0].buffer_size =
        data_size;
    libspdm_copy_mem(spdm_context->connection_info.peer_used_cert_chain[0].buffer,
                     sizeof(spdm_context->connection_info.peer_used_cert_chain[0].buffer),
                     data, data_size);
#endif

    libspdm_register_get_encap_response_func(spdm_context, libspdm_get_encap_response_digest);
    status = libspdm_encapsulated_request(spdm_context, NULL, 0, NULL);
    assert_int_equal(status, LIBSPDM_STATUS_INVALID_MSG_FIELD);
    free(data);
}

void libspdm_test_requester_encap_request_case6(void **State)
{
    libspdm_return_t status;
    libspdm_test_context_t *spdm_test_context;
    libspdm_context_t *spdm_context;
    void *data;
    size_t data_size;
    void *hash;
    size_t hash_size;

    spdm_test_context = *State;
    spdm_context = spdm_test_context->spdm_context;
    spdm_test_context->case_id = 0x6;"|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\encap_request.c|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\encap_request.c|fa07ec87bca642be96804152e2fc94d5
"spdm_context->connection_info.version = SPDM_MESSAGE_VERSION_11 <<
                                            SPDM_VERSION_NUMBER_SHIFT_BIT;
    spdm_context->connection_info.connection_state = LIBSPDM_CONNECTION_STATE_NEGOTIATED;
    spdm_context->connection_info.capability.flags |= SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_PSK_CAP;
    spdm_context->connection_info.capability.flags |=
        SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_ENCRYPT_CAP;
    spdm_context->connection_info.capability.flags |= SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_MAC_CAP;
    spdm_context->local_context.capability.flags |= SPDM_GET_CAPABILITIES_REQUEST_FLAGS_PSK_CAP;
    spdm_context->local_context.capability.flags |= SPDM_GET_CAPABILITIES_REQUEST_FLAGS_ENCRYPT_CAP;
    spdm_context->local_context.capability.flags |= SPDM_GET_CAPABILITIES_REQUEST_FLAGS_MAC_CAP;
    spdm_context->local_context.capability.flags |= SPDM_GET_CAPABILITIES_REQUEST_FLAGS_ENCAP_CAP;
    spdm_context->local_context.capability.flags |= SPDM_GET_CAPABILITIES_REQUEST_FLAGS_CERT_CAP;
    spdm_context->connection_info.capability.flags |=
        SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_ENCAP_CAP;
    libspdm_read_responder_public_certificate_chain(m_libspdm_use_hash_algo,
                                                    m_libspdm_use_asym_algo, &data,
                                                    &data_size,
                                                    &hash, &hash_size);
    libspdm_reset_message_a(spdm_context);
    spdm_context->connection_info.algorithm.base_hash_algo = m_libspdm_use_hash_algo;
    spdm_context->connection_info.algorithm.base_asym_algo = m_libspdm_use_asym_algo;
    spdm_context->connection_info.algorithm.dhe_named_group = m_libspdm_use_dhe_algo;
    spdm_context->connection_info.algorithm.aead_cipher_suite = m_libspdm_use_aead_algo;
#if LIBSPDM_RECORD_TRANSCRIPT_DATA_SUPPORT
    spdm_context->connection_info.peer_used_cert_chain[0].buffer_size =
        data_size;
    libspdm_copy_mem(spdm_context->connection_info.peer_used_cert_chain[0].buffer,
                     sizeof(spdm_context->connection_info.peer_used_cert_chain[0].buffer),
                     data, data_size);
#endif

    libspdm_register_get_encap_response_func(spdm_context, libspdm_get_encap_response_digest);
    status = libspdm_encapsulated_request(spdm_context, NULL, 0, NULL);
    assert_int_equal(status, LIBSPDM_STATUS_INVALID_MSG_SIZE);
    free(data);
}

void libspdm_test_requester_encap_request_case7(void **State)
{
    libspdm_return_t status;
    libspdm_test_context_t *spdm_test_context;
    libspdm_context_t *spdm_context;
    void *data;
    size_t data_size;
    void *hash;
    size_t hash_size;

    spdm_test_context = *State;
    spdm_context = spdm_test_context->spdm_context;
    spdm_test_context->case_id = 0x7;"|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\encap_request.c|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\encap_request.c|0b85203279254352ab936441042218d7
"spdm_context->connection_info.version = SPDM_MESSAGE_VERSION_11 <<
                                            SPDM_VERSION_NUMBER_SHIFT_BIT;
    spdm_context->connection_info.connection_state = LIBSPDM_CONNECTION_STATE_NEGOTIATED;
    spdm_context->connection_info.capability.flags |= SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_PSK_CAP;
    spdm_context->connection_info.capability.flags |=
        SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_ENCRYPT_CAP;
    spdm_context->connection_info.capability.flags |= SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_MAC_CAP;
    spdm_context->local_context.capability.flags |= SPDM_GET_CAPABILITIES_REQUEST_FLAGS_PSK_CAP;
    spdm_context->local_context.capability.flags |= SPDM_GET_CAPABILITIES_REQUEST_FLAGS_ENCRYPT_CAP;
    spdm_context->local_context.capability.flags |= SPDM_GET_CAPABILITIES_REQUEST_FLAGS_MAC_CAP;
    spdm_context->local_context.capability.flags |= SPDM_GET_CAPABILITIES_REQUEST_FLAGS_ENCAP_CAP;
    spdm_context->local_context.capability.flags |= SPDM_GET_CAPABILITIES_REQUEST_FLAGS_CERT_CAP;
    spdm_context->connection_info.capability.flags |=
        SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_ENCAP_CAP;
    libspdm_read_responder_public_certificate_chain(m_libspdm_use_hash_algo,
                                                    m_libspdm_use_asym_algo, &data,
                                                    &data_size,
                                                    &hash, &hash_size);
    libspdm_reset_message_a(spdm_context);
    spdm_context->connection_info.algorithm.base_hash_algo = m_libspdm_use_hash_algo;
    spdm_context->connection_info.algorithm.base_asym_algo = m_libspdm_use_asym_algo;
    spdm_context->connection_info.algorithm.dhe_named_group = m_libspdm_use_dhe_algo;
    spdm_context->connection_info.algorithm.aead_cipher_suite = m_libspdm_use_aead_algo;
#if LIBSPDM_RECORD_TRANSCRIPT_DATA_SUPPORT
    spdm_context->connection_info.peer_used_cert_chain[0].buffer_size =
        data_size;
    libspdm_copy_mem(spdm_context->connection_info.peer_used_cert_chain[0].buffer,
                     sizeof(spdm_context->connection_info.peer_used_cert_chain[0].buffer),
                     data, data_size);
#endif

    libspdm_register_get_encap_response_func(spdm_context, libspdm_get_encap_response_digest);
    status = libspdm_encapsulated_request(spdm_context, NULL, 0, NULL);
    assert_int_equal(status, LIBSPDM_STATUS_SUCCESS);
    free(data);
}

void libspdm_test_requester_encap_request_case8(void **State)
{
    libspdm_return_t status;
    libspdm_test_context_t *spdm_test_context;
    libspdm_context_t *spdm_context;
    void *data;
    size_t data_size;
    void *hash;
    size_t hash_size;

    spdm_test_context = *State;
    spdm_context = spdm_test_context->spdm_context;
    spdm_test_context->case_id = 0x8;

    spdm_context->connection_info.version = SPDM_MESSAGE_VERSION_11 <<
                                            SPDM_VERSION_NUMBER_SHIFT_BIT;
    spdm_context->connection_info.connection_state = LIBSPDM_CONNECTION_STATE_NEGOTIATED;
    spdm_context->connection_info.capability.flags |= SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_PSK_CAP;
    spdm_context->connection_info.capability.flags |=
        SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_ENCRYPT_CAP;
    spdm_context->connection_info.capability.flags |= SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_MAC_CAP;
    spdm_context->local_context.capability.flags |= SPDM_GET_CAPABILITIES_REQUEST_FLAGS_PSK_CAP;
    spdm_context->local_context.capability.flags |= SPDM_GET_CAPABILITIES_REQUEST_FLAGS_ENCRYPT_CAP;
    spdm_context->local_context.capability.flags |= SPDM_GET_CAPABILITIES_REQUEST_FLAGS_MAC_CAP;
    spdm_context->local_context.capability.flags |= SPDM_GET_CAPABILITIES_REQUEST_FLAGS_ENCAP_CAP;
    spdm_context->local_context.capability.flags |=
        SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_CERT_CAP;
    spdm_context->connection_info.capability.flags |=
        SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_ENCAP_CAP;
    libspdm_read_responder_public_certificate_chain(m_libspdm_use_hash_algo,
                                                    m_libspdm_use_asym_algo, &data,
                                                    &data_size,
                                                    &hash, &hash_size);
    spdm_context->local_context.local_cert_chain_provision[0] = data;
    spdm_context->local_context.local_cert_chain_provision_size[0] = data_size;"|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\encap_request.c|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\encap_request.c|431d2376e2af487f8c6d7a00f707366b
"libspdm_reset_message_a(spdm_context);
    spdm_context->connection_info.algorithm.base_hash_algo = m_libspdm_use_hash_algo;
    spdm_context->connection_info.algorithm.base_asym_algo = m_libspdm_use_asym_algo;
    spdm_context->connection_info.algorithm.dhe_named_group = m_libspdm_use_dhe_algo;
    spdm_context->connection_info.algorithm.aead_cipher_suite = m_libspdm_use_aead_algo;
#if LIBSPDM_RECORD_TRANSCRIPT_DATA_SUPPORT
    spdm_context->connection_info.peer_used_cert_chain[0].buffer_size =
        data_size;
    libspdm_copy_mem(spdm_context->connection_info.peer_used_cert_chain[0].buffer,
                     sizeof(spdm_context->connection_info.peer_used_cert_chain[0].buffer),
                     data, data_size);
#endif

    libspdm_register_get_encap_response_func(spdm_context, libspdm_get_encap_response_certificate);
    status = libspdm_encapsulated_request(spdm_context, NULL, 0, NULL);
    assert_int_equal(status, LIBSPDM_STATUS_SUCCESS);
    free(data);
}
#endif /* (LIBSPDM_ENABLE_CAPABILITY_MUT_AUTH_CAP) && (LIBSPDM_ENABLE_CAPABILITY_CERT_CAP) */

void libspdm_test_requester_encap_request_case9(void **State)
{
    libspdm_return_t status;
    libspdm_test_context_t *spdm_test_context;
    libspdm_context_t *spdm_context;
    void *data;
    size_t data_size;
    void *hash;
    size_t hash_size;

    spdm_test_context = *State;
    spdm_context = spdm_test_context->spdm_context;
    spdm_test_context->case_id = 0x9;

    spdm_context->connection_info.version = SPDM_MESSAGE_VERSION_11 <<
                                            SPDM_VERSION_NUMBER_SHIFT_BIT;
    spdm_context->connection_info.connection_state = LIBSPDM_CONNECTION_STATE_NEGOTIATED;
    spdm_context->connection_info.capability.flags |= SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_PSK_CAP;
    spdm_context->connection_info.capability.flags |=
        SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_ENCRYPT_CAP;
    spdm_context->connection_info.capability.flags |= SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_MAC_CAP;
    spdm_context->local_context.capability.flags |= SPDM_GET_CAPABILITIES_REQUEST_FLAGS_PSK_CAP;
    spdm_context->local_context.capability.flags |= SPDM_GET_CAPABILITIES_REQUEST_FLAGS_ENCRYPT_CAP;
    spdm_context->local_context.capability.flags |= SPDM_GET_CAPABILITIES_REQUEST_FLAGS_MAC_CAP;
    spdm_context->local_context.capability.flags |= SPDM_GET_CAPABILITIES_REQUEST_FLAGS_ENCAP_CAP;
    spdm_context->connection_info.capability.flags |=
        SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_KEY_UPD_CAP;
    spdm_context->local_context.capability.flags |=
        SPDM_GET_CAPABILITIES_REQUEST_FLAGS_KEY_UPD_CAP;
    spdm_context->connection_info.capability.flags |=
        SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_ENCAP_CAP;
    libspdm_read_responder_public_certificate_chain(m_libspdm_use_hash_algo,
                                                    m_libspdm_use_asym_algo, &data,
                                                    &data_size,
                                                    &hash, &hash_size);
    spdm_context->local_context.local_cert_chain_provision[0] = data;
    spdm_context->local_context.local_cert_chain_provision_size[0] = data_size;

    libspdm_reset_message_a(spdm_context);
    spdm_context->connection_info.algorithm.base_hash_algo = m_libspdm_use_hash_algo;
    spdm_context->connection_info.algorithm.base_asym_algo = m_libspdm_use_asym_algo;
    spdm_context->connection_info.algorithm.dhe_named_group = m_libspdm_use_dhe_algo;
    spdm_context->connection_info.algorithm.aead_cipher_suite = m_libspdm_use_aead_algo;
#if LIBSPDM_RECORD_TRANSCRIPT_DATA_SUPPORT
    spdm_context->connection_info.peer_used_cert_chain[0].buffer_size =
        data_size;
    libspdm_copy_mem(spdm_context->connection_info.peer_used_cert_chain[0].buffer,
                     sizeof(spdm_context->connection_info.peer_used_cert_chain[0].buffer),
                     data, data_size);
#endif

    libspdm_register_get_encap_response_func(spdm_context, libspdm_get_encap_response_key_update);
    status = libspdm_encapsulated_request(spdm_context, NULL, 0, NULL);
    assert_int_equal(status, LIBSPDM_STATUS_SUCCESS);
    free(data);
}

/**
 * Test 10: GET_ENCAPSULATED_REQUEST request message is encapsulated in ENCAPSULATED_REQUEST response message.
 * Expected Behavior: the Requester should respond with ErrorCode=UnexpectedRequest.
 **/
void libspdm_test_requester_encap_request_case10(void **State)
{
    libspdm_return_t status;
    libspdm_test_context_t *spdm_test_context;
    libspdm_context_t *spdm_context;

    spdm_test_context = *State;
    spdm_context = spdm_test_context->spdm_context;
    spdm_test_context->case_id = 0xA;"|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\encap_request.c|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\encap_request.c|e43b8f4865984b7b8b74e3c37fa1e9bb
"spdm_context->connection_info.version = SPDM_MESSAGE_VERSION_11 <<
                                            SPDM_VERSION_NUMBER_SHIFT_BIT;
    spdm_context->connection_info.connection_state = LIBSPDM_CONNECTION_STATE_NEGOTIATED;
    spdm_context->local_context.capability.flags |= SPDM_GET_CAPABILITIES_REQUEST_FLAGS_ENCAP_CAP;
    spdm_context->connection_info.capability.flags |=
        SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_ENCAP_CAP;

    libspdm_register_get_encap_response_func(spdm_context, NULL);
    status = libspdm_encapsulated_request(spdm_context, NULL, 0, NULL);
    assert_int_equal(status, LIBSPDM_STATUS_SUCCESS);
}

libspdm_test_context_t m_libspdm_requester_encap_request_test_context = {
    LIBSPDM_TEST_CONTEXT_VERSION,
    true,
    libspdm_requester_encap_request_test_send_message,
    libspdm_requester_encap_request_test_receive_message,
};

int libspdm_requester_encap_request_test_main(void)
{
    const struct CMUnitTest spdm_requester_encap_request_tests[] = {
        /* SendRequest failed*/
#if (LIBSPDM_ENABLE_CAPABILITY_MUT_AUTH_CAP) && (LIBSPDM_ENABLE_CAPABILITY_CERT_CAP)
        cmocka_unit_test(libspdm_test_requester_encap_request_case1),
        /* Success Case ,func :libspdm_get_encap_response_digest*/
        cmocka_unit_test(libspdm_test_requester_encap_request_case2),
        /* Error response: When spdm_encapsulated_response_ack_response versions are inconsistent*/
        cmocka_unit_test(libspdm_test_requester_encap_request_case3),
        /* Error response:Receive message only SPDM ENCAPSULATED_REQUEST response*/
        cmocka_unit_test(libspdm_test_requester_encap_request_case4),
        /* Error response: spdm_encapsulated_response_ack_response == NULL*/
        cmocka_unit_test(libspdm_test_requester_encap_request_case5),
        /* Error response: spdm_encapsulated_response_ack_response.param2 == NULL*/
        cmocka_unit_test(libspdm_test_requester_encap_request_case6),
        /* response: param2 == SPDM_ENCAPSULATED_RESPONSE_ACK_RESPONSE_PAYLOAD_TYPE_REQ_SLOT_NUMBER*/
        cmocka_unit_test(libspdm_test_requester_encap_request_case7),
        /*Success Case ,func :libspdm_get_encap_response_certificate */
        cmocka_unit_test(libspdm_test_requester_encap_request_case8),
#endif /* (LIBSPDM_ENABLE_CAPABILITY_MUT_AUTH_CAP) && (..) */

        /*Success Case ,func :libspdm_get_encap_response_key_update */
        cmocka_unit_test(libspdm_test_requester_encap_request_case9),
        /*Error response: GET_ENCAPSULATED_REQUEST message is encapsulated */
        cmocka_unit_test(libspdm_test_requester_encap_request_case10),
    };

    libspdm_setup_test_context(&m_libspdm_requester_encap_request_test_context);

    return cmocka_run_group_tests(spdm_requester_encap_request_tests,
                                  libspdm_unit_test_group_setup,
                                  libspdm_unit_test_group_teardown);
}

#endif /* LIBSPDM_ENABLE_CAPABILITY_ENCAP_CAP */"|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\encap_request.c|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\encap_request.c|b1452290ba864e939bd97a323c5da5b3
"/**
 *  Copyright Notice:
 *  Copyright 2021-2022 DMTF. All rights reserved.
 *  License: BSD 3-Clause License. For full text see link: https://github.com/DMTF/libspdm/blob/main/LICENSE.md
 **/
#include ""spdm_unit_test.h""
#include ""internal/libspdm_requester_lib.h""

#if (LIBSPDM_ENABLE_CAPABILITY_MUT_AUTH_CAP) && (LIBSPDM_ENABLE_CAPABILITY_ENCAP_CAP) && \
    (LIBSPDM_ENABLE_CAPABILITY_CERT_CAP)

spdm_get_digest_request_t m_spdm_get_digests_request1 = {
    {
        SPDM_MESSAGE_VERSION_11,
        SPDM_GET_DIGESTS,
    },
};
size_t m_spdm_get_digests_request1_size = sizeof(m_spdm_get_digests_request1);


spdm_get_digest_request_t m_spdm_get_digests_request2 = {
    {
        SPDM_MESSAGE_VERSION_13,
        SPDM_GET_DIGESTS,
    },
};
size_t m_spdm_get_digests_request2_size = sizeof(m_spdm_get_digests_request2);

static uint8_t m_local_certificate_chain[LIBSPDM_MAX_CERT_CHAIN_SIZE];

/**
 * Test 1: receives a valid GET_DIGESTS request message from Requester
 * Expected Behavior: produces a valid DIGESTS response message
 **/
void test_spdm_requester_encap_get_digests_case1(void **state)
{
    libspdm_return_t status;
    libspdm_test_context_t *spdm_test_context;
    libspdm_context_t *spdm_context;
    size_t response_size;
    uint8_t response[LIBSPDM_MAX_SPDM_MSG_SIZE];
    spdm_digest_response_t *spdm_response;

    spdm_test_context = *state;
    spdm_context = spdm_test_context->spdm_context;
    spdm_test_context->case_id = 0x1;
    spdm_context->connection_info.version = SPDM_MESSAGE_VERSION_11
                                            << SPDM_VERSION_NUMBER_SHIFT_BIT;
    spdm_context->connection_info.connection_state =
        LIBSPDM_CONNECTION_STATE_NEGOTIATED;
    spdm_context->local_context.capability.flags |=
        SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_CERT_CAP;
    spdm_context->connection_info.algorithm.base_hash_algo =
        m_libspdm_use_hash_algo;
    spdm_context->local_context.local_cert_chain_provision[0] =
        m_local_certificate_chain;
    spdm_context->local_context.local_cert_chain_provision_size[0] =
        sizeof(m_local_certificate_chain);
    libspdm_set_mem(m_local_certificate_chain, sizeof(m_local_certificate_chain),
                    (uint8_t)(0xFF));

#if LIBSPDM_RECORD_TRANSCRIPT_DATA_SUPPORT
    spdm_context->transcript.message_m.buffer_size =
        spdm_context->transcript.message_m.max_buffer_size;
#endif

    response_size = sizeof(response);
    status = libspdm_get_encap_response_digest(spdm_context,
                                               m_spdm_get_digests_request1_size,
                                               &m_spdm_get_digests_request1,
                                               &response_size, response);
    assert_int_equal(status, LIBSPDM_STATUS_SUCCESS);
    assert_int_equal(
        response_size,
        sizeof(spdm_digest_response_t) +
        libspdm_get_hash_size(spdm_context->connection_info
                              .algorithm.base_hash_algo));
    spdm_response = (void *)response;
    assert_int_equal(spdm_response->header.request_response_code,
                     SPDM_DIGESTS);
#if LIBSPDM_RECORD_TRANSCRIPT_DATA_SUPPORT
    assert_int_equal(spdm_context->transcript.message_m.buffer_size,
                     0);
#endif
}

/**
 * Test 2:
 * Expected Behavior:
 **/
void test_spdm_requester_encap_get_digests_case2(void **state)
{
}

/**
 * Test 3: receives a valid GET_DIGESTS request message from Requester, but the request message cannot be appended to the internal cache since the internal cache is full
 * Expected Behavior: produces an ERROR response message with error code = Unspecified
 **/
void test_spdm_requester_encap_get_digests_case3(void **state)
{
    libspdm_return_t status;
    libspdm_test_context_t *spdm_test_context;
    libspdm_context_t *spdm_context;
    size_t response_size;
    uint8_t response[LIBSPDM_MAX_SPDM_MSG_SIZE];
#if LIBSPDM_RECORD_TRANSCRIPT_DATA_SUPPORT
    spdm_digest_response_t *spdm_response;
#endif
    spdm_test_context = *state;
    spdm_context = spdm_test_context->spdm_context;
    spdm_test_context->case_id = 0x3;
    spdm_context->connection_info.version = SPDM_MESSAGE_VERSION_11
                                            << SPDM_VERSION_NUMBER_SHIFT_BIT;
    spdm_context->connection_info.connection_state =
        LIBSPDM_CONNECTION_STATE_NEGOTIATED;
    spdm_context->local_context.capability.flags |=
        SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_CERT_CAP;
    spdm_context->connection_info.algorithm.base_hash_algo =
        m_libspdm_use_hash_algo;
    spdm_context->local_context.local_cert_chain_provision[0] =
        m_local_certificate_chain;
    spdm_context->local_context.local_cert_chain_provision_size[0] =
        sizeof(m_local_certificate_chain);
    libspdm_set_mem(m_local_certificate_chain, sizeof(m_local_certificate_chain),
                    (uint8_t)(0xFF));"|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\encap_digests.c|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\encap_digests.c|0a339f5ec629441c8d7355553fd0132c
"response_size = sizeof(response);
#if LIBSPDM_RECORD_TRANSCRIPT_DATA_SUPPORT
    spdm_context->transcript.message_b.buffer_size =
        spdm_context->transcript.message_b.max_buffer_size;
#endif
    status = libspdm_get_encap_response_digest(spdm_context,
                                               m_spdm_get_digests_request1_size,
                                               &m_spdm_get_digests_request1,
                                               &response_size, response);
    assert_int_equal(status, LIBSPDM_STATUS_SUCCESS);

#if LIBSPDM_RECORD_TRANSCRIPT_DATA_SUPPORT
    assert_int_equal(
        response_size,
        sizeof(spdm_digest_response_t) +
        libspdm_get_hash_size(spdm_context->connection_info
                              .algorithm.base_hash_algo));
    spdm_response = (void *)response;
    assert_int_equal(spdm_response->header.request_response_code,
                     SPDM_DIGESTS);
    assert_int_equal(spdm_response->header.param1,
                     0);
    assert_int_equal(spdm_response->header.param2, SPDM_ERROR_CODE_INVALID_REQUEST);
#endif
}

/**
 * Test 4: receives a valid GET_DIGESTS request message from Requester, but the response message cannot be appended to the internal cache since the internal cache is full
 * Expected Behavior: produces an ERROR response message with error code = Unspecified
 **/
void test_spdm_requester_encap_get_digests_case4(void **state)
{
    libspdm_test_context_t *spdm_test_context;
    libspdm_context_t *spdm_context;
#if LIBSPDM_RECORD_TRANSCRIPT_DATA_SUPPORT
    size_t response_size;
    uint8_t response[LIBSPDM_MAX_SPDM_MSG_SIZE];
    libspdm_return_t status;
    spdm_digest_response_t *spdm_response;
#endif

    spdm_test_context = *state;
    spdm_context = spdm_test_context->spdm_context;
    spdm_test_context->case_id = 0x4;
    spdm_context->connection_info.version = SPDM_MESSAGE_VERSION_11
                                            << SPDM_VERSION_NUMBER_SHIFT_BIT;
    spdm_context->connection_info.connection_state =
        LIBSPDM_CONNECTION_STATE_NEGOTIATED;
    spdm_context->local_context.capability.flags |=
        SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_CERT_CAP;
    spdm_context->connection_info.algorithm.base_hash_algo =
        m_libspdm_use_hash_algo;
    spdm_context->local_context.local_cert_chain_provision[0] =
        m_local_certificate_chain;
    spdm_context->local_context.local_cert_chain_provision_size[0] =
        sizeof(m_local_certificate_chain);
    libspdm_set_mem(m_local_certificate_chain, sizeof(m_local_certificate_chain),
                    (uint8_t)(0xFF));

#if LIBSPDM_RECORD_TRANSCRIPT_DATA_SUPPORT
    spdm_context->transcript.message_b.buffer_size =
        spdm_context->transcript.message_b.max_buffer_size -
        sizeof(spdm_get_digest_request_t);
    response_size = sizeof(response);
    status = libspdm_get_encap_response_digest(spdm_context,
                                               m_spdm_get_digests_request1_size,
                                               &m_spdm_get_digests_request1,
                                               &response_size, response);
    assert_int_equal(status, LIBSPDM_STATUS_SUCCESS);
    assert_int_equal(
        response_size,
        sizeof(spdm_digest_response_t) +
        libspdm_get_hash_size(spdm_context->connection_info
                              .algorithm.base_hash_algo));
    spdm_response = (void *)response;
    assert_int_equal(spdm_response->header.request_response_code,
                     SPDM_DIGESTS);
    assert_int_equal(spdm_response->header.param1,
                     0);
    assert_int_equal(spdm_response->header.param2, SPDM_ERROR_CODE_INVALID_REQUEST);
#endif
}

/**
 * Test 5: receives a valid GET_DIGESTS request message from Requester ,
 * Set multi_key_conn_req to check if it responds correctly
 * Expected Behavior: produces a valid DIGESTS response message
 **/
void test_spdm_requester_encap_get_digests_case5(void **state)
{
    libspdm_return_t status;
    libspdm_test_context_t *spdm_test_context;
    libspdm_context_t *spdm_context;
    size_t response_size;
    uint8_t response[LIBSPDM_MAX_SPDM_MSG_SIZE];
    spdm_digest_response_t *spdm_response;
    libspdm_session_info_t *session_info;
    uint32_t session_id;"|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\encap_digests.c|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\encap_digests.c|fc0bcf25e04e4ed8bbfb0d607e6ae63c
"spdm_test_context = *state;
    spdm_context = spdm_test_context->spdm_context;
    spdm_test_context->case_id = 0x5;
    spdm_context->connection_info.version = SPDM_MESSAGE_VERSION_13
                                            << SPDM_VERSION_NUMBER_SHIFT_BIT;
    spdm_context->connection_info.connection_state =
        LIBSPDM_CONNECTION_STATE_NEGOTIATED;
    spdm_context->local_context.capability.flags |=
        SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_CERT_CAP;
    spdm_context->connection_info.algorithm.base_hash_algo =
        m_libspdm_use_hash_algo;
    spdm_context->local_context.local_cert_chain_provision[0] =
        m_local_certificate_chain;
    spdm_context->local_context.local_cert_chain_provision_size[0] =
        sizeof(m_local_certificate_chain);
    libspdm_set_mem(m_local_certificate_chain, sizeof(m_local_certificate_chain),
                    (uint8_t)(0xFF));

    session_id = 0xFFFFFFFF;
    spdm_context->latest_session_id = session_id;
    spdm_context->last_spdm_request_session_id_valid = true;
    spdm_context->last_spdm_request_session_id = session_id;
    session_info = &spdm_context->session_info[0];
    libspdm_session_info_init(spdm_context, session_info, session_id, true);
    libspdm_secured_message_set_session_state(
        session_info->secured_message_context,
        LIBSPDM_SESSION_STATE_ESTABLISHED);

#if LIBSPDM_RECORD_TRANSCRIPT_DATA_SUPPORT
    spdm_context->transcript.message_m.buffer_size =
        spdm_context->transcript.message_m.max_buffer_size;
#endif
    /* Sub Case 1: Set multi_key_conn_req to true*/
    spdm_context->connection_info.multi_key_conn_req = true;
    libspdm_reset_message_encap_d(spdm_context, session_info);

    response_size = sizeof(response);
    status = libspdm_get_encap_response_digest(spdm_context,
                                               m_spdm_get_digests_request2_size,
                                               &m_spdm_get_digests_request2,
                                               &response_size, response);
    assert_int_equal(status, LIBSPDM_STATUS_SUCCESS);
    assert_int_equal(
        response_size,
        sizeof(spdm_digest_response_t) +  sizeof(spdm_key_pair_id_t) +
        sizeof(spdm_certificate_info_t) +
        sizeof(spdm_key_usage_bit_mask_t) +
        libspdm_get_hash_size(spdm_context->connection_info
                              .algorithm.base_hash_algo));
    spdm_response = (void *)response;
    assert_int_equal(spdm_response->header.request_response_code,
                     SPDM_DIGESTS);
    assert_int_equal(session_info->session_transcript.message_encap_d.buffer_size,
                     sizeof(spdm_digest_response_t) +  sizeof(spdm_key_pair_id_t) +
                     sizeof(spdm_certificate_info_t) +
                     sizeof(spdm_key_usage_bit_mask_t) +
                     libspdm_get_hash_size(spdm_context->connection_info.algorithm.base_hash_algo));

    /* Sub Case 2: Set multi_key_conn_req to false*/
    spdm_context->connection_info.multi_key_conn_req = false;
    libspdm_reset_message_encap_d(spdm_context, session_info);

    response_size = sizeof(response);
    status = libspdm_get_encap_response_digest(spdm_context,
                                               m_spdm_get_digests_request2_size,
                                               &m_spdm_get_digests_request2,
                                               &response_size, response);
    assert_int_equal(status, LIBSPDM_STATUS_SUCCESS);
    assert_int_equal(
        response_size,
        sizeof(spdm_digest_response_t) +
        libspdm_get_hash_size(spdm_context->connection_info
                              .algorithm.base_hash_algo));
    spdm_response = (void *)response;
    assert_int_equal(spdm_response->header.request_response_code,
                     SPDM_DIGESTS);
    assert_int_equal(session_info->session_transcript.message_encap_d.buffer_size, 0);
}

/**
 * Test 6: receives a valid GET_DIGESTS request message from Requester ,
 * Check KeyPairID CertificateInfo and KeyUsageMask
 * Expected Behavior: produces a valid DIGESTS response message
 **/
void test_spdm_requester_encap_get_digests_case6(void **state)
{
    libspdm_return_t status;
    libspdm_test_context_t *spdm_test_context;
    libspdm_context_t *spdm_context;
    size_t response_size;
    uint8_t response[LIBSPDM_MAX_SPDM_MSG_SIZE];
    spdm_digest_response_t *spdm_response;
    libspdm_session_info_t *session_info;
    uint32_t session_id;
    uint8_t *digest;
    spdm_key_pair_id_t *key_pair_id;
    spdm_certificate_info_t *cert_info;
    spdm_key_usage_bit_mask_t *key_usage_bit_mask;
    uint32_t hash_size;
    uint8_t slot_count;
    size_t additional_size;"|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\encap_digests.c|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\encap_digests.c|552193df483344d285e9f726283e8f5e
"spdm_test_context = *state;
    spdm_context = spdm_test_context->spdm_context;
    spdm_test_context->case_id = 0x6;
    spdm_context->connection_info.version = SPDM_MESSAGE_VERSION_13
                                            << SPDM_VERSION_NUMBER_SHIFT_BIT;
    spdm_context->connection_info.connection_state =
        LIBSPDM_CONNECTION_STATE_NEGOTIATED;
    spdm_context->local_context.capability.flags |=
        SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_CERT_CAP;
    spdm_context->connection_info.algorithm.base_hash_algo =
        m_libspdm_use_hash_algo;

    slot_count = SPDM_MAX_SLOT_COUNT;
    additional_size = sizeof(spdm_key_pair_id_t) + sizeof(spdm_certificate_info_t) +
                      sizeof(spdm_key_usage_bit_mask_t);
    hash_size = libspdm_get_hash_size(m_libspdm_use_hash_algo);

    for (uint8_t index = 0; index < SPDM_MAX_SLOT_COUNT; index++) {
        spdm_context->local_context.local_cert_chain_provision[index] =
            &m_local_certificate_chain[hash_size * index];
        spdm_context->local_context
        .local_cert_chain_provision_size[index] = hash_size;
    }

    libspdm_set_mem(m_local_certificate_chain, sizeof(m_local_certificate_chain),
                    (uint8_t)(0xFF));

    session_id = 0xFFFFFFFF;
    spdm_context->latest_session_id = session_id;
    spdm_context->last_spdm_request_session_id_valid = true;
    spdm_context->last_spdm_request_session_id = session_id;
    session_info = &spdm_context->session_info[0];
    libspdm_session_info_init(spdm_context, session_info, session_id, true);
    libspdm_secured_message_set_session_state(
        session_info->secured_message_context,
        LIBSPDM_SESSION_STATE_ESTABLISHED);

#if LIBSPDM_RECORD_TRANSCRIPT_DATA_SUPPORT
    spdm_context->transcript.message_m.buffer_size =
        spdm_context->transcript.message_m.max_buffer_size;
#endif
    spdm_context->connection_info.multi_key_conn_req = true;
    libspdm_reset_message_encap_d(spdm_context, session_info);

    response_size = sizeof(response);
    status = libspdm_get_encap_response_digest(spdm_context,
                                               m_spdm_get_digests_request2_size,
                                               &m_spdm_get_digests_request2,
                                               &response_size, response);

    assert_int_equal(status, LIBSPDM_STATUS_SUCCESS);
    assert_int_equal(response_size,
                     sizeof(spdm_digest_response_t) + (hash_size + additional_size) * slot_count);

    spdm_response = (void *)response;
    assert_int_equal(spdm_response->header.request_response_code,
                     SPDM_DIGESTS);
    assert_int_equal(session_info->session_transcript.message_encap_d.buffer_size,
                     sizeof(spdm_digest_response_t) + (hash_size + additional_size) * slot_count);

    digest = (void *)(spdm_response + 1);
    libspdm_zero_mem (digest, hash_size * slot_count);
    key_pair_id = (spdm_key_pair_id_t *)((uint8_t *)digest + (hash_size * slot_count));
    cert_info = (spdm_certificate_info_t *)((uint8_t *)key_pair_id +
                                            sizeof(spdm_key_pair_id_t) * slot_count);
    key_usage_bit_mask = (spdm_key_usage_bit_mask_t *)((uint8_t *)cert_info +
                                                       sizeof(spdm_certificate_info_t) *
                                                       slot_count);
    for (uint8_t index = 0; index < SPDM_MAX_SLOT_COUNT; index++) {
        assert_memory_equal((void *)&key_pair_id[index],
                            (void *)&spdm_context->local_context.local_key_pair_id[index],
                            sizeof(spdm_key_pair_id_t));
        assert_memory_equal((void *)&cert_info[index],
                            (void *)&spdm_context->local_context.local_cert_info[index],
                            sizeof(spdm_certificate_info_t));
        assert_memory_equal((void *)&key_usage_bit_mask[index],
                            (void *)&spdm_context->local_context.local_key_usage_bit_mask[index],
                            sizeof(spdm_key_usage_bit_mask_t));
    }
}

libspdm_test_context_t m_spdm_requester_digests_test_context = {
    LIBSPDM_TEST_CONTEXT_VERSION,
    false,
};"|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\encap_digests.c|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\encap_digests.c|93f679c7d5c642479a939a528d32eb1c
"int libspdm_requester_encap_digests_test_main(void)
{
    const struct CMUnitTest spdm_requester_digests_tests[] = {
        /* Success Case*/
        cmocka_unit_test(test_spdm_requester_encap_get_digests_case1),
        /* Can be populated with new test.*/
        cmocka_unit_test(test_spdm_requester_encap_get_digests_case2),
        /* Internal cache full (request message)*/
        cmocka_unit_test(test_spdm_requester_encap_get_digests_case3),
        /* Internal cache full (response message)*/
        cmocka_unit_test(test_spdm_requester_encap_get_digests_case4),
        /* Set multi_key_conn_req to check if it responds correctly */
        cmocka_unit_test(test_spdm_requester_encap_get_digests_case5),
        /* Check KeyPairID CertificateInfo and KeyUsageMask*/
        cmocka_unit_test(test_spdm_requester_encap_get_digests_case6),
    };

    libspdm_setup_test_context(&m_spdm_requester_digests_test_context);

    return cmocka_run_group_tests(spdm_requester_digests_tests,
                                  libspdm_unit_test_group_setup,
                                  libspdm_unit_test_group_teardown);
}

#endif /* (LIBSPDM_ENABLE_CAPABILITY_MUT_AUTH_CAP) && (..) */"|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\encap_digests.c|vram\SecurityPkg\DeviceSecurity\SpdmLib\libspdm\unit_test\test_spdm_requester\encap_digests.c|aac361ace7484bac882765dcf12dd431
